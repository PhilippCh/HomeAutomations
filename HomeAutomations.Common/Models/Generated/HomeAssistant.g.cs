//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.46.1.0
//   At: 2024-06-12T16:19:36.4834249+02:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAutomations.Models.Generated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AlarmControlPanelEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CalendarEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<CounterEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<GroupEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TimeEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<VacuumEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<InputDatetimeEntities>();
        serviceCollection.AddTransient<ConfiguratorEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<ImageEntities>();
        serviceCollection.AddTransient<OpenplantbookEntities>();
        serviceCollection.AddTransient<PlantEntities>();
        serviceCollection.AddTransient<TodoEntities>();
        serviceCollection.AddTransient<ValveEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<AverageServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<BlueprintServices>();
        serviceCollection.AddTransient<BoschShcServices>();
        serviceCollection.AddTransient<BrowserModServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CalendarServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoogleServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LawnMowerServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LocaltuyaServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<LovelaceServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NukiNgServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<O365Services>();
        serviceCollection.AddTransient<OpenplantbookServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PlantServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RepairsServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SpookServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SynologyDsmServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TodoServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<ValveServices>();
        serviceCollection.AddTransient<WakeOnLanServices>();
        serviceCollection.AddTransient<WasteCollectionScheduleServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WebrtcServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AlarmControlPanelEntities AlarmControlPanel { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CalendarEntities Calendar { get; }

    CameraEntities Camera { get; }

    ClimateEntities Climate { get; }

    CounterEntities Counter { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    GroupEntities Group { get; }

    InputBooleanEntities InputBoolean { get; }

    InputNumberEntities InputNumber { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LockEntities Lock { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TimeEntities Time { get; }

    TimerEntities Timer { get; }

    UpdateEntities Update { get; }

    VacuumEntities Vacuum { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    InputDatetimeEntities InputDatetime { get; }

    ConfiguratorEntities Configurator { get; }

    EventEntities Event { get; }

    ImageEntities Image { get; }

    OpenplantbookEntities Openplantbook { get; }

    PlantEntities Plant { get; }

    TodoEntities Todo { get; }

    ValveEntities Valve { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AlarmControlPanelEntities AlarmControlPanel => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CalendarEntities Calendar => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public CounterEntities Counter => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public GroupEntities Group => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TimeEntities Time => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public VacuumEntities Vacuum => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public InputDatetimeEntities InputDatetime => new(_haContext);
    public ConfiguratorEntities Configurator => new(_haContext);
    public EventEntities Event => new(_haContext);
    public ImageEntities Image => new(_haContext);
    public OpenplantbookEntities Openplantbook => new(_haContext);
    public PlantEntities Plant => new(_haContext);
    public TodoEntities Todo => new(_haContext);
    public ValveEntities Valve => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>bedroom/bedside_light_fabienne</summary>
    public LightEntity BedroomBedsideLightFabienne => new(_haContext, "light.bedroom_bedside_light_fabienne");
    ///<summary>bedroom/bedside_light_philipp</summary>
    public LightEntity BedroomBedsideLightPhilipp => new(_haContext, "light.bedroom_bedside_light_philipp");
    ///<summary>kitchen/cabinet_light</summary>
    public LightEntity KitchenCabinetLight => new(_haContext, "light.kitchen_cabinet_light");
    ///<summary>kitchen/ceiling_light</summary>
    public LightEntity KitchenCeilingLight => new(_haContext, "light.kitchen_ceiling_light");
    ///<summary>living_room/standard_lamp</summary>
    public LightEntity LivingRoomStandardLamp => new(_haContext, "light.living_room_standard_lamp");
    ///<summary>living_room/tv_lightstrip</summary>
    public LightEntity LivingRoomTvLightstrip => new(_haContext, "light.living_room_tv_lightstrip");
    ///<summary>study/desk_lamp</summary>
    public LightEntity StudyDeskLamp => new(_haContext, "light.study_desk_lamp");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>living_room/av_receiver</summary>
    public MediaPlayerEntity LivingRoomAvReceiver => new(_haContext, "media_player.living_room_av_receiver");
    ///<summary>living_room/av_receiver/zone2</summary>
    public MediaPlayerEntity LivingRoomAvReceiverZone2 => new(_haContext, "media_player.living_room_av_receiver_zone2");
    ///<summary>Panasonic Blu-Ray</summary>
    public MediaPlayerEntity PanasonicBluRay => new(_haContext, "media_player.panasonic_blu_ray");
    ///<summary>Wohnzimmer</summary>
    public MediaPlayerEntity Wohnzimmer => new(_haContext, "media_player.wohnzimmer");
}

public partial class AlarmControlPanelEntities
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Intrusion Detection System</summary>
    public AlarmControlPanelEntity IntrusionDetectionSystem => new(_haContext, "alarm_control_panel.intrusion_detection_system");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Balkontür links</summary>
    public BinarySensorEntity BalkonturLinks => new(_haContext, "binary_sensor.balkontur_links");
    ///<summary>Balkontür links Battery</summary>
    public BinarySensorEntity BalkonturLinksBattery => new(_haContext, "binary_sensor.balkontur_links_battery");
    ///<summary>Balkontür rechts</summary>
    public BinarySensorEntity BalkonturRechts => new(_haContext, "binary_sensor.balkontur_rechts");
    ///<summary>Balkontür rechts Battery</summary>
    public BinarySensorEntity BalkonturRechtsBattery => new(_haContext, "binary_sensor.balkontur_rechts_battery");
    ///<summary>bathroom/washing_machine_water_leak_sensor Battery</summary>
    public BinarySensorEntity BathroomWashingMachineWaterLeakSensorBatteryLow => new(_haContext, "binary_sensor.bathroom_washing_machine_water_leak_sensor_battery_low");
    ///<summary>bathroom/washing_machine_water_leak_sensor Moisture</summary>
    public BinarySensorEntity BathroomWashingMachineWaterLeakSensorWaterLeak => new(_haContext, "binary_sensor.bathroom_washing_machine_water_leak_sensor_water_leak");
    ///<summary>bedroom/lava_lamp</summary>
    public BinarySensorEntity BedroomLavaLampUpdateAvailable => new(_haContext, "binary_sensor.bedroom_lava_lamp_update_available");
    ///<summary>Open shutters sensor</summary>
    public BinarySensorEntity BedroomOpenShutters => new(_haContext, "binary_sensor.bedroom_open_shutters");
    ///<summary>bedroom/roller_shutter_left Charging status</summary>
    public BinarySensorEntity BedroomRollerShutterLeftChargingStatus => new(_haContext, "binary_sensor.bedroom_roller_shutter_left_charging_status");
    ///<summary>bedroom/roller_shutter_left Running</summary>
    public BinarySensorEntity BedroomRollerShutterLeftRunning => new(_haContext, "binary_sensor.bedroom_roller_shutter_left_running");
    ///<summary>bedroom/roller_shutter_left</summary>
    public BinarySensorEntity BedroomRollerShutterLeftUpdateAvailable => new(_haContext, "binary_sensor.bedroom_roller_shutter_left_update_available");
    ///<summary>bedroom/roller_shutter_right Charging status</summary>
    public BinarySensorEntity BedroomRollerShutterRightChargingStatus => new(_haContext, "binary_sensor.bedroom_roller_shutter_right_charging_status");
    ///<summary>bedroom/roller_shutter_right Running</summary>
    public BinarySensorEntity BedroomRollerShutterRightRunning => new(_haContext, "binary_sensor.bedroom_roller_shutter_right_running");
    ///<summary>bedroom/roller_shutter_right</summary>
    public BinarySensorEntity BedroomRollerShutterRightUpdateAvailable => new(_haContext, "binary_sensor.bedroom_roller_shutter_right_update_available");
    ///<summary>bedroom/weight_sensor_philipp Master Bed Occupied</summary>
    public BinarySensorEntity BedroomWeightSensorPhilippMasterBedOccupied => new(_haContext, "binary_sensor.bedroom_weight_sensor_philipp_master_bed_occupied");
    ///<summary>Desktop Philipp Unlocked</summary>
    public BinarySensorEntity DesktopPhilippUnlocked => new(_haContext, "binary_sensor.desktop_philipp_unlocked");
    ///<summary>DesktopFabienne</summary>
    public BinarySensorEntity Desktopfabienne => new(_haContext, "binary_sensor.desktopfabienne");
    ///<summary>DesktopPhilipp</summary>
    public BinarySensorEntity Desktopphilipp => new(_haContext, "binary_sensor.desktopphilipp");
    ///<summary>Fenster Arbeitszimmer</summary>
    public BinarySensorEntity FensterArbeitszimmer => new(_haContext, "binary_sensor.fenster_arbeitszimmer");
    ///<summary>Fenster Arbeitszimmer Battery</summary>
    public BinarySensorEntity FensterArbeitszimmerBattery => new(_haContext, "binary_sensor.fenster_arbeitszimmer_battery");
    ///<summary>Fenster Badezimmer</summary>
    public BinarySensorEntity FensterBadezimmer => new(_haContext, "binary_sensor.fenster_badezimmer");
    ///<summary>Fenster Badezimmer Battery</summary>
    public BinarySensorEntity FensterBadezimmerBattery => new(_haContext, "binary_sensor.fenster_badezimmer_battery");
    ///<summary>Fenster Schlafzimmer</summary>
    public BinarySensorEntity FensterSchlafzimmer => new(_haContext, "binary_sensor.fenster_schlafzimmer");
    ///<summary>Fenster Schlafzimmer Battery</summary>
    public BinarySensorEntity FensterSchlafzimmerBattery => new(_haContext, "binary_sensor.fenster_schlafzimmer_battery");
    ///<summary>iPhone Fabienne Focus</summary>
    public BinarySensorEntity IphoneFabienneFocus => new(_haContext, "binary_sensor.iphone_fabienne_focus");
    ///<summary>iPhone Philipp Focus</summary>
    public BinarySensorEntity IphonePhilippFocus => new(_haContext, "binary_sensor.iphone_philipp_focus");
    ///<summary>kitchen/cabinet_light</summary>
    public BinarySensorEntity KitchenCabinetLightUpdateAvailable => new(_haContext, "binary_sensor.kitchen_cabinet_light_update_available");
    ///<summary>kitchen/ceiling_light</summary>
    public BinarySensorEntity KitchenCeilingLightUpdateAvailable => new(_haContext, "binary_sensor.kitchen_ceiling_light_update_available");
    ///<summary>kitchen/dishwasher_water_leak_sensor Battery</summary>
    public BinarySensorEntity KitchenDishwasherWaterLeakSensorBatteryLow => new(_haContext, "binary_sensor.kitchen_dishwasher_water_leak_sensor_battery_low");
    ///<summary>kitchen/dishwasher_water_leak_sensor Tamper</summary>
    public BinarySensorEntity KitchenDishwasherWaterLeakSensorTamper => new(_haContext, "binary_sensor.kitchen_dishwasher_water_leak_sensor_tamper");
    ///<summary>kitchen/dishwasher_water_leak_sensor Moisture</summary>
    public BinarySensorEntity KitchenDishwasherWaterLeakSensorWaterLeak => new(_haContext, "binary_sensor.kitchen_dishwasher_water_leak_sensor_water_leak");
    ///<summary>kitchen/motion_detector Motion</summary>
    public BinarySensorEntity KitchenMotionDetectorOccupancy => new(_haContext, "binary_sensor.kitchen_motion_detector_occupancy");
    ///<summary>Laptop EnBW Unlocked</summary>
    public BinarySensorEntity LaptopEnbwUnlocked => new(_haContext, "binary_sensor.laptop_enbw_unlocked");
    ///<summary>LaptopFabienne</summary>
    public BinarySensorEntity Laptopfabienne => new(_haContext, "binary_sensor.laptopfabienne");
    ///<summary>LaptopPhilipp</summary>
    public BinarySensorEntity Laptopphilipp => new(_haContext, "binary_sensor.laptopphilipp");
    ///<summary>LaptopPhilippEnbw</summary>
    public BinarySensorEntity Laptopphilippenbw => new(_haContext, "binary_sensor.laptopphilippenbw");
    ///<summary>living_room/balcony/air_quality Battery</summary>
    public BinarySensorEntity LivingRoomBalconyAirQualityBattery => new(_haContext, "binary_sensor.living_room_balcony_air_quality_battery");
    ///<summary>living_room/balcony/motion_detector Motion</summary>
    public BinarySensorEntity LivingRoomBalconyMotionDetectorOccupancy => new(_haContext, "binary_sensor.living_room_balcony_motion_detector_occupancy");
    ///<summary>Nuki battery low</summary>
    public BinarySensorEntity NukiBatteryLow => new(_haContext, "binary_sensor.nuki_battery_low");
    ///<summary>Nuki Bridge Bridge Callback Set</summary>
    public BinarySensorEntity NukiBridgeBridgeCallbackSet => new(_haContext, "binary_sensor.nuki_bridge_bridge_callback_set");
    ///<summary>Nuki Bridge Connected</summary>
    public BinarySensorEntity NukiBridgeConnected => new(_haContext, "binary_sensor.nuki_bridge_connected");
    ///<summary>Nuki Haustür Battery Critical</summary>
    public BinarySensorEntity NukiHausturBatteryCritical => new(_haContext, "binary_sensor.nuki_haustur_battery_critical");
    ///<summary>Nuki Haustür Locked</summary>
    public BinarySensorEntity NukiHausturLocked => new(_haContext, "binary_sensor.nuki_haustur_locked");
    ///<summary>Nuki Haustür Ring Action</summary>
    public BinarySensorEntity NukiHausturRingAction => new(_haContext, "binary_sensor.nuki_haustur_ring_action");
    ///<summary>Nuki Wohnungstür Battery Charging</summary>
    public BinarySensorEntity NukiWohnungsturBatteryCharging => new(_haContext, "binary_sensor.nuki_wohnungstur_battery_charging");
    ///<summary>Nuki Wohnungstür Battery Critical</summary>
    public BinarySensorEntity NukiWohnungsturBatteryCritical => new(_haContext, "binary_sensor.nuki_wohnungstur_battery_critical");
    ///<summary>Nuki Wohnungstür Locked</summary>
    public BinarySensorEntity NukiWohnungsturLocked => new(_haContext, "binary_sensor.nuki_wohnungstur_locked");
    ///<summary>Presence Bedroom</summary>
    public BinarySensorEntity PresenceBedroom => new(_haContext, "binary_sensor.presence_bedroom");
    ///<summary>Presence Bedroom Back</summary>
    public BinarySensorEntity PresenceBedroomBack => new(_haContext, "binary_sensor.presence_bedroom_back");
    ///<summary>Presence Bedroom Bed Fups</summary>
    public BinarySensorEntity PresenceBedroomBedFups => new(_haContext, "binary_sensor.presence_bedroom_bed_fups");
    ///<summary>Presence Bedroom Bed Pups</summary>
    public BinarySensorEntity PresenceBedroomBedPups => new(_haContext, "binary_sensor.presence_bedroom_bed_pups");
    ///<summary>Presence Bedroom Front</summary>
    public BinarySensorEntity PresenceBedroomFront => new(_haContext, "binary_sensor.presence_bedroom_front");
    ///<summary>presence_bedroom_is_anyone_sleeping</summary>
    public BinarySensorEntity PresenceBedroomIsAnyoneSleeping => new(_haContext, "binary_sensor.presence_bedroom_is_anyone_sleeping");
    ///<summary>Presence Bedside Light Fups</summary>
    public BinarySensorEntity PresenceBedsideLightFabienne => new(_haContext, "binary_sensor.presence_bedside_light_fabienne");
    ///<summary>Presence Bedside Light Pups</summary>
    public BinarySensorEntity PresenceBedsideLightPhilipp => new(_haContext, "binary_sensor.presence_bedside_light_philipp");
    ///<summary>PupsStation (Drive 1) Below min remaining life</summary>
    public BinarySensorEntity PupsstationBelowMinRemainingLife => new(_haContext, "binary_sensor.pupsstation_below_min_remaining_life");
    ///<summary>PupsStation (Drive 2) Below min remaining life</summary>
    public BinarySensorEntity PupsstationBelowMinRemainingLife2 => new(_haContext, "binary_sensor.pupsstation_below_min_remaining_life_2");
    ///<summary>PupsStation (Drive 3) Below min remaining life</summary>
    public BinarySensorEntity PupsstationBelowMinRemainingLife3 => new(_haContext, "binary_sensor.pupsstation_below_min_remaining_life_3");
    ///<summary>PupsStation (Drive 1) Exceeded max bad sectors</summary>
    public BinarySensorEntity PupsstationExceededMaxBadSectors => new(_haContext, "binary_sensor.pupsstation_exceeded_max_bad_sectors");
    ///<summary>PupsStation (Drive 2) Exceeded max bad sectors</summary>
    public BinarySensorEntity PupsstationExceededMaxBadSectors2 => new(_haContext, "binary_sensor.pupsstation_exceeded_max_bad_sectors_2");
    ///<summary>PupsStation (Drive 3) Exceeded max bad sectors</summary>
    public BinarySensorEntity PupsstationExceededMaxBadSectors3 => new(_haContext, "binary_sensor.pupsstation_exceeded_max_bad_sectors_3");
    ///<summary>PupsStation Security status</summary>
    public BinarySensorEntity PupsstationSecurityStatus => new(_haContext, "binary_sensor.pupsstation_security_status");
    ///<summary>Raumthermostat Schlafzimmer Battery</summary>
    public BinarySensorEntity RaumthermostatSchlafzimmerBattery => new(_haContext, "binary_sensor.raumthermostat_schlafzimmer_battery");
    ///<summary>Roborock S7 Pro Ultra Cleaning</summary>
    public BinarySensorEntity RoborockS7ProUltraCleaning => new(_haContext, "binary_sensor.roborock_s7_pro_ultra_cleaning");
    ///<summary>Roborock S7 Pro Ultra Mop attached</summary>
    public BinarySensorEntity RoborockS7ProUltraMopAttached => new(_haContext, "binary_sensor.roborock_s7_pro_ultra_mop_attached");
    ///<summary>Roborock S7 Pro Ultra Water box attached</summary>
    public BinarySensorEntity RoborockS7ProUltraWaterBoxAttached => new(_haContext, "binary_sensor.roborock_s7_pro_ultra_water_box_attached");
    ///<summary>Roborock S7 Pro Ultra Water shortage</summary>
    public BinarySensorEntity RoborockS7ProUltraWaterShortage => new(_haContext, "binary_sensor.roborock_s7_pro_ultra_water_shortage");
    ///<summary>Thermostat Arbeitszimmer Battery</summary>
    public BinarySensorEntity ThermostatArbeitszimmerBattery => new(_haContext, "binary_sensor.thermostat_arbeitszimmer_battery");
    ///<summary>Thermostat Badezimmer Battery</summary>
    public BinarySensorEntity ThermostatBadezimmerBattery => new(_haContext, "binary_sensor.thermostat_badezimmer_battery");
    ///<summary>Thermostat Küche Battery</summary>
    public BinarySensorEntity ThermostatKucheBattery => new(_haContext, "binary_sensor.thermostat_kuche_battery");
    ///<summary>Thermostat Schlafzimmer Battery</summary>
    public BinarySensorEntity ThermostatSchlafzimmerBattery => new(_haContext, "binary_sensor.thermostat_schlafzimmer_battery");
    ///<summary>Thermostat Wohnzimmer Battery</summary>
    public BinarySensorEntity ThermostatWohnzimmerBattery => new(_haContext, "binary_sensor.thermostat_wohnzimmer_battery");
    ///<summary>Updater</summary>
    public BinarySensorEntity Updater => new(_haContext, "binary_sensor.updater");
    ///<summary>Wallpanel Hallway AC Plugged</summary>
    public BinarySensorEntity WallpanelHallwayAcPlugged => new(_haContext, "binary_sensor.wallpanel_hallway_ac_plugged");
    ///<summary>Wallpanel Hallway Charging</summary>
    public BinarySensorEntity WallpanelHallwayCharging => new(_haContext, "binary_sensor.wallpanel_hallway_charging");
    ///<summary>Wallpanel Hallway Motion Detected</summary>
    public BinarySensorEntity WallpanelHallwayMotionDetected => new(_haContext, "binary_sensor.wallpanel_hallway_motion_detected");
    ///<summary>Wallpanel Hallway USB Plugged</summary>
    public BinarySensorEntity WallpanelHallwayUsbPlugged => new(_haContext, "binary_sensor.wallpanel_hallway_usb_plugged");
    ///<summary>Zigbee2MQTT Bridge Connection state</summary>
    public BinarySensorEntity Zigbee2mqttBridgeConnectionState => new(_haContext, "binary_sensor.zigbee2mqtt_bridge_connection_state");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DesktopPhilipp DesktopPhilipp_shutdown</summary>
    public ButtonEntity DesktopphilippShutdown => new(_haContext, "button.desktopphilipp_shutdown");
    ///<summary>Home Assistant Reload</summary>
    public ButtonEntity HomeassistantReload => new(_haContext, "button.homeassistant_reload");
    ///<summary>Home Assistant Restart</summary>
    public ButtonEntity HomeassistantRestart => new(_haContext, "button.homeassistant_restart");
    ///<summary>Repairs Ignore all</summary>
    public ButtonEntity IgnoreAllIssues => new(_haContext, "button.ignore_all_issues");
    ///<summary>kitchen/pineapple_string_lights Restart</summary>
    public ButtonEntity KitchenPineappleStringLightsRestart => new(_haContext, "button.kitchen_pineapple_string_lights_restart");
    ///<summary>living_room/pineapple_neon_light Restart</summary>
    public ButtonEntity LivingRoompineappleNeonLightRestart => new(_haContext, "button.living_roompineapple_neon_light_restart");
    ///<summary>Nuki Bridge Firmware Update</summary>
    public ButtonEntity NukiBridgeFirmwareUpdate => new(_haContext, "button.nuki_bridge_firmware_update");
    ///<summary>Nuki Bridge Reboot</summary>
    public ButtonEntity NukiBridgeReboot => new(_haContext, "button.nuki_bridge_reboot");
    ///<summary>Presence-Sensor-FP2-703F Identify</summary>
    public ButtonEntity PresenceSensorFp2703fIdentify => new(_haContext, "button.presence_sensor_fp2_703f_identify");
    ///<summary>PupsStation Reboot</summary>
    public ButtonEntity PupsstationReboot => new(_haContext, "button.pupsstation_reboot");
    ///<summary>PupsStation Shutdown</summary>
    public ButtonEntity PupsstationShutdown => new(_haContext, "button.pupsstation_shutdown");
    ///<summary>living_room/picture_lights Restart</summary>
    public ButtonEntity StudyunusedUsbRelay1Restart => new(_haContext, "button.studyunused_usb_relay_1_restart");
    ///<summary>Repairs Unignore all</summary>
    public ButtonEntity UnignoreAllIssues => new(_haContext, "button.unignore_all_issues");
    ///<summary>Zigbee2MQTT Bridge Restart</summary>
    public ButtonEntity Zigbee2mqttBridgeRestart => new(_haContext, "button.zigbee2mqtt_bridge_restart");
}

public partial class CalendarEntities
{
    private readonly IHaContext _haContext;
    public CalendarEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Abfallleerungen</summary>
    public CalendarEntity Abfallleerungen => new(_haContext, "calendar.abfallleerungen");
    ///<summary>Abfallwirtschaft Germersheim</summary>
    public CalendarEntity AbfallwirtschaftGermersheim => new(_haContext, "calendar.abfallwirtschaft_germersheim");
    ///<summary>Birthdays</summary>
    public CalendarEntity Birthdays => new(_haContext, "calendar.birthdays");
    ///<summary>Calendar</summary>
    public CalendarEntity CalendarPhilipp => new(_haContext, "calendar.calendar_philipp");
    ///<summary>Christoph680@gmx.de</summary>
    public CalendarEntity Christoph680GmxDe => new(_haContext, "calendar.christoph680_gmx_de");
    ///<summary>Deutsche Feiertage</summary>
    public CalendarEntity DeutscheFeiertagePhilipp => new(_haContext, "calendar.deutsche_feiertage_philipp");
    ///<summary>Family</summary>
    public CalendarEntity Family => new(_haContext, "calendar.family");
    ///<summary>Feiertage in deutschland</summary>
    public CalendarEntity FeiertageInDeutschland => new(_haContext, "calendar.feiertage_in_deutschland");
    ///<summary>FILIADATA</summary>
    public CalendarEntity FiliadataPhilipp => new(_haContext, "calendar.filiadata_philipp");
    ///<summary>Geburtstagskalender</summary>
    public CalendarEntity GeburtstagskalenderPhilipp => new(_haContext, "calendar.geburtstagskalender_philipp");
    ///<summary>TINF11B2</summary>
    public CalendarEntity Tinf11b2Philipp => new(_haContext, "calendar.tinf11b2_philipp");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>192_168_188_52</summary>
    public CameraEntity _19216818852 => new(_haContext, "camera.192_168_188_52");
    ///<summary>Wohnzimmer Camera</summary>
    public CameraEntity WohnzimmerCamera => new(_haContext, "camera.wohnzimmer_camera");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Room Climate Arbeitszimmer</summary>
    public ClimateEntity RoomClimateArbeitszimmer => new(_haContext, "climate.room_climate_arbeitszimmer");
    ///<summary>Room Climate Badezimmer</summary>
    public ClimateEntity RoomClimateBadezimmer => new(_haContext, "climate.room_climate_badezimmer");
    ///<summary>Room Climate Küche</summary>
    public ClimateEntity RoomClimateKuche => new(_haContext, "climate.room_climate_kuche");
    ///<summary>Room Climate Schlafzimmer</summary>
    public ClimateEntity RoomClimateSchlafzimmer => new(_haContext, "climate.room_climate_schlafzimmer");
    ///<summary>Room Climate Wohnzimmer</summary>
    public ClimateEntity RoomClimateWohnzimmer => new(_haContext, "climate.room_climate_wohnzimmer");
}

public partial class CounterEntities
{
    private readonly IHaContext _haContext;
    public CounterEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public CounterEntity KratomIntakeDay => new(_haContext, "counter.kratom_intake_day");
    public CounterEntity MeditationMinutesWeek => new(_haContext, "counter.meditation_minutes_week");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>bedroom/roller_shutter_left</summary>
    public CoverEntity BedroomRollerShutterLeft => new(_haContext, "cover.bedroom_roller_shutter_left");
    ///<summary>bedroom/roller_shutter_right</summary>
    public CoverEntity BedroomRollerShutterRight => new(_haContext, "cover.bedroom_roller_shutter_right");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>iPhone Philipp Tracker</summary>
    public DeviceTrackerEntity _212d32640bb24aa9B5f5E85d4cb79da1Tracker => new(_haContext, "device_tracker.212d3264_0bb2_4aa9_b5f5_e85d4cb79da1_tracker");
    ///<summary>iPhone Fabienne Tracker</summary>
    public DeviceTrackerEntity E422bfdaA8064a39938164adf2266f6fTracker => new(_haContext, "device_tracker.e422bfda_a806_4a39_9381_64adf2266f6f_tracker");
    ///<summary>iPhone Fabienne</summary>
    public DeviceTrackerEntity IphoneFabienne => new(_haContext, "device_tracker.iphone_fabienne");
    ///<summary>Philipp</summary>
    public DeviceTrackerEntity IphonePhilipp => new(_haContext, "device_tracker.iphone_philipp");
    ///<summary>iPhone Philipp</summary>
    public DeviceTrackerEntity IphonePhilipp2 => new(_haContext, "device_tracker.iphone_philipp_2");
    ///<summary>MB/SW-tracker</summary>
    public DeviceTrackerEntity MiBandSmartWatch043001MbSwTracker => new(_haContext, "device_tracker.mi_band_smart_watch_043001_mb_sw_tracker");
}

public partial class GroupEntities
{
    private readonly IHaContext _haContext;
    public GroupEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alle Fenster</summary>
    public GroupEntity AllWindows => new(_haContext, "group.all_windows");
    ///<summary>Statische Lichter</summary>
    public GroupEntity StaticLights => new(_haContext, "group.static_lights");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Barcode scanner connected?</summary>
    public InputBooleanEntity BarcodeScannerConnected => new(_haContext, "input_boolean.barcode_scanner_connected");
    ///<summary>Desktop Fabienne</summary>
    public InputBooleanEntity ComputerWolDesktopFabienne => new(_haContext, "input_boolean.computer_wol_desktop_fabienne");
    ///<summary>Desktop Philipp</summary>
    public InputBooleanEntity ComputerWolDesktopPhilipp => new(_haContext, "input_boolean.computer_wol_desktop_philipp");
    ///<summary>dev_netdaemon_home_automations_apps_av_receiver_av_receiver</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsAvReceiverAvReceiver => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_av_receiver_av_receiver");
    ///<summary>dev_netdaemon_home_automations_apps_computer_switches_computer_switches</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsComputerSwitchesComputerSwitches => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_computer_switches_computer_switches");
    ///<summary>dev_netdaemon_home_automations_apps_counters_kratom_counter_kratom_counter</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsCountersKratomCounterKratomCounter => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_counters_kratom_counter_kratom_counter");
    ///<summary>dev_netdaemon_home_automations_apps_counters_sweets_counter_sweets_counter</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsCountersSweetsCounterSweetsCounter => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_counters_sweets_counter_sweets_counter");
    ///<summary>dev_netdaemon_home_automations_apps_counters_water_counter_water_counter</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsCountersWaterCounterWaterCounter => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_counters_water_counter_water_counter");
    ///<summary>dev_netdaemon_home_automations_apps_intelligent_shopping_list_intelligent_shopping_list</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsIntelligentShoppingListIntelligentShoppingList => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_intelligent_shopping_list_intelligent_shopping_list");
    ///<summary>dev_netdaemon_home_automations_apps_kite_reminder_kite_reminder</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsKiteReminderKiteReminder => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_kite_reminder_kite_reminder");
    ///<summary>dev_netdaemon_home_automations_apps_lights_scheduled_lights_scheduled_lights</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsLightsScheduledLightsScheduledLights => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_lights_scheduled_lights_scheduled_lights");
    ///<summary>dev_netdaemon_home_automations_apps_study_automations_study_automations</summary>
    public InputBooleanEntity DevNetdaemonHomeAutomationsAppsStudyAutomationsStudyAutomations => new(_haContext, "input_boolean.dev_netdaemon_home_automations_apps_study_automations_study_automations");
    ///<summary>Enable motion detector</summary>
    public InputBooleanEntity EnableMotionDetector => new(_haContext, "input_boolean.enable_motion_detector");
    ///<summary>Is living room canvas down</summary>
    public InputBooleanEntity LivingRoomCanvasActive => new(_haContext, "input_boolean.living_room_canvas_active");
    ///<summary>Meditation active?</summary>
    public InputBooleanEntity MeditationActive => new(_haContext, "input_boolean.meditation_active");
    ///<summary>Shut down harmony activity after moonlight stream ends?</summary>
    public InputBooleanEntity MoonlightShutdownHarmony => new(_haContext, "input_boolean.moonlight_shutdown_harmony");
    ///<summary>Shut down host after moonlight stream ends?</summary>
    public InputBooleanEntity MoonlightShutdownHost => new(_haContext, "input_boolean.moonlight_shutdown_host");
    ///<summary>Kontrolliere Kino-Lichter</summary>
    public InputBooleanEntity MovieTimeEnableLightControl => new(_haContext, "input_boolean.movie_time_enable_light_control");
    ///<summary>netdaemon_home_automations_apps_av_receiver_av_receiver</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsAvReceiverAvReceiver => new(_haContext, "input_boolean.netdaemon_home_automations_apps_av_receiver_av_receiver");
    ///<summary>netdaemon_home_automations_apps_calorie_counter_calorie_counter</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsCalorieCounterCalorieCounter => new(_haContext, "input_boolean.netdaemon_home_automations_apps_calorie_counter_calorie_counter");
    ///<summary>netdaemon_home_automations_apps_computer_switches_computer_switches</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsComputerSwitchesComputerSwitches => new(_haContext, "input_boolean.netdaemon_home_automations_apps_computer_switches_computer_switches");
    ///<summary>netdaemon_home_automations_apps_counters_kratom_counter_kratom_counter</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsCountersKratomCounterKratomCounter => new(_haContext, "input_boolean.netdaemon_home_automations_apps_counters_kratom_counter_kratom_counter");
    ///<summary>netdaemon_home_automations_apps_counters_sweets_counter_sweets_counter</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsCountersSweetsCounterSweetsCounter => new(_haContext, "input_boolean.netdaemon_home_automations_apps_counters_sweets_counter_sweets_counter");
    ///<summary>netdaemon_home_automations_apps_counters_water_counter_water_counter</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsCountersWaterCounterWaterCounter => new(_haContext, "input_boolean.netdaemon_home_automations_apps_counters_water_counter_water_counter");
    ///<summary>netdaemon_home_automations_apps_door_lock_door_lock</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsDoorLockDoorLock => new(_haContext, "input_boolean.netdaemon_home_automations_apps_door_lock_door_lock");
    ///<summary>netdaemon_home_automations_apps_intelligent_shopping_list_intelligent_shopping_list</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsIntelligentShoppingListIntelligentShoppingList => new(_haContext, "input_boolean.netdaemon_home_automations_apps_intelligent_shopping_list_intelligent_shopping_list");
    ///<summary>netdaemon_home_automations_apps_internet_watchdog_internet_watchdog</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsInternetWatchdogInternetWatchdog => new(_haContext, "input_boolean.netdaemon_home_automations_apps_internet_watchdog_internet_watchdog");
    ///<summary>netdaemon_home_automations_apps_kite_reminder_kite_reminder</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsKiteReminderKiteReminder => new(_haContext, "input_boolean.netdaemon_home_automations_apps_kite_reminder_kite_reminder");
    ///<summary>netdaemon_home_automations_apps_laundry_day_laundry_day</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsLaundryDayLaundryDay => new(_haContext, "input_boolean.netdaemon_home_automations_apps_laundry_day_laundry_day");
    ///<summary>netdaemon_home_automations_apps_lights_automatic_lights_automatic_lights</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsLightsAutomaticLightsAutomaticLights => new(_haContext, "input_boolean.netdaemon_home_automations_apps_lights_automatic_lights_automatic_lights");
    ///<summary>netdaemon_home_automations_apps_lights_scheduled_lights_scheduled_lights</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsLightsScheduledLightsScheduledLights => new(_haContext, "input_boolean.netdaemon_home_automations_apps_lights_scheduled_lights_scheduled_lights");
    ///<summary>netdaemon_home_automations_apps_living_room_button_living_room_button</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsLivingRoomButtonLivingRoomButton => new(_haContext, "input_boolean.netdaemon_home_automations_apps_living_room_button_living_room_button");
    ///<summary>netdaemon_home_automations_apps_razor_blade_usage_razor_blade_usage</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsRazorBladeUsageRazorBladeUsage => new(_haContext, "input_boolean.netdaemon_home_automations_apps_razor_blade_usage_razor_blade_usage");
    ///<summary>netdaemon_home_automations_apps_reminders_reminders</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsRemindersReminders => new(_haContext, "input_boolean.netdaemon_home_automations_apps_reminders_reminders");
    ///<summary>netdaemon_home_automations_apps_scale_importer_scale_importer</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsScaleImporterScaleImporter => new(_haContext, "input_boolean.netdaemon_home_automations_apps_scale_importer_scale_importer");
    ///<summary>netdaemon_home_automations_apps_shutters_shutters</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsShuttersShutters => new(_haContext, "input_boolean.netdaemon_home_automations_apps_shutters_shutters");
    ///<summary>netdaemon_home_automations_apps_sleep_soundscapes_sleep_soundscapes</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsSleepSoundscapesSleepSoundscapes => new(_haContext, "input_boolean.netdaemon_home_automations_apps_sleep_soundscapes_sleep_soundscapes");
    ///<summary>netdaemon_home_automations_apps_study_automations_study_automations</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsStudyAutomationsStudyAutomations => new(_haContext, "input_boolean.netdaemon_home_automations_apps_study_automations_study_automations");
    ///<summary>netdaemon_home_automations_apps_training_schedule_training_schedule</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsTrainingScheduleTrainingSchedule => new(_haContext, "input_boolean.netdaemon_home_automations_apps_training_schedule_training_schedule");
    ///<summary>netdaemon_home_automations_apps_trash_reminder_trash_reminder</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsTrashReminderTrashReminder => new(_haContext, "input_boolean.netdaemon_home_automations_apps_trash_reminder_trash_reminder");
    ///<summary>netdaemon_home_automations_apps_update_instagram_token_update_instagram_token</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsUpdateInstagramTokenUpdateInstagramToken => new(_haContext, "input_boolean.netdaemon_home_automations_apps_update_instagram_token_update_instagram_token");
    ///<summary>netdaemon_home_automations_apps_virtual_entities_virtual_entities</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsVirtualEntitiesVirtualEntities => new(_haContext, "input_boolean.netdaemon_home_automations_apps_virtual_entities_virtual_entities");
    ///<summary>netdaemon_home_automations_apps_water_leaks_water_leaks</summary>
    public InputBooleanEntity NetdaemonHomeAutomationsAppsWaterLeaksWaterLeaks => new(_haContext, "input_boolean.netdaemon_home_automations_apps_water_leaks_water_leaks");
    ///<summary>Override desk lamp</summary>
    public InputBooleanEntity OverrideDeskLamp => new(_haContext, "input_boolean.override_desk_lamp");
    ///<summary>Bio</summary>
    public InputBooleanEntity TrashBio => new(_haContext, "input_boolean.trash_bio");
    ///<summary>Glas</summary>
    public InputBooleanEntity TrashGlass => new(_haContext, "input_boolean.trash_glass");
    ///<summary>Papier</summary>
    public InputBooleanEntity TrashPaper => new(_haContext, "input_boolean.trash_paper");
    ///<summary>Gelber Sack</summary>
    public InputBooleanEntity TrashRecycling => new(_haContext, "input_boolean.trash_recycling");
    ///<summary>Wir sind dran</summary>
    public InputBooleanEntity TrashTakeOutside => new(_haContext, "input_boolean.trash_take_outside");
    ///<summary>Restmüll</summary>
    public InputBooleanEntity TrashWaste => new(_haContext, "input_boolean.trash_waste");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Kitchen scale calories</summary>
    public InputNumberEntity KitchenScaleCalories => new(_haContext, "input_number.kitchen_scale_calories");
    ///<summary>Used to calculate teaspoons/hour awake statistic kratom_intake_per_hour_philipp</summary>
    public InputNumberEntity KratomIntakeDailyHours => new(_haContext, "input_number.kratom_intake_daily_hours");
    ///<summary>Rasuren bis zum Klingenwechsel</summary>
    public InputNumberEntity MaxShavesBeforeChange => new(_haContext, "input_number.max_shaves_before_change");
    ///<summary>Meditation timer (minutes)</summary>
    public InputNumberEntity MeditationTimerMinutes => new(_haContext, "input_number.meditation_timer_minutes");
    ///<summary>Moonlight running PID</summary>
    public InputNumberEntity MoonlightPid => new(_haContext, "input_number.moonlight_pid");
    ///<summary>Bewegungsmelder Aktivierungsdauer (Sekunden)</summary>
    public InputNumberEntity MotionSensorIdleSecs => new(_haContext, "input_number.motion_sensor_idle_secs");
    ///<summary>Night</summary>
    public InputNumberEntity Nighttime => new(_haContext, "input_number.nighttime");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Active Chrome Remote Media Control Device</summary>
    public InputSelectEntity ChromeRemoteMediaControlDevices => new(_haContext, "input_select.chrome_remote_media_control_devices");
    ///<summary>Kitchen scale selected product</summary>
    public InputSelectEntity KitchenScaleSelectedProduct => new(_haContext, "input_select.kitchen_scale_selected_product");
    ///<summary>Spiel</summary>
    public InputSelectEntity MoonlightSelectedGame => new(_haContext, "input_select.moonlight_selected_game");
    ///<summary>Zielgerät</summary>
    public InputSelectEntity MoonlightSelectedHost => new(_haContext, "input_select.moonlight_selected_host");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calorie counter</summary>
    public InputTextEntity CalorieCounter => new(_haContext, "input_text.calorie_counter");
    ///<summary>Kitchen scale nutriscore grade</summary>
    public InputTextEntity KitchenScaleNutriscoreGrade => new(_haContext, "input_text.kitchen_scale_nutriscore_grade");
    ///<summary>Kitchen scale nutriscore url</summary>
    public InputTextEntity KitchenScaleNutriscoreUrl => new(_haContext, "input_text.kitchen_scale_nutriscore_url");
    ///<summary>Kitchen scale search term</summary>
    public InputTextEntity KitchenScaleSearchTerm => new(_haContext, "input_text.kitchen_scale_search_term");
    ///<summary>Moonlight current host</summary>
    public InputTextEntity MoonlightCurrentHost => new(_haContext, "input_text.moonlight_current_host");
    ///<summary>Vacuum State Test</summary>
    public InputTextEntity VacuumStateTest => new(_haContext, "input_text.vacuum_state_test");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>bedroom/lava_lamp Child lock</summary>
    public LockEntity BedroomLavaLampChildLock => new(_haContext, "lock.bedroom_lava_lamp_child_lock");
    ///<summary>living_room/cat_fountain Child lock</summary>
    public LockEntity LivingRoomCatFountainChildLock => new(_haContext, "lock.living_room_cat_fountain_child_lock");
    ///<summary>living_room/lightbulbs Child lock</summary>
    public LockEntity LivingRoomLightbulbsChildLock => new(_haContext, "lock.living_room_lightbulbs_child_lock");
    ///<summary>living_room/record_player Child lock</summary>
    public LockEntity LivingRoomRecordPlayerChildLock => new(_haContext, "lock.living_room_record_player_child_lock");
    ///<summary>living_room/subwoofer Child lock</summary>
    public LockEntity LivingRoomSubwooferChildLock => new(_haContext, "lock.living_room_subwoofer_child_lock");
    ///<summary>Nuki</summary>
    public LockEntity Nuki => new(_haContext, "lock.nuki");
    ///<summary>Nuki Haustür Lock</summary>
    public LockEntity NukiHausturLock => new(_haContext, "lock.nuki_haustur_lock");
    ///<summary>Nuki Wohnungstür Lock</summary>
    public LockEntity NukiWohnungsturLock => new(_haContext, "lock.nuki_wohnungstur_lock");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>bedroom/weight_sensor_philipp Weight sensor Philipp trigger level</summary>
    public NumberEntity BedroomWeightSensorPhilippWeightSensorPhilippTriggerLevel => new(_haContext, "number.bedroom_weight_sensor_philipp_weight_sensor_philipp_trigger_level");
    ///<summary>Dialogue Level</summary>
    public NumberEntity DialogueLevel => new(_haContext, "number.dialogue_level");
    ///<summary>Farn max air humidity</summary>
    public NumberEntity FarnMaxAirHumidity => new(_haContext, "number.farn_max_air_humidity");
    ///<summary>Farn max conductivity</summary>
    public NumberEntity FarnMaxConductivity => new(_haContext, "number.farn_max_conductivity");
    ///<summary>Farn max dli</summary>
    public NumberEntity FarnMaxDli => new(_haContext, "number.farn_max_dli");
    ///<summary>Farn max illuminance</summary>
    public NumberEntity FarnMaxIlluminance => new(_haContext, "number.farn_max_illuminance");
    ///<summary>Farn max soil moisture</summary>
    public NumberEntity FarnMaxSoilMoisture => new(_haContext, "number.farn_max_soil_moisture");
    ///<summary>Farn max temperature</summary>
    public NumberEntity FarnMaxTemperature => new(_haContext, "number.farn_max_temperature");
    ///<summary>Farn min air humidity</summary>
    public NumberEntity FarnMinAirHumidity => new(_haContext, "number.farn_min_air_humidity");
    ///<summary>Farn min conductivity</summary>
    public NumberEntity FarnMinConductivity => new(_haContext, "number.farn_min_conductivity");
    ///<summary>Farn min dli</summary>
    public NumberEntity FarnMinDli => new(_haContext, "number.farn_min_dli");
    ///<summary>Farn min illuminance</summary>
    public NumberEntity FarnMinIlluminance => new(_haContext, "number.farn_min_illuminance");
    ///<summary>Farn min soil moisture</summary>
    public NumberEntity FarnMinSoilMoisture => new(_haContext, "number.farn_min_soil_moisture");
    ///<summary>Farn min temperature</summary>
    public NumberEntity FarnMinTemperature => new(_haContext, "number.farn_min_temperature");
    ///<summary>Fensterblatt max air humidity</summary>
    public NumberEntity FensterblattMaxAirHumidity => new(_haContext, "number.fensterblatt_max_air_humidity");
    ///<summary>Fensterblatt max conductivity</summary>
    public NumberEntity FensterblattMaxConductivity => new(_haContext, "number.fensterblatt_max_conductivity");
    ///<summary>Fensterblatt max dli</summary>
    public NumberEntity FensterblattMaxDli => new(_haContext, "number.fensterblatt_max_dli");
    ///<summary>Fensterblatt max illuminance</summary>
    public NumberEntity FensterblattMaxIlluminance => new(_haContext, "number.fensterblatt_max_illuminance");
    ///<summary>Fensterblatt max soil moisture</summary>
    public NumberEntity FensterblattMaxSoilMoisture => new(_haContext, "number.fensterblatt_max_soil_moisture");
    ///<summary>Fensterblatt max temperature</summary>
    public NumberEntity FensterblattMaxTemperature => new(_haContext, "number.fensterblatt_max_temperature");
    ///<summary>Fensterblatt min air humidity</summary>
    public NumberEntity FensterblattMinAirHumidity => new(_haContext, "number.fensterblatt_min_air_humidity");
    ///<summary>Fensterblatt min conductivity</summary>
    public NumberEntity FensterblattMinConductivity => new(_haContext, "number.fensterblatt_min_conductivity");
    ///<summary>Fensterblatt min dli</summary>
    public NumberEntity FensterblattMinDli => new(_haContext, "number.fensterblatt_min_dli");
    ///<summary>Fensterblatt min illuminance</summary>
    public NumberEntity FensterblattMinIlluminance => new(_haContext, "number.fensterblatt_min_illuminance");
    ///<summary>Fensterblatt min soil moisture</summary>
    public NumberEntity FensterblattMinSoilMoisture => new(_haContext, "number.fensterblatt_min_soil_moisture");
    ///<summary>Fensterblatt min temperature</summary>
    public NumberEntity FensterblattMinTemperature => new(_haContext, "number.fensterblatt_min_temperature");
    ///<summary>kitchen/balcony/light _sensor Detection period</summary>
    public NumberEntity KitchenBalconyLightSensorDetectionPeriod => new(_haContext, "number.kitchen_balcony_light_sensor_detection_period");
    ///<summary>living_room/balcony/light _sensor Detection period</summary>
    public NumberEntity LivingRoomBalconyLightSensorDetectionPeriod => new(_haContext, "number.living_room_balcony_light_sensor_detection_period");
    ///<summary>Nuki LED brightness</summary>
    public NumberEntity NukiLedBrightness => new(_haContext, "number.nuki_led_brightness");
    ///<summary>Raumthermostat Schlafzimmer Offset</summary>
    public NumberEntity RaumthermostatSchlafzimmerOffset => new(_haContext, "number.raumthermostat_schlafzimmer_offset");
    ///<summary>Roborock S7 Pro Ultra Volume</summary>
    public NumberEntity RoborockS7ProUltraVolume => new(_haContext, "number.roborock_s7_pro_ultra_volume");
    ///<summary>Subwoofer Volume</summary>
    public NumberEntity SubwooferVolume => new(_haContext, "number.subwoofer_volume");
    ///<summary>Thermostat Arbeitszimmer Offset</summary>
    public NumberEntity ThermostatArbeitszimmerOffset => new(_haContext, "number.thermostat_arbeitszimmer_offset");
    ///<summary>Thermostat Badezimmer Offset</summary>
    public NumberEntity ThermostatBadezimmerOffset => new(_haContext, "number.thermostat_badezimmer_offset");
    ///<summary>Thermostat Küche Offset</summary>
    public NumberEntity ThermostatKucheOffset => new(_haContext, "number.thermostat_kuche_offset");
    ///<summary>Thermostat Schlafzimmer Offset</summary>
    public NumberEntity ThermostatSchlafzimmerOffset => new(_haContext, "number.thermostat_schlafzimmer_offset");
    ///<summary>Thermostat Wohnzimmer Offset</summary>
    public NumberEntity ThermostatWohnzimmerOffset => new(_haContext, "number.thermostat_wohnzimmer_offset");
    ///<summary>Tone Control Bass</summary>
    public NumberEntity ToneControlBass => new(_haContext, "number.tone_control_bass");
    ///<summary>Tone Control Treble</summary>
    public NumberEntity ToneControlTreble => new(_haContext, "number.tone_control_treble");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Fabienne</summary>
    public PersonEntity Fabienne => new(_haContext, "person.fabienne");
    ///<summary>Philipp</summary>
    public PersonEntity Philipp => new(_haContext, "person.philipp");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Fernbedienung</summary>
    public RemoteEntity FernbedienungRemote => new(_haContext, "remote.fernbedienung_remote");
    ///<summary>Wohnzimmer</summary>
    public RemoteEntity Wohnzimmer => new(_haContext, "remote.wohnzimmer");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>bedroom/lava_lamp Indicator mode</summary>
    public SelectEntity BedroomLavaLampIndicatorMode => new(_haContext, "select.bedroom_lava_lamp_indicator_mode");
    ///<summary>bedroom/lava_lamp Power outage memory</summary>
    public SelectEntity BedroomLavaLampPowerOutageMemory => new(_haContext, "select.bedroom_lava_lamp_power_outage_memory");
    ///<summary>kitchen/cabinet_light Power-on behavior</summary>
    public SelectEntity KitchenCabinetLightPowerOnBehavior => new(_haContext, "select.kitchen_cabinet_light_power_on_behavior");
    ///<summary>kitchen/ceiling_light Power-on behavior</summary>
    public SelectEntity KitchenCeilingLightPowerOnBehavior => new(_haContext, "select.kitchen_ceiling_light_power_on_behavior");
    ///<summary>Link Audio Delay</summary>
    public SelectEntity LinkAudioDelay => new(_haContext, "select.link_audio_delay");
    ///<summary>Link Control</summary>
    public SelectEntity LinkControl => new(_haContext, "select.link_control");
    ///<summary>living_room/cat_fountain Indicator mode</summary>
    public SelectEntity LivingRoomCatFountainIndicatorMode => new(_haContext, "select.living_room_cat_fountain_indicator_mode");
    ///<summary>living_room/cat_fountain Power outage memory</summary>
    public SelectEntity LivingRoomCatFountainPowerOutageMemory => new(_haContext, "select.living_room_cat_fountain_power_outage_memory");
    ///<summary>living_room/lightbulbs Indicator mode</summary>
    public SelectEntity LivingRoomLightbulbsIndicatorMode => new(_haContext, "select.living_room_lightbulbs_indicator_mode");
    ///<summary>living_room/lightbulbs Power outage memory</summary>
    public SelectEntity LivingRoomLightbulbsPowerOutageMemory => new(_haContext, "select.living_room_lightbulbs_power_outage_memory");
    ///<summary>living_room/record_player Indicator mode</summary>
    public SelectEntity LivingRoomRecordPlayerIndicatorMode => new(_haContext, "select.living_room_record_player_indicator_mode");
    ///<summary>living_room/record_player Power outage memory</summary>
    public SelectEntity LivingRoomRecordPlayerPowerOutageMemory => new(_haContext, "select.living_room_record_player_power_outage_memory");
    ///<summary>living_room/standard_lamp Power-on behavior</summary>
    public SelectEntity LivingRoomStandardLampPowerOnBehavior => new(_haContext, "select.living_room_standard_lamp_power_on_behavior");
    ///<summary>living_room/subwoofer Indicator mode</summary>
    public SelectEntity LivingRoomSubwooferIndicatorMode => new(_haContext, "select.living_room_subwoofer_indicator_mode");
    ///<summary>living_room/subwoofer Power outage memory</summary>
    public SelectEntity LivingRoomSubwooferPowerOutageMemory => new(_haContext, "select.living_room_subwoofer_power_outage_memory");
    ///<summary>Roborock S7 Pro Ultra Mop intensity</summary>
    public SelectEntity RoborockS7ProUltraMopIntensity => new(_haContext, "select.roborock_s7_pro_ultra_mop_intensity");
    ///<summary>Roborock S7 Pro Ultra Mop mode</summary>
    public SelectEntity RoborockS7ProUltraMopMode => new(_haContext, "select.roborock_s7_pro_ultra_mop_mode");
    ///<summary>Sleep Timer</summary>
    public SelectEntity SleepTimer => new(_haContext, "select.sleep_timer");
    ///<summary>Surround Decoder Device</summary>
    public SelectEntity SurroundDecoderDevice => new(_haContext, "select.surround_decoder_device");
    ///<summary>Tone Control Mode</summary>
    public SelectEntity ToneControlMode => new(_haContext, "select.tone_control_mode");
    ///<summary>Zigbee2MQTT Bridge Log level</summary>
    public SelectEntity Zigbee2mqttBridgeLogLevel => new(_haContext, "select.zigbee2mqtt_bridge_log_level");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>2-Wochen-Gerichte Philipp</summary>
    public SensorEntity _2WochenGerichtePhilipp => new(_haContext, "sensor.2_wochen_gerichte_philipp");
    ///<summary>iPhone Philipp Room Presence</summary>
    public SensorEntity _212d32640bb24aa9B5f5E85d4cb79da1RoomPresence => new(_haContext, "sensor.212d3264_0bb2_4aa9_b5f5_e85d4cb79da1_room_presence");
    ///<summary>Abfall</summary>
    public SensorEntity Abfall => new(_haContext, "sensor.abfall");
    ///<summary>Home Assistant Air quality</summary>
    public SensorEntity AirQuality => new(_haContext, "sensor.air_quality");
    ///<summary>Home Assistant Alarm control panels</summary>
    public SensorEntity AlarmControlPanels => new(_haContext, "sensor.alarm_control_panels");
    ///<summary>Am Ende der Tausend Sterne Philipp</summary>
    public SensorEntity AmEndeDerTausendSternePhilipp => new(_haContext, "sensor.am_ende_der_tausend_sterne_philipp");
    ///<summary>Anno 1800 Philipp</summary>
    public SensorEntity Anno1800Philipp => new(_haContext, "sensor.anno_1800_philipp");
    ///<summary>Home Assistant Areas</summary>
    public SensorEntity Areas => new(_haContext, "sensor.areas");
    ///<summary>Aufgaben Philipp</summary>
    public SensorEntity AufgabenPhilipp => new(_haContext, "sensor.aufgaben_philipp");
    ///<summary>Ausflüge &amp; Urlaub Philipp</summary>
    public SensorEntity AusflugeUrlaubPhilipp => new(_haContext, "sensor.ausfluge_urlaub_philipp");
    ///<summary>Home Assistant Automations</summary>
    public SensorEntity Automations => new(_haContext, "sensor.automations");
    ///<summary>Base calories for fabienne</summary>
    public SensorEntity BaseCaloriesForFabienne => new(_haContext, "sensor.base_calories_for_fabienne");
    ///<summary>Base calories for philipp</summary>
    public SensorEntity BaseCaloriesForPhilipp => new(_haContext, "sensor.base_calories_for_philipp");
    ///<summary>bathroom/razor_blade_usage Action</summary>
    public SensorEntity BathroomRazorBladeUsageAction => new(_haContext, "sensor.bathroom_razor_blade_usage_action");
    ///<summary>bathroom/razor_blade_usage Click</summary>
    public SensorEntity BathroomRazorBladeUsageClick => new(_haContext, "sensor.bathroom_razor_blade_usage_click");
    ///<summary>bathroom/razor_blade_usage Power outage count</summary>
    public SensorEntity BathroomRazorBladeUsagePowerOutageCount => new(_haContext, "sensor.bathroom_razor_blade_usage_power_outage_count");
    ///<summary>bathroom/washing_machine_water_leak_sensor Power outage count</summary>
    public SensorEntity BathroomWashingMachineWaterLeakSensorPowerOutageCount => new(_haContext, "sensor.bathroom_washing_machine_water_leak_sensor_power_outage_count");
    ///<summary>bedroom/bedside_light_switch_fabienne Action</summary>
    public SensorEntity BedroomBedsideLightSwitchFabienneAction => new(_haContext, "sensor.bedroom_bedside_light_switch_fabienne_action");
    ///<summary>bedroom/bedside_light_switch_fabienne Click</summary>
    public SensorEntity BedroomBedsideLightSwitchFabienneClick => new(_haContext, "sensor.bedroom_bedside_light_switch_fabienne_click");
    ///<summary>bedroom/bedside_light_switch_fabienne Power outage count</summary>
    public SensorEntity BedroomBedsideLightSwitchFabiennePowerOutageCount => new(_haContext, "sensor.bedroom_bedside_light_switch_fabienne_power_outage_count");
    ///<summary>bedroom/bedside_light_switch_philipp Action</summary>
    public SensorEntity BedroomBedsideLightSwitchPhilippAction => new(_haContext, "sensor.bedroom_bedside_light_switch_philipp_action");
    ///<summary>bedroom/bedside_light_switch_philipp Click</summary>
    public SensorEntity BedroomBedsideLightSwitchPhilippClick => new(_haContext, "sensor.bedroom_bedside_light_switch_philipp_click");
    ///<summary>bedroom/bedside_light_switch_philipp Power outage count</summary>
    public SensorEntity BedroomBedsideLightSwitchPhilippPowerOutageCount => new(_haContext, "sensor.bedroom_bedside_light_switch_philipp_power_outage_count");
    ///<summary>bedroom/laundry_day_button Action</summary>
    public SensorEntity BedroomLaundryDayButtonAction => new(_haContext, "sensor.bedroom_laundry_day_button_action");
    ///<summary>bedroom_laundry_day_reset_date</summary>
    public SensorEntity BedroomLaundryDayResetDate => new(_haContext, "sensor.bedroom_laundry_day_reset_date");
    ///<summary>bedroom/roller_shutter_left Motor state</summary>
    public SensorEntity BedroomRollerShutterLeftMotorState => new(_haContext, "sensor.bedroom_roller_shutter_left_motor_state");
    ///<summary>bedroom/roller_shutter_right Motor state</summary>
    public SensorEntity BedroomRollerShutterRightMotorState => new(_haContext, "sensor.bedroom_roller_shutter_right_motor_state");
    ///<summary>Home Assistant Binary sensors</summary>
    public SensorEntity BinarySensors => new(_haContext, "sensor.binary_sensors");
    ///<summary>Bücher Oma Philipp</summary>
    public SensorEntity BucherOmaPhilipp => new(_haContext, "sensor.bucher_oma_philipp");
    ///<summary>Home Assistant Buttons</summary>
    public SensorEntity Buttons => new(_haContext, "sensor.buttons");
    ///<summary>Home Assistant Calendars</summary>
    public SensorEntity Calendars => new(_haContext, "sensor.calendars");
    ///<summary>California Travel Video Philipp</summary>
    public SensorEntity CaliforniaTravelVideoPhilipp => new(_haContext, "sensor.california_travel_video_philipp");
    ///<summary>Home Assistant Cameras</summary>
    public SensorEntity Cameras => new(_haContext, "sensor.cameras");
    ///<summary>Home Assistant Climate</summary>
    public SensorEntity Climate => new(_haContext, "sensor.climate");
    ///<summary>Home Assistant Covers</summary>
    public SensorEntity Covers => new(_haContext, "sensor.covers");
    ///<summary>Current training schedule</summary>
    public SensorEntity CurrentTrainingSchedule => new(_haContext, "sensor.current_training_schedule");
    ///<summary>Home Assistant Custom integrations</summary>
    public SensorEntity CustomIntegrations => new(_haContext, "sensor.custom_integrations");
    ///<summary>Daily average kratom intake</summary>
    public SensorEntity DailyAverageKratomIntake => new(_haContext, "sensor.daily_average_kratom_intake");
    ///<summary>Home Assistant Dates</summary>
    public SensorEntity Dates => new(_haContext, "sensor.dates");
    ///<summary>Home Assistant Date/times</summary>
    public SensorEntity Datetimes => new(_haContext, "sensor.datetimes");
    ///<summary>DesktopPhilipp DesktopPhilipp_sessionstate</summary>
    public SensorEntity DesktopphilippSessionstate => new(_haContext, "sensor.desktopphilipp_sessionstate");
    ///<summary>Home Assistant Device trackers</summary>
    public SensorEntity DeviceTrackers => new(_haContext, "sensor.device_trackers");
    ///<summary>Home Assistant Devices</summary>
    public SensorEntity Devices => new(_haContext, "sensor.devices");
    ///<summary>Dinge für Eltern Philipp</summary>
    public SensorEntity DingeFurElternPhilipp => new(_haContext, "sensor.dinge_fur_eltern_philipp");
    ///<summary>Dioramen Philipp</summary>
    public SensorEntity DioramenPhilipp => new(_haContext, "sensor.dioramen_philipp");
    ///<summary>iPhone Fabienne Room Presence</summary>
    public SensorEntity E422bfdaA8064a39938164adf2266f6fRoomPresence => new(_haContext, "sensor.e422bfda_a806_4a39_9381_64adf2266f6f_room_presence");
    ///<summary>Home Assistant Entities</summary>
    public SensorEntity Entities => new(_haContext, "sensor.entities");
    ///<summary>🥘 Essen holen 🍱 Philipp</summary>
    public SensorEntity EssenHolenPhilipp => new(_haContext, "sensor.essen_holen_philipp");
    ///<summary>Essen 😍 Philipp</summary>
    public SensorEntity EssenPhilipp => new(_haContext, "sensor.essen_philipp");
    ///<summary>Home Assistant Fans</summary>
    public SensorEntity Fans => new(_haContext, "sensor.fans");
    ///<summary>🍔 Finger Food evening 🍟 Philipp</summary>
    public SensorEntity FingerFoodEveningPhilipp => new(_haContext, "sensor.finger_food_evening_philipp");
    ///<summary>Flagged Emails Philipp</summary>
    public SensorEntity FlaggedEmailsPhilipp => new(_haContext, "sensor.flagged_emails_philipp");
    ///<summary>Fragen Mieterbund Philipp</summary>
    public SensorEntity FragenMieterbundPhilipp => new(_haContext, "sensor.fragen_mieterbund_philipp");
    ///<summary>Game ideas Philipp</summary>
    public SensorEntity GameIdeasPhilipp => new(_haContext, "sensor.game_ideas_philipp");
    ///<summary>Games Philipp</summary>
    public SensorEntity GamesPhilipp => new(_haContext, "sensor.games_philipp");
    ///<summary>🎁 Geschenke Eltern 🎁 Philipp</summary>
    public SensorEntity GeschenkeElternPhilipp => new(_haContext, "sensor.geschenke_eltern_philipp");
    ///<summary>Geschenke 🎁 Philipp</summary>
    public SensorEntity GeschenkePhilipp => new(_haContext, "sensor.geschenke_philipp");
    ///<summary>hallway Cluster Leader</summary>
    public SensorEntity HallwayClusterLeader => new(_haContext, "sensor.hallway_cluster_leader");
    ///<summary>Hochzeit Philipp</summary>
    public SensorEntity HochzeitPhilipp => new(_haContext, "sensor.hochzeit_philipp");
    ///<summary>HOME-DESKTOP-PH-satellite HOME-DESKTOP-PH-satellite_servicestate</summary>
    public SensorEntity HomeDesktopPhSatelliteHomeDesktopPhSatelliteServicestate => new(_haContext, "sensor.home_desktop_ph_satellite_home_desktop_ph_satellite_servicestate");
    ///<summary>Homelab Philipp</summary>
    public SensorEntity HomelabPhilipp => new(_haContext, "sensor.homelab_philipp");
    ///<summary>Hörbücher 📖 Philipp</summary>
    public SensorEntity HorbucherPhilipp => new(_haContext, "sensor.horbucher_philipp");
    ///<summary>Home Assistant Humidifiers</summary>
    public SensorEntity Humidifiers => new(_haContext, "sensor.humidifiers");
    public SensorEntity Icloud3EventLog => new(_haContext, "sensor.icloud3_event_log");
    ///<summary>Home Assistant Images</summary>
    public SensorEntity Images => new(_haContext, "sensor.images");
    ///<summary>Home Assistant Input booleans</summary>
    public SensorEntity InputBooleans => new(_haContext, "sensor.input_booleans");
    ///<summary>Home Assistant Input buttons</summary>
    public SensorEntity InputButtons => new(_haContext, "sensor.input_buttons");
    ///<summary>Home Assistant Input date/times</summary>
    public SensorEntity InputDatetimes => new(_haContext, "sensor.input_datetimes");
    ///<summary>Home Assistant Input numbers</summary>
    public SensorEntity InputNumbers => new(_haContext, "sensor.input_numbers");
    ///<summary>Home Assistant Input selects</summary>
    public SensorEntity InputSelects => new(_haContext, "sensor.input_selects");
    ///<summary>Home Assistant Input texts</summary>
    public SensorEntity InputTexts => new(_haContext, "sensor.input_texts");
    ///<summary>Home Assistant Integrations</summary>
    public SensorEntity Integrations => new(_haContext, "sensor.integrations");
    ///<summary>iPhone Fabienne Activity</summary>
    public SensorEntity IphoneFabienneActivity => new(_haContext, "sensor.iphone_fabienne_activity");
    ///<summary>iPhone Fabienne Battery State</summary>
    public SensorEntity IphoneFabienneBatteryState => new(_haContext, "sensor.iphone_fabienne_battery_state");
    ///<summary>iPhone Fabienne BSSID</summary>
    public SensorEntity IphoneFabienneBssid => new(_haContext, "sensor.iphone_fabienne_bssid");
    ///<summary>iPhone Fabienne Connection Type</summary>
    public SensorEntity IphoneFabienneConnectionType => new(_haContext, "sensor.iphone_fabienne_connection_type");
    ///<summary>iPhone Fabienne Geocoded Location</summary>
    public SensorEntity IphoneFabienneGeocodedLocation => new(_haContext, "sensor.iphone_fabienne_geocoded_location");
    ///<summary>iPhone Fabienne Last Update Trigger</summary>
    public SensorEntity IphoneFabienneLastUpdateTrigger => new(_haContext, "sensor.iphone_fabienne_last_update_trigger");
    ///<summary>iPhone Fabienne SIM 1</summary>
    public SensorEntity IphoneFabienneSim1 => new(_haContext, "sensor.iphone_fabienne_sim_1");
    ///<summary>iPhone Fabienne SIM 2</summary>
    public SensorEntity IphoneFabienneSim2 => new(_haContext, "sensor.iphone_fabienne_sim_2");
    ///<summary>iPhone Fabienne SSID</summary>
    public SensorEntity IphoneFabienneSsid => new(_haContext, "sensor.iphone_fabienne_ssid");
    ///<summary>iPhone Philipp Activity</summary>
    public SensorEntity IphonePhilippActivity => new(_haContext, "sensor.iphone_philipp_activity");
    ///<summary>Philipp</summary>
    public SensorEntity IphonePhilippBadge => new(_haContext, "sensor.iphone_philipp_badge");
    ///<summary>iPhone Philipp Battery State</summary>
    public SensorEntity IphonePhilippBatteryState => new(_haContext, "sensor.iphone_philipp_battery_state");
    ///<summary>iPhone Philipp BSSID</summary>
    public SensorEntity IphonePhilippBssid => new(_haContext, "sensor.iphone_philipp_bssid");
    ///<summary>iPhone Philipp Connection Type</summary>
    public SensorEntity IphonePhilippConnectionType => new(_haContext, "sensor.iphone_philipp_connection_type");
    ///<summary>iPhone-Philipp Direction</summary>
    public SensorEntity IphonePhilippDirOfTravel => new(_haContext, "sensor.iphone_philipp_dir_of_travel");
    ///<summary>iPhone Philipp Geocoded Location</summary>
    public SensorEntity IphonePhilippGeocodedLocation => new(_haContext, "sensor.iphone_philipp_geocoded_location");
    ///<summary>iPhone-Philipp GPS Accuracy</summary>
    public SensorEntity IphonePhilippGpsAccuracy => new(_haContext, "sensor.iphone_philipp_gps_accuracy");
    ///<summary>iPhone-Philipp Info</summary>
    public SensorEntity IphonePhilippInfo => new(_haContext, "sensor.iphone_philipp_info");
    ///<summary>iPhone-Philipp Interval</summary>
    public SensorEntity IphonePhilippInterval => new(_haContext, "sensor.iphone_philipp_interval");
    ///<summary>iPhone-Philipp Last Located</summary>
    public SensorEntity IphonePhilippLastLocated => new(_haContext, "sensor.iphone_philipp_last_located");
    ///<summary>iPhone-Philipp Last Update</summary>
    public SensorEntity IphonePhilippLastUpdate => new(_haContext, "sensor.iphone_philipp_last_update");
    ///<summary>iPhone Philipp Last Update Trigger</summary>
    public SensorEntity IphonePhilippLastUpdateTrigger => new(_haContext, "sensor.iphone_philipp_last_update_trigger");
    ///<summary>iPhone-Philipp Last Zone</summary>
    public SensorEntity IphonePhilippLastZone => new(_haContext, "sensor.iphone_philipp_last_zone");
    ///<summary>iPhone-Philipp  Last Zone Fname</summary>
    public SensorEntity IphonePhilippLastZoneFname => new(_haContext, "sensor.iphone_philipp_last_zone_fname");
    ///<summary>iPhone-Philipp Next Update</summary>
    public SensorEntity IphonePhilippNextUpdate => new(_haContext, "sensor.iphone_philipp_next_update");
    ///<summary>iPhone-Philipp Poll Count</summary>
    public SensorEntity IphonePhilippPollCount => new(_haContext, "sensor.iphone_philipp_poll_count");
    ///<summary>iPhone Philipp SIM 1</summary>
    public SensorEntity IphonePhilippSim1 => new(_haContext, "sensor.iphone_philipp_sim_1");
    ///<summary>iPhone Philipp SIM 2</summary>
    public SensorEntity IphonePhilippSim2 => new(_haContext, "sensor.iphone_philipp_sim_2");
    ///<summary>iPhone Philipp SSID</summary>
    public SensorEntity IphonePhilippSsid => new(_haContext, "sensor.iphone_philipp_ssid");
    ///<summary>iPhone-Philipp Trigger</summary>
    public SensorEntity IphonePhilippTrigger => new(_haContext, "sensor.iphone_philipp_trigger");
    ///<summary>iPhone-Philipp Zone</summary>
    public SensorEntity IphonePhilippZone => new(_haContext, "sensor.iphone_philipp_zone");
    ///<summary>iPhone-Philipp  Zone Fname</summary>
    public SensorEntity IphonePhilippZoneFname => new(_haContext, "sensor.iphone_philipp_zone_fname");
    ///<summary>iPhone-Philipp  Zone Name</summary>
    public SensorEntity IphonePhilippZoneName => new(_haContext, "sensor.iphone_philipp_zone_name");
    ///<summary>iPhone-Philipp Zone Timestamp</summary>
    public SensorEntity IphonePhilippZoneTimestamp => new(_haContext, "sensor.iphone_philipp_zone_timestamp");
    ///<summary>iPhone-Philipp  Zone Title</summary>
    public SensorEntity IphonePhilippZoneTitle => new(_haContext, "sensor.iphone_philipp_zone_title");
    ///<summary>kitchen/cabinet_light_button Action</summary>
    public SensorEntity KitchenCabinetLightButtonAction => new(_haContext, "sensor.kitchen_cabinet_light_button_action");
    ///<summary>kitchen/cabinet_light_button Click</summary>
    public SensorEntity KitchenCabinetLightButtonClick => new(_haContext, "sensor.kitchen_cabinet_light_button_click");
    ///<summary>kitchen/cabinet_light_button Power outage count</summary>
    public SensorEntity KitchenCabinetLightButtonPowerOutageCount => new(_haContext, "sensor.kitchen_cabinet_light_button_power_outage_count");
    ///<summary>kitchen/ceiling_light_button Action</summary>
    public SensorEntity KitchenCeilingLightButtonAction => new(_haContext, "sensor.kitchen_ceiling_light_button_action");
    ///<summary>kitchen/ceiling_light_button Click</summary>
    public SensorEntity KitchenCeilingLightButtonClick => new(_haContext, "sensor.kitchen_ceiling_light_button_click");
    ///<summary>kitchen/ceiling_light_button Power outage count</summary>
    public SensorEntity KitchenCeilingLightButtonPowerOutageCount => new(_haContext, "sensor.kitchen_ceiling_light_button_power_outage_count");
    ///<summary>kitchen/ceiling_light Color options</summary>
    public SensorEntity KitchenCeilingLightColorOptions => new(_haContext, "sensor.kitchen_ceiling_light_color_options");
    ///<summary>kitchen/kratom_counter Action</summary>
    public SensorEntity KitchenKratomCounterAction => new(_haContext, "sensor.kitchen_kratom_counter_action");
    ///<summary>kitchen/kratom_counter Click</summary>
    public SensorEntity KitchenKratomCounterClick => new(_haContext, "sensor.kitchen_kratom_counter_click");
    ///<summary>kitchen/kratom_counter Power outage count</summary>
    public SensorEntity KitchenKratomCounterPowerOutageCount => new(_haContext, "sensor.kitchen_kratom_counter_power_outage_count");
    ///<summary>kitchen/motion_detector Power outage count</summary>
    public SensorEntity KitchenMotionDetectorPowerOutageCount => new(_haContext, "sensor.kitchen_motion_detector_power_outage_count");
    ///<summary>Koch- und Backideen Philipp</summary>
    public SensorEntity KochUndBackideenPhilipp => new(_haContext, "sensor.koch_und_backideen_philipp");
    ///<summary>Daily kratom intake for fabienne</summary>
    public SensorEntity KratomIntakeFabienne => new(_haContext, "sensor.kratom_intake_fabienne");
    ///<summary>Daily kratom intake target for fabienne</summary>
    public SensorEntity KratomIntakeFabienneTarget => new(_haContext, "sensor.kratom_intake_fabienne_target");
    ///<summary>kratom_intake_per_hour_philipp</summary>
    public SensorEntity KratomIntakePerHourPhilipp => new(_haContext, "sensor.kratom_intake_per_hour_philipp");
    ///<summary>Daily kratom intake for philipp</summary>
    public SensorEntity KratomIntakePhilipp => new(_haContext, "sensor.kratom_intake_philipp");
    ///<summary>Daily kratom intake target for philipp</summary>
    public SensorEntity KratomIntakePhilippTarget => new(_haContext, "sensor.kratom_intake_philipp_target");
    ///<summary>Kratom intake this month</summary>
    public SensorEntity KratomIntakeThisMonth => new(_haContext, "sensor.kratom_intake_this_month");
    ///<summary>LaptopEnBW LaptopEnBW_sessionstate</summary>
    public SensorEntity LaptopenbwSessionstate => new(_haContext, "sensor.laptopenbw_sessionstate");
    ///<summary>Home Assistant Lights</summary>
    public SensorEntity Lights => new(_haContext, "sensor.lights");
    ///<summary>living_room/balcony/air_quality Air quality</summary>
    public SensorEntity LivingRoomBalconyAirQualityAirQuality => new(_haContext, "sensor.living_room_balcony_air_quality_air_quality");
    ///<summary>living_room/balcony/motion_detector Power outage count</summary>
    public SensorEntity LivingRoomBalconyMotionDetectorPowerOutageCount => new(_haContext, "sensor.living_room_balcony_motion_detector_power_outage_count");
    ///<summary>living_room/lamp_switch Action</summary>
    public SensorEntity LivingRoomLampSwitchAction => new(_haContext, "sensor.living_room_lamp_switch_action");
    ///<summary>living_room/lamp_switch Click</summary>
    public SensorEntity LivingRoomLampSwitchClick => new(_haContext, "sensor.living_room_lamp_switch_click");
    ///<summary>living_room/bluetooth_proxy BLE devices scanner</summary>
    public SensorEntity LivingRoombluetoothProxyBleDevicesScanner => new(_haContext, "sensor.living_roombluetooth_proxy_ble_devices_scanner");
    ///<summary>Home Assistant Locks</summary>
    public SensorEntity Locks => new(_haContext, "sensor.locks");
    ///<summary>Mailbox door sensor</summary>
    public SensorEntity MailboxDoor => new(_haContext, "sensor.mailbox_door");
    ///<summary>Home Assistant Media players</summary>
    public SensorEntity MediaPlayers => new(_haContext, "sensor.media_players");
    ///<summary>MB/SW-steps</summary>
    public SensorEntity MiBandSmartWatch043001MbSwSteps => new(_haContext, "sensor.mi_band_smart_watch_043001_mb_sw_steps");
    ///<summary>netdaemon_status</summary>
    public SensorEntity NetdaemonStatus => new(_haContext, "sensor.netdaemon_status");
    ///<summary>🇫🇷 Normandie 🇫🇷 Philipp</summary>
    public SensorEntity NormandiePhilipp => new(_haContext, "sensor.normandie_philipp");
    ///<summary>Nuki Bridge Firmware Version</summary>
    public SensorEntity NukiBridgeFirmwareVersion => new(_haContext, "sensor.nuki_bridge_firmware_version");
    ///<summary>Nuki Bridge WiFi Firmware Version</summary>
    public SensorEntity NukiBridgeWifiFirmwareVersion => new(_haContext, "sensor.nuki_bridge_wifi_firmware_version");
    ///<summary>Nuki Firmware version</summary>
    public SensorEntity NukiFirmwareVersion => new(_haContext, "sensor.nuki_firmware_version");
    ///<summary>Nuki Hardware version</summary>
    public SensorEntity NukiHardwareVersion => new(_haContext, "sensor.nuki_hardware_version");
    ///<summary>Nuki Haustür Firmware Version</summary>
    public SensorEntity NukiHausturFirmwareVersion => new(_haContext, "sensor.nuki_haustur_firmware_version");
    ///<summary>Nuki Haustür State</summary>
    public SensorEntity NukiHausturState => new(_haContext, "sensor.nuki_haustur_state");
    ///<summary>Nuki trigger</summary>
    public SensorEntity NukiTrigger => new(_haContext, "sensor.nuki_trigger");
    ///<summary>Nuki Wohnungstür Firmware Version</summary>
    public SensorEntity NukiWohnungsturFirmwareVersion => new(_haContext, "sensor.nuki_wohnungstur_firmware_version");
    ///<summary>Nuki Wohnungstür State</summary>
    public SensorEntity NukiWohnungsturState => new(_haContext, "sensor.nuki_wohnungstur_state");
    ///<summary>Home Assistant Numbers</summary>
    public SensorEntity Numbers => new(_haContext, "sensor.numbers");
    ///<summary>🌲Nürnberg🎄🍄 Philipp</summary>
    public SensorEntity NurnbergPhilipp => new(_haContext, "sensor.nurnberg_philipp");
    ///<summary>openwindows_count</summary>
    public SensorEntity OpenwindowsCount => new(_haContext, "sensor.openwindows_count");
    ///<summary>Home Assistant Persistent notifications</summary>
    public SensorEntity PersistentNotifications => new(_haContext, "sensor.persistent_notifications");
    ///<summary>Home Assistant Persons</summary>
    public SensorEntity Persons => new(_haContext, "sensor.persons");
    ///<summary>PupsStation (Volume 1) Status</summary>
    public SensorEntity PupsstationStatus => new(_haContext, "sensor.pupsstation_status");
    ///<summary>PupsStation (Drive 1) Status</summary>
    public SensorEntity PupsstationStatus2 => new(_haContext, "sensor.pupsstation_status_2");
    ///<summary>PupsStation (Drive 2) Status</summary>
    public SensorEntity PupsstationStatus3 => new(_haContext, "sensor.pupsstation_status_3");
    ///<summary>PupsStation (Drive 3) Status</summary>
    public SensorEntity PupsstationStatus4 => new(_haContext, "sensor.pupsstation_status_4");
    ///<summary>Razor blade usage</summary>
    public SensorEntity RazorBladeUsage => new(_haContext, "sensor.razor_blade_usage");
    ///<summary>Home Assistant Remotes</summary>
    public SensorEntity Remotes => new(_haContext, "sensor.remotes");
    ///<summary>Roborock S7 Pro Ultra Dock error</summary>
    public SensorEntity RoborockS7ProUltraDockError => new(_haContext, "sensor.roborock_s7_pro_ultra_dock_error");
    ///<summary>Roborock S7 Pro Ultra Last clean begin</summary>
    public SensorEntity RoborockS7ProUltraLastCleanBegin => new(_haContext, "sensor.roborock_s7_pro_ultra_last_clean_begin");
    ///<summary>Roborock S7 Pro Ultra Last clean end</summary>
    public SensorEntity RoborockS7ProUltraLastCleanEnd => new(_haContext, "sensor.roborock_s7_pro_ultra_last_clean_end");
    ///<summary>Roborock S7 Pro Ultra Status</summary>
    public SensorEntity RoborockS7ProUltraStatus => new(_haContext, "sensor.roborock_s7_pro_ultra_status");
    ///<summary>Roborock S7 Pro Ultra Vacuum error</summary>
    public SensorEntity RoborockS7ProUltraVacuumError => new(_haContext, "sensor.roborock_s7_pro_ultra_vacuum_error");
    ///<summary>🇳🇿 Rundreise Neuseeland 🇳🇿 Philipp</summary>
    public SensorEntity RundreiseNeuseelandPhilipp => new(_haContext, "sensor.rundreise_neuseeland_philipp");
    ///<summary>🇺🇸 Rundreise West Coast 🇺🇸 Philipp</summary>
    public SensorEntity RundreiseWestCoastPhilipp => new(_haContext, "sensor.rundreise_west_coast_philipp");
    ///<summary>🇺🇸 Rundreisen Zukunft 🇺🇸 Philipp</summary>
    public SensorEntity RundreisenZukunftPhilipp => new(_haContext, "sensor.rundreisen_zukunft_philipp");
    ///<summary>Home Assistant Scenes</summary>
    public SensorEntity Scenes => new(_haContext, "sensor.scenes");
    ///<summary>Schreib-Ideen Philipp</summary>
    public SensorEntity SchreibIdeenPhilipp => new(_haContext, "sensor.schreib_ideen_philipp");
    ///<summary>Home Assistant Scripts</summary>
    public SensorEntity Scripts => new(_haContext, "sensor.scripts");
    ///<summary>Sehenswerte Filme Philipp</summary>
    public SensorEntity SehenswerteFilmePhilipp => new(_haContext, "sensor.sehenswerte_filme_philipp");
    ///<summary>Home Assistant Selects</summary>
    public SensorEntity Selects => new(_haContext, "sensor.selects");
    ///<summary>Home Assistant Sensors</summary>
    public SensorEntity Sensors => new(_haContext, "sensor.sensors");
    ///<summary>Serien Philipp</summary>
    public SensorEntity SerienPhilipp => new(_haContext, "sensor.serien_philipp");
    ///<summary>Seventeentrack Package: 1Z14597W6808897066</summary>
    public SensorEntity SeventeentrackPackage1z14597w6808897066 => new(_haContext, "sensor.seventeentrack_package_1z14597w6808897066");
    ///<summary>Ist heute Haushaltstag?</summary>
    public SensorEntity ShowHouseholdDayTodo => new(_haContext, "sensor.show_household_day_todo");
    ///<summary>Home Assistant Sirens</summary>
    public SensorEntity Sirens => new(_haContext, "sensor.sirens");
    ///<summary>Home Assistant Speech-to-text</summary>
    public SensorEntity Stt => new(_haContext, "sensor.stt");
    ///<summary>study/desk_lamp_switch Action</summary>
    public SensorEntity StudyDeskLampSwitchAction => new(_haContext, "sensor.study_desk_lamp_switch_action");
    ///<summary>study/desk_lamp_switch Click</summary>
    public SensorEntity StudyDeskLampSwitchClick => new(_haContext, "sensor.study_desk_lamp_switch_click");
    ///<summary>study/desk_lamp_switch Power outage count</summary>
    public SensorEntity StudyDeskLampSwitchPowerOutageCount => new(_haContext, "sensor.study_desk_lamp_switch_power_outage_count");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Home Assistant Suns</summary>
    public SensorEntity Suns => new(_haContext, "sensor.suns");
    ///<summary>Daily sweets intake for fabienne</summary>
    public SensorEntity SweetsIntakeFabienne => new(_haContext, "sensor.sweets_intake_fabienne");
    ///<summary>Daily sweets intake target for fabienne</summary>
    public SensorEntity SweetsIntakeFabienneTarget => new(_haContext, "sensor.sweets_intake_fabienne_target");
    ///<summary>Daily sweets intake for philipp</summary>
    public SensorEntity SweetsIntakePhilipp => new(_haContext, "sensor.sweets_intake_philipp");
    ///<summary>Daily sweets intake target for philipp</summary>
    public SensorEntity SweetsIntakePhilippTarget => new(_haContext, "sensor.sweets_intake_philipp_target");
    ///<summary>Home Assistant Switches</summary>
    public SensorEntity Switches => new(_haContext, "sensor.switches");
    ///<summary>🫖 Tee-Ranking ☕️ (und anderes…) Philipp</summary>
    public SensorEntity TeeRankingUndAnderesPhilipp => new(_haContext, "sensor.tee_ranking_und_anderes_philipp");
    ///<summary>Home Assistant Texts</summary>
    public SensorEntity Texts => new(_haContext, "sensor.texts");
    ///<summary>💸 The Millionaire’s Bucket List 💸 Philipp</summary>
    public SensorEntity TheMillionairesBucketListPhilipp => new(_haContext, "sensor.the_millionaires_bucket_list_philipp");
    ///<summary>Thermostat Arbeitszimmer</summary>
    public SensorEntity ThermostatArbeitszimmer => new(_haContext, "sensor.thermostat_arbeitszimmer");
    ///<summary>Thermostat Badezimmer</summary>
    public SensorEntity ThermostatBadezimmer => new(_haContext, "sensor.thermostat_badezimmer");
    ///<summary>Thermostat Wohnzimmer</summary>
    public SensorEntity ThermostatWohnzimmer => new(_haContext, "sensor.thermostat_wohnzimmer");
    ///<summary>Home Assistant Times</summary>
    public SensorEntity Times => new(_haContext, "sensor.times");
    ///<summary>Home Assistant Text-to-speech</summary>
    public SensorEntity Tts => new(_haContext, "sensor.tts");
    ///<summary>Unser Haus 🏠 Philipp</summary>
    public SensorEntity UnserHausPhilipp => new(_haContext, "sensor.unser_haus_philipp");
    ///<summary>Untitled list Philipp</summary>
    public SensorEntity UntitledListPhilipp => new(_haContext, "sensor.untitled_list_philipp");
    ///<summary>Home Assistant Update</summary>
    public SensorEntity Update => new(_haContext, "sensor.update");
    ///<summary>Urlaub Hawaii 2023 Philipp</summary>
    public SensorEntity UrlaubHawaii2023Philipp => new(_haContext, "sensor.urlaub_hawaii_2023_philipp");
    ///<summary>🌺 Urlaub Hawaii 🧳 Philipp</summary>
    public SensorEntity UrlaubHawaiiPhilipp => new(_haContext, "sensor.urlaub_hawaii_philipp");
    ///<summary>Urlaub Köln SYML ⛪️ Philipp</summary>
    public SensorEntity UrlaubKolnSymlPhilipp => new(_haContext, "sensor.urlaub_koln_syml_philipp");
    ///<summary>🇨🇺 Urlaub Kuba 🇨🇺 Philipp</summary>
    public SensorEntity UrlaubKubaPhilipp => new(_haContext, "sensor.urlaub_kuba_philipp");
    ///<summary>🇫🇷 Urlaub Paris 🇫🇷 Philipp</summary>
    public SensorEntity UrlaubParisPhilipp => new(_haContext, "sensor.urlaub_paris_philipp");
    ///<summary>🏴󠁧󠁢󠁳󠁣󠁴󠁿 Urlaub Schottland 🏴󠁧󠁢󠁳󠁣󠁴󠁿 Philipp</summary>
    public SensorEntity UrlaubSchottlandPhilipp => new(_haContext, "sensor.urlaub_schottland_philipp");
    ///<summary>Urlaubsziele 2023 Philipp</summary>
    public SensorEntity Urlaubsziele2023Philipp => new(_haContext, "sensor.urlaubsziele_2023_philipp");
    ///<summary>Home Assistant Vacuums</summary>
    public SensorEntity Vacuums => new(_haContext, "sensor.vacuums");
    ///<summary>Home Assistant Water heaters</summary>
    public SensorEntity WaterHeaters => new(_haContext, "sensor.water_heaters");
    ///<summary>Daily water intake for fabienne</summary>
    public SensorEntity WaterIntakeFabienne => new(_haContext, "sensor.water_intake_fabienne");
    ///<summary>Daily water intake target for fabienne</summary>
    public SensorEntity WaterIntakeFabienneTarget => new(_haContext, "sensor.water_intake_fabienne_target");
    ///<summary>Daily water intake for philipp</summary>
    public SensorEntity WaterIntakePhilipp => new(_haContext, "sensor.water_intake_philipp");
    ///<summary>Daily water intake target for philipp</summary>
    public SensorEntity WaterIntakePhilippTarget => new(_haContext, "sensor.water_intake_philipp_target");
    ///<summary>Home Assistant Weather</summary>
    public SensorEntity Weather => new(_haContext, "sensor.weather");
    ///<summary>Geschenke sortiert Philipp</summary>
    public SensorEntity WeihnachtsgeschenkePhilipp => new(_haContext, "sensor.weihnachtsgeschenke_philipp");
    ///<summary>Weihnachtswünsche Philipp</summary>
    public SensorEntity WeihnachtswunschePhilipp => new(_haContext, "sensor.weihnachtswunsche_philipp");
    ///<summary>Zigbee2MQTT Bridge Version</summary>
    public SensorEntity Zigbee2mqttBridgeVersion => new(_haContext, "sensor.zigbee2mqtt_bridge_version");
    ///<summary>Home Assistant Zones</summary>
    public SensorEntity Zones => new(_haContext, "sensor.zones");
    ///<summary>🌍 Zoo Philipp</summary>
    public SensorEntity ZooPhilipp => new(_haContext, "sensor.zoo_philipp");
    ///<summary>living_room/lamp_switch Battery</summary>
    public NumericSensorEntity _0x90ab96fffe180250Battery => new(_haContext, "sensor.0x90ab96fffe180250_battery");
    ///<summary>Repairs Active</summary>
    public NumericSensorEntity ActiveIssues => new(_haContext, "sensor.active_issues");
    ///<summary>AMC Entertainment Holdings Inc</summary>
    public NumericSensorEntity AmcEntertainmentHoldingsInc => new(_haContext, "sensor.amc_entertainment_holdings_inc");
    ///<summary>bathroom/razor_blade_usage Battery</summary>
    public NumericSensorEntity BathroomRazorBladeUsageBattery => new(_haContext, "sensor.bathroom_razor_blade_usage_battery");
    ///<summary>bathroom/razor_blade_usage Temperature</summary>
    public NumericSensorEntity BathroomRazorBladeUsageDeviceTemperature => new(_haContext, "sensor.bathroom_razor_blade_usage_device_temperature");
    ///<summary>bathroom/washing_machine_water_leak_sensor Battery</summary>
    public NumericSensorEntity BathroomWashingMachineWaterLeakSensorBattery => new(_haContext, "sensor.bathroom_washing_machine_water_leak_sensor_battery");
    ///<summary>bathroom/washing_machine_water_leak_sensor Temperature</summary>
    public NumericSensorEntity BathroomWashingMachineWaterLeakSensorDeviceTemperature => new(_haContext, "sensor.bathroom_washing_machine_water_leak_sensor_device_temperature");
    ///<summary>bedroom/bedside_light_switch_fabienne Battery</summary>
    public NumericSensorEntity BedroomBedsideLightSwitchFabienneBattery => new(_haContext, "sensor.bedroom_bedside_light_switch_fabienne_battery");
    ///<summary>bedroom/bedside_light_switch_fabienne Temperature</summary>
    public NumericSensorEntity BedroomBedsideLightSwitchFabienneDeviceTemperature => new(_haContext, "sensor.bedroom_bedside_light_switch_fabienne_device_temperature");
    ///<summary>bedroom/bedside_light_switch_philipp Battery</summary>
    public NumericSensorEntity BedroomBedsideLightSwitchPhilippBattery => new(_haContext, "sensor.bedroom_bedside_light_switch_philipp_battery");
    ///<summary>bedroom/bedside_light_switch_philipp Temperature</summary>
    public NumericSensorEntity BedroomBedsideLightSwitchPhilippDeviceTemperature => new(_haContext, "sensor.bedroom_bedside_light_switch_philipp_device_temperature");
    ///<summary>bedroom/laundry_day_button Battery</summary>
    public NumericSensorEntity BedroomLaundryDayButtonBattery => new(_haContext, "sensor.bedroom_laundry_day_button_battery");
    ///<summary>bedroom/lava_lamp Energy</summary>
    public NumericSensorEntity BedroomLavaLampEnergy => new(_haContext, "sensor.bedroom_lava_lamp_energy");
    ///<summary>bedroom/lava_lamp Power</summary>
    public NumericSensorEntity BedroomLavaLampPower => new(_haContext, "sensor.bedroom_lava_lamp_power");
    ///<summary>bedroom/motion_detector_temperature</summary>
    public NumericSensorEntity BedroomMotionDetectorTemperature => new(_haContext, "sensor.bedroom_motion_detector_temperature");
    ///<summary>bedroom/roller_shutter_left Battery</summary>
    public NumericSensorEntity BedroomRollerShutterLeftBattery => new(_haContext, "sensor.bedroom_roller_shutter_left_battery");
    ///<summary>bedroom/roller_shutter_left Temperature</summary>
    public NumericSensorEntity BedroomRollerShutterLeftDeviceTemperature => new(_haContext, "sensor.bedroom_roller_shutter_left_device_temperature");
    ///<summary>bedroom/roller_shutter_right Battery</summary>
    public NumericSensorEntity BedroomRollerShutterRightBattery => new(_haContext, "sensor.bedroom_roller_shutter_right_battery");
    ///<summary>bedroom/roller_shutter_right Temperature</summary>
    public NumericSensorEntity BedroomRollerShutterRightDeviceTemperature => new(_haContext, "sensor.bedroom_roller_shutter_right_device_temperature");
    ///<summary>bedroom/weight_sensor_philipp Weight Sensor Philipp</summary>
    public NumericSensorEntity BedroomWeightSensorPhilippWeightSensorPhilipp => new(_haContext, "sensor.bedroom_weight_sensor_philipp_weight_sensor_philipp");
    ///<summary>BlackBerry Ltd</summary>
    public NumericSensorEntity BlackberryLtd => new(_haContext, "sensor.blackberry_ltd");
    ///<summary>Core DAX</summary>
    public NumericSensorEntity CoreDax => new(_haContext, "sensor.core_dax");
    ///<summary>Farn air humidity</summary>
    public NumericSensorEntity FarnAirHumidity => new(_haContext, "sensor.farn_air_humidity");
    ///<summary>Farn conductivity</summary>
    public NumericSensorEntity FarnConductivity => new(_haContext, "sensor.farn_conductivity");
    ///<summary>Farn dli</summary>
    public NumericSensorEntity FarnDli => new(_haContext, "sensor.farn_dli");
    ///<summary>Farn illuminance</summary>
    public NumericSensorEntity FarnIlluminance => new(_haContext, "sensor.farn_illuminance");
    ///<summary>Farn ppfd (mol)</summary>
    public NumericSensorEntity FarnPpfdMol => new(_haContext, "sensor.farn_ppfd_mol");
    ///<summary>Farn soil moisture</summary>
    public NumericSensorEntity FarnSoilMoisture => new(_haContext, "sensor.farn_soil_moisture");
    ///<summary>Farn temperature</summary>
    public NumericSensorEntity FarnTemperature => new(_haContext, "sensor.farn_temperature");
    ///<summary>Farn Total ppfd (mol) Integral</summary>
    public NumericSensorEntity FarnTotalPpfdMolIntegral => new(_haContext, "sensor.farn_total_ppfd_mol_integral");
    ///<summary>Fensterblatt air humidity</summary>
    public NumericSensorEntity FensterblattAirHumidity => new(_haContext, "sensor.fensterblatt_air_humidity");
    ///<summary>Fensterblatt conductivity</summary>
    public NumericSensorEntity FensterblattConductivity => new(_haContext, "sensor.fensterblatt_conductivity");
    ///<summary>Fensterblatt dli</summary>
    public NumericSensorEntity FensterblattDli => new(_haContext, "sensor.fensterblatt_dli");
    ///<summary>Fensterblatt illuminance</summary>
    public NumericSensorEntity FensterblattIlluminance => new(_haContext, "sensor.fensterblatt_illuminance");
    ///<summary>Fensterblatt ppfd (mol)</summary>
    public NumericSensorEntity FensterblattPpfdMol => new(_haContext, "sensor.fensterblatt_ppfd_mol");
    ///<summary>Fensterblatt soil moisture</summary>
    public NumericSensorEntity FensterblattSoilMoisture => new(_haContext, "sensor.fensterblatt_soil_moisture");
    ///<summary>Fensterblatt temperature</summary>
    public NumericSensorEntity FensterblattTemperature => new(_haContext, "sensor.fensterblatt_temperature");
    ///<summary>Fensterblatt Total ppfd (mol) Integral</summary>
    public NumericSensorEntity FensterblattTotalPpfdMolIntegral => new(_haContext, "sensor.fensterblatt_total_ppfd_mol_integral");
    ///<summary>GameStop Corp</summary>
    public NumericSensorEntity GamestopCorp => new(_haContext, "sensor.gamestop_corp");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>hallway Cluster Size</summary>
    public NumericSensorEntity HallwayClusterSize => new(_haContext, "sensor.hallway_cluster_size");
    ///<summary>Repairs Ignored</summary>
    public NumericSensorEntity IgnoredIssues => new(_haContext, "sensor.ignored_issues");
    ///<summary>iPhone Fabienne Average Active Pace</summary>
    public NumericSensorEntity IphoneFabienneAverageActivePace => new(_haContext, "sensor.iphone_fabienne_average_active_pace");
    ///<summary>iPhone Fabienne Battery Level</summary>
    public NumericSensorEntity IphoneFabienneBatteryLevel => new(_haContext, "sensor.iphone_fabienne_battery_level");
    ///<summary>iPhone Fabienne Distance</summary>
    public NumericSensorEntity IphoneFabienneDistance => new(_haContext, "sensor.iphone_fabienne_distance");
    ///<summary>iPhone Fabienne Floors Ascended</summary>
    public NumericSensorEntity IphoneFabienneFloorsAscended => new(_haContext, "sensor.iphone_fabienne_floors_ascended");
    ///<summary>iPhone Fabienne Floors Descended</summary>
    public NumericSensorEntity IphoneFabienneFloorsDescended => new(_haContext, "sensor.iphone_fabienne_floors_descended");
    ///<summary>iPhone Fabienne Steps</summary>
    public NumericSensorEntity IphoneFabienneSteps => new(_haContext, "sensor.iphone_fabienne_steps");
    ///<summary>iPhone Fabienne Storage</summary>
    public NumericSensorEntity IphoneFabienneStorage => new(_haContext, "sensor.iphone_fabienne_storage");
    ///<summary>iPhone Philipp Average Active Pace</summary>
    public NumericSensorEntity IphonePhilippAverageActivePace => new(_haContext, "sensor.iphone_philipp_average_active_pace");
    ///<summary>iPhone-Philipp Battery</summary>
    public NumericSensorEntity IphonePhilippBattery => new(_haContext, "sensor.iphone_philipp_battery");
    ///<summary>iPhone Philipp Battery Level</summary>
    public NumericSensorEntity IphonePhilippBatteryLevel => new(_haContext, "sensor.iphone_philipp_battery_level");
    ///<summary>iPhone-Philipp Calc Dist</summary>
    public NumericSensorEntity IphonePhilippCalcDistance => new(_haContext, "sensor.iphone_philipp_calc_distance");
    ///<summary>iPhone Philipp Distance</summary>
    public NumericSensorEntity IphonePhilippDistance => new(_haContext, "sensor.iphone_philipp_distance");
    ///<summary>iPhone Philipp Floors Ascended</summary>
    public NumericSensorEntity IphonePhilippFloorsAscended => new(_haContext, "sensor.iphone_philipp_floors_ascended");
    ///<summary>iPhone Philipp Floors Descended</summary>
    public NumericSensorEntity IphonePhilippFloorsDescended => new(_haContext, "sensor.iphone_philipp_floors_descended");
    ///<summary>iPhone Philipp Steps</summary>
    public NumericSensorEntity IphonePhilippSteps => new(_haContext, "sensor.iphone_philipp_steps");
    ///<summary>iPhone Philipp Storage</summary>
    public NumericSensorEntity IphonePhilippStorage => new(_haContext, "sensor.iphone_philipp_storage");
    ///<summary>iPhone-Philipp Travel Dist</summary>
    public NumericSensorEntity IphonePhilippTravelDistance => new(_haContext, "sensor.iphone_philipp_travel_distance");
    ///<summary>iPhone-Philipp Travel Time</summary>
    public NumericSensorEntity IphonePhilippTravelTime => new(_haContext, "sensor.iphone_philipp_travel_time");
    ///<summary>iPhone-Philipp Travel Time</summary>
    public NumericSensorEntity IphonePhilippTravelTimeMin => new(_haContext, "sensor.iphone_philipp_travel_time_min");
    ///<summary>iPhone-Philipp Waze Dist</summary>
    public NumericSensorEntity IphonePhilippWazeDistance => new(_haContext, "sensor.iphone_philipp_waze_distance");
    ///<summary>iPhone-Philipp Zone Distance</summary>
    public NumericSensorEntity IphonePhilippZoneDistance => new(_haContext, "sensor.iphone_philipp_zone_distance");
    ///<summary>Repairs Total</summary>
    public NumericSensorEntity Issues => new(_haContext, "sensor.issues");
    ///<summary>kitchen/balcony/light _sensor Battery</summary>
    public NumericSensorEntity KitchenBalconyLightSensorBattery => new(_haContext, "sensor.kitchen_balcony_light_sensor_battery");
    ///<summary>kitchen/balcony/light _sensor Illuminance</summary>
    public NumericSensorEntity KitchenBalconyLightSensorIlluminanceLux => new(_haContext, "sensor.kitchen_balcony_light_sensor_illuminance_lux");
    ///<summary>kitchen/cabinet_light_button Battery</summary>
    public NumericSensorEntity KitchenCabinetLightButtonBattery => new(_haContext, "sensor.kitchen_cabinet_light_button_battery");
    ///<summary>kitchen/cabinet_light_button Temperature</summary>
    public NumericSensorEntity KitchenCabinetLightButtonDeviceTemperature => new(_haContext, "sensor.kitchen_cabinet_light_button_device_temperature");
    ///<summary>kitchen/ceiling_light_button Battery</summary>
    public NumericSensorEntity KitchenCeilingLightButtonBattery => new(_haContext, "sensor.kitchen_ceiling_light_button_battery");
    ///<summary>kitchen/ceiling_light_button Temperature</summary>
    public NumericSensorEntity KitchenCeilingLightButtonDeviceTemperature => new(_haContext, "sensor.kitchen_ceiling_light_button_device_temperature");
    ///<summary>kitchen/dishwasher_water_leak_sensor Battery</summary>
    public NumericSensorEntity KitchenDishwasherWaterLeakSensorBattery => new(_haContext, "sensor.kitchen_dishwasher_water_leak_sensor_battery");
    ///<summary>kitchen/kratom_counter Battery</summary>
    public NumericSensorEntity KitchenKratomCounterBattery => new(_haContext, "sensor.kitchen_kratom_counter_battery");
    ///<summary>kitchen/kratom_counter Temperature</summary>
    public NumericSensorEntity KitchenKratomCounterDeviceTemperature => new(_haContext, "sensor.kitchen_kratom_counter_device_temperature");
    ///<summary>kitchen/motion_detector Battery</summary>
    public NumericSensorEntity KitchenMotionDetectorBattery => new(_haContext, "sensor.kitchen_motion_detector_battery");
    ///<summary>kitchen/motion_detector Temperature</summary>
    public NumericSensorEntity KitchenMotionDetectorDeviceTemperature => new(_haContext, "sensor.kitchen_motion_detector_device_temperature");
    ///<summary>kitchen/motion_detector Illuminance</summary>
    public NumericSensorEntity KitchenMotionDetectorIlluminanceLux => new(_haContext, "sensor.kitchen_motion_detector_illuminance_lux");
    ///<summary>kitchen/motion_detector_temperature</summary>
    public NumericSensorEntity KitchenMotionDetectorTemperature => new(_haContext, "sensor.kitchen_motion_detector_temperature");
    ///<summary>kitchen/pineapple_string_lights WiFi Status</summary>
    public NumericSensorEntity KitchenPineappleStringLightsWifiStatus => new(_haContext, "sensor.kitchen_pineapple_string_lights_wifi_status");
    ///<summary>living_room/balcony/air_quality Battery</summary>
    public NumericSensorEntity LivingRoomBalconyAirQualityBattery => new(_haContext, "sensor.living_room_balcony_air_quality_battery");
    ///<summary>living_room/balcony/air_quality Humidity</summary>
    public NumericSensorEntity LivingRoomBalconyAirQualityHumidity => new(_haContext, "sensor.living_room_balcony_air_quality_humidity");
    ///<summary>living_room/balcony/air_quality Temperature</summary>
    public NumericSensorEntity LivingRoomBalconyAirQualityTemperature => new(_haContext, "sensor.living_room_balcony_air_quality_temperature");
    ///<summary>living_room/balcony/air_quality VOCs</summary>
    public NumericSensorEntity LivingRoomBalconyAirQualityVocs => new(_haContext, "sensor.living_room_balcony_air_quality_vocs");
    ///<summary>living_room/balcony/light _sensor Battery</summary>
    public NumericSensorEntity LivingRoomBalconyLightSensorBattery => new(_haContext, "sensor.living_room_balcony_light_sensor_battery");
    ///<summary>living_room/balcony/light _sensor Illuminance</summary>
    public NumericSensorEntity LivingRoomBalconyLightSensorIlluminanceLux => new(_haContext, "sensor.living_room_balcony_light_sensor_illuminance_lux");
    ///<summary>living_room/balcony/motion_detector Battery</summary>
    public NumericSensorEntity LivingRoomBalconyMotionDetectorBattery => new(_haContext, "sensor.living_room_balcony_motion_detector_battery");
    ///<summary>living_room/balcony/motion_detector Temperature</summary>
    public NumericSensorEntity LivingRoomBalconyMotionDetectorDeviceTemperature => new(_haContext, "sensor.living_room_balcony_motion_detector_device_temperature");
    ///<summary>living_room/balcony/motion_detector Illuminance</summary>
    public NumericSensorEntity LivingRoomBalconyMotionDetectorIlluminanceLux => new(_haContext, "sensor.living_room_balcony_motion_detector_illuminance_lux");
    ///<summary>living_room/cat_fountain Energy</summary>
    public NumericSensorEntity LivingRoomCatFountainEnergy => new(_haContext, "sensor.living_room_cat_fountain_energy");
    ///<summary>living_room/cat_fountain Power</summary>
    public NumericSensorEntity LivingRoomCatFountainPower => new(_haContext, "sensor.living_room_cat_fountain_power");
    ///<summary>living_room/lightbulbs Energy</summary>
    public NumericSensorEntity LivingRoomLightbulbsEnergy => new(_haContext, "sensor.living_room_lightbulbs_energy");
    ///<summary>living_room/lightbulbs Power</summary>
    public NumericSensorEntity LivingRoomLightbulbsPower => new(_haContext, "sensor.living_room_lightbulbs_power");
    ///<summary>living_room/record_player Energy</summary>
    public NumericSensorEntity LivingRoomRecordPlayerEnergy => new(_haContext, "sensor.living_room_record_player_energy");
    ///<summary>living_room/record_player Power</summary>
    public NumericSensorEntity LivingRoomRecordPlayerPower => new(_haContext, "sensor.living_room_record_player_power");
    ///<summary>living_room/subwoofer Energy</summary>
    public NumericSensorEntity LivingRoomSubwooferEnergy => new(_haContext, "sensor.living_room_subwoofer_energy");
    ///<summary>living_room/subwoofer Power</summary>
    public NumericSensorEntity LivingRoomSubwooferPower => new(_haContext, "sensor.living_room_subwoofer_power");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 1 Battery Level</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy011BatteryLevel => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_1_battery_level");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 1 Illuminance</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy011Illuminance => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_1_illuminance");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 1 Moisture</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy011Moisture => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_1_moisture");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 1 Soil Conductivity</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy011SoilConductivity => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_1_soil_conductivity");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 1 Temperature</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy011Temperature => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_1_temperature");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 2 Battery Level</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy012BatteryLevel => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_2_battery_level");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 2 Illuminance</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy012Illuminance => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_2_illuminance");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 2 Moisture</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy012Moisture => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_2_moisture");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 2 Soil Conductivity</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy012SoilConductivity => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_2_soil_conductivity");
    ///<summary>living_room/bluetooth_proxy Xiaomi HHCCJCY01 2 Temperature</summary>
    public NumericSensorEntity LivingRoombluetoothProxyXiaomiHhccjcy012Temperature => new(_haContext, "sensor.living_roombluetooth_proxy_xiaomi_hhccjcy01_2_temperature");
    ///<summary>living_room/pineapple_neon_light WiFi Status</summary>
    public NumericSensorEntity LivingRoompineappleNeonLightWifiStatus => new(_haContext, "sensor.living_roompineapple_neon_light_wifi_status");
    ///<summary>Lufthansa</summary>
    public NumericSensorEntity Lufthansa => new(_haContext, "sensor.lufthansa");
    ///<summary>METRO AG</summary>
    public NumericSensorEntity MetroAg => new(_haContext, "sensor.metro_ag");
    ///<summary>MB/SW-act_bpm</summary>
    public NumericSensorEntity MiBandSmartWatch043001MbSwActBpm => new(_haContext, "sensor.mi_band_smart_watch_043001_mb_sw_act_bpm");
    ///<summary>MiFlora-12AEFA HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity Miflora12aefaHhccjcy01hhccFer => new(_haContext, "sensor.miflora_12aefa_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-12AEFA HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity Miflora12aefaHhccjcy01hhccLux => new(_haContext, "sensor.miflora_12aefa_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-12AEFA HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity Miflora12aefaHhccjcy01hhccMoi => new(_haContext, "sensor.miflora_12aefa_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-12AEFA HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity Miflora12aefaHhccjcy01hhccTempc => new(_haContext, "sensor.miflora_12aefa_hhccjcy01hhcc_tempc");
    ///<summary>MiFlora-12AFC7 HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity Miflora12afc7Hhccjcy01hhccFer => new(_haContext, "sensor.miflora_12afc7_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-12AFC7 HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity Miflora12afc7Hhccjcy01hhccLux => new(_haContext, "sensor.miflora_12afc7_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-12AFC7 HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity Miflora12afc7Hhccjcy01hhccMoi => new(_haContext, "sensor.miflora_12afc7_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-12AFC7 HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity Miflora12afc7Hhccjcy01hhccTempc => new(_haContext, "sensor.miflora_12afc7_hhccjcy01hhcc_tempc");
    ///<summary>MiFlora-12AFE4 HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity Miflora12afe4Hhccjcy01hhccFer => new(_haContext, "sensor.miflora_12afe4_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-12AFE4 HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity Miflora12afe4Hhccjcy01hhccLux => new(_haContext, "sensor.miflora_12afe4_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-12AFE4 HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity Miflora12afe4Hhccjcy01hhccMoi => new(_haContext, "sensor.miflora_12afe4_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-12AFE4 HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity Miflora12afe4Hhccjcy01hhccTempc => new(_haContext, "sensor.miflora_12afe4_hhccjcy01hhcc_tempc");
    ///<summary>MiFlora-12AFF3 HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity Miflora12aff3Hhccjcy01hhccFer => new(_haContext, "sensor.miflora_12aff3_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-12AFF3 HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity Miflora12aff3Hhccjcy01hhccLux => new(_haContext, "sensor.miflora_12aff3_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-12AFF3 HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity Miflora12aff3Hhccjcy01hhccMoi => new(_haContext, "sensor.miflora_12aff3_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-12AFF3 HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity Miflora12aff3Hhccjcy01hhccTempc => new(_haContext, "sensor.miflora_12aff3_hhccjcy01hhcc_tempc");
    ///<summary>MiFlora-B10204 HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity MifloraB10204Hhccjcy01hhccFer => new(_haContext, "sensor.miflora_b10204_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-B10204 HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity MifloraB10204Hhccjcy01hhccLux => new(_haContext, "sensor.miflora_b10204_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-B10204 HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity MifloraB10204Hhccjcy01hhccMoi => new(_haContext, "sensor.miflora_b10204_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-B10204 HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity MifloraB10204Hhccjcy01hhccTempc => new(_haContext, "sensor.miflora_b10204_hhccjcy01hhcc_tempc");
    ///<summary>MiFlora-B10206 HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity MifloraB10206Hhccjcy01hhccFer => new(_haContext, "sensor.miflora_b10206_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-B10206 HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity MifloraB10206Hhccjcy01hhccLux => new(_haContext, "sensor.miflora_b10206_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-B10206 HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity MifloraB10206Hhccjcy01hhccMoi => new(_haContext, "sensor.miflora_b10206_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-B10206 HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity MifloraB10206Hhccjcy01hhccTempc => new(_haContext, "sensor.miflora_b10206_hhccjcy01hhcc_tempc");
    ///<summary>MiFlora-B10208 HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity MifloraB10208Hhccjcy01hhccFer => new(_haContext, "sensor.miflora_b10208_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-B10208 HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity MifloraB10208Hhccjcy01hhccLux => new(_haContext, "sensor.miflora_b10208_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-B10208 HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity MifloraB10208Hhccjcy01hhccMoi => new(_haContext, "sensor.miflora_b10208_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-B10208 HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity MifloraB10208Hhccjcy01hhccTempc => new(_haContext, "sensor.miflora_b10208_hhccjcy01hhcc_tempc");
    ///<summary>MiFlora-B102E6 HHCCJCY01HHCC-fer</summary>
    public NumericSensorEntity MifloraB102e6Hhccjcy01hhccFer => new(_haContext, "sensor.miflora_b102e6_hhccjcy01hhcc_fer");
    ///<summary>MiFlora-B102E6 HHCCJCY01HHCC-lux</summary>
    public NumericSensorEntity MifloraB102e6Hhccjcy01hhccLux => new(_haContext, "sensor.miflora_b102e6_hhccjcy01hhcc_lux");
    ///<summary>MiFlora-B102E6 HHCCJCY01HHCC-moi</summary>
    public NumericSensorEntity MifloraB102e6Hhccjcy01hhccMoi => new(_haContext, "sensor.miflora_b102e6_hhccjcy01hhcc_moi");
    ///<summary>MiFlora-B102E6 HHCCJCY01HHCC-tempc</summary>
    public NumericSensorEntity MifloraB102e6Hhccjcy01hhccTempc => new(_haContext, "sensor.miflora_b102e6_hhccjcy01hhcc_tempc");
    ///<summary>Nuki battery level</summary>
    public NumericSensorEntity NukiBatteryLevel => new(_haContext, "sensor.nuki_battery_level");
    ///<summary>Nuki battery voltage</summary>
    public NumericSensorEntity NukiBatteryVoltage => new(_haContext, "sensor.nuki_battery_voltage");
    ///<summary>Nuki bluetooth signal strength</summary>
    public NumericSensorEntity NukiBluetoothSignalStrength => new(_haContext, "sensor.nuki_bluetooth_signal_strength");
    ///<summary>Nuki Haustür RSSI</summary>
    public NumericSensorEntity NukiHausturRssi => new(_haContext, "sensor.nuki_haustur_rssi");
    ///<summary>Nuki wifi signal strength</summary>
    public NumericSensorEntity NukiWifiSignalStrength => new(_haContext, "sensor.nuki_wifi_signal_strength");
    ///<summary>Nuki Wohnungstür Battery</summary>
    public NumericSensorEntity NukiWohnungsturBattery => new(_haContext, "sensor.nuki_wohnungstur_battery");
    ///<summary>Nuki Wohnungstür RSSI</summary>
    public NumericSensorEntity NukiWohnungsturRssi => new(_haContext, "sensor.nuki_wohnungstur_rssi");
    ///<summary>Presence-Sensor-FP2-703F Light Sensor Light Level</summary>
    public NumericSensorEntity PresenceBedroomIlluminanceLux => new(_haContext, "sensor.presence_bedroom_illuminance_lux");
    ///<summary>PupsStation (Volume 1) Average disk temp</summary>
    public NumericSensorEntity PupsstationAverageDiskTemp => new(_haContext, "sensor.pupsstation_average_disk_temp");
    ///<summary>PupsStation CPU load average (15 min)</summary>
    public NumericSensorEntity PupsstationCpuLoadAverage15Min => new(_haContext, "sensor.pupsstation_cpu_load_average_15_min");
    ///<summary>PupsStation CPU load average (5 min)</summary>
    public NumericSensorEntity PupsstationCpuLoadAverage5Min => new(_haContext, "sensor.pupsstation_cpu_load_average_5_min");
    ///<summary>PupsStation CPU utilization (total)</summary>
    public NumericSensorEntity PupsstationCpuUtilizationTotal => new(_haContext, "sensor.pupsstation_cpu_utilization_total");
    ///<summary>PupsStation CPU utilization (user)</summary>
    public NumericSensorEntity PupsstationCpuUtilizationUser => new(_haContext, "sensor.pupsstation_cpu_utilization_user");
    ///<summary>PupsStation Download throughput</summary>
    public NumericSensorEntity PupsstationDownloadThroughput => new(_haContext, "sensor.pupsstation_download_throughput");
    ///<summary>PupsStation Memory available (real)</summary>
    public NumericSensorEntity PupsstationMemoryAvailableReal => new(_haContext, "sensor.pupsstation_memory_available_real");
    ///<summary>PupsStation Memory available (swap)</summary>
    public NumericSensorEntity PupsstationMemoryAvailableSwap => new(_haContext, "sensor.pupsstation_memory_available_swap");
    ///<summary>PupsStation Memory total (real)</summary>
    public NumericSensorEntity PupsstationMemoryTotalReal => new(_haContext, "sensor.pupsstation_memory_total_real");
    ///<summary>PupsStation Memory total (swap)</summary>
    public NumericSensorEntity PupsstationMemoryTotalSwap => new(_haContext, "sensor.pupsstation_memory_total_swap");
    ///<summary>PupsStation Memory usage (real)</summary>
    public NumericSensorEntity PupsstationMemoryUsageReal => new(_haContext, "sensor.pupsstation_memory_usage_real");
    ///<summary>PupsStation (Drive 1) Temperature</summary>
    public NumericSensorEntity PupsstationTemperature => new(_haContext, "sensor.pupsstation_temperature");
    ///<summary>PupsStation (Drive 2) Temperature</summary>
    public NumericSensorEntity PupsstationTemperature2 => new(_haContext, "sensor.pupsstation_temperature_2");
    ///<summary>PupsStation (Drive 3) Temperature</summary>
    public NumericSensorEntity PupsstationTemperature3 => new(_haContext, "sensor.pupsstation_temperature_3");
    ///<summary>PupsStation Temperature</summary>
    public NumericSensorEntity PupsstationTemperature4 => new(_haContext, "sensor.pupsstation_temperature_4");
    ///<summary>PupsStation Upload throughput</summary>
    public NumericSensorEntity PupsstationUploadThroughput => new(_haContext, "sensor.pupsstation_upload_throughput");
    ///<summary>PupsStation (Volume 1) Used space</summary>
    public NumericSensorEntity PupsstationUsedSpace => new(_haContext, "sensor.pupsstation_used_space");
    ///<summary>PupsStation (Volume 1) Volume used</summary>
    public NumericSensorEntity PupsstationVolumeUsed => new(_haContext, "sensor.pupsstation_volume_used");
    ///<summary>Raumthermostat Schlafzimmer Humidity</summary>
    public NumericSensorEntity RaumthermostatSchlafzimmerHumidity => new(_haContext, "sensor.raumthermostat_schlafzimmer_humidity");
    ///<summary>Raumthermostat Schlafzimmer Temperature</summary>
    public NumericSensorEntity RaumthermostatSchlafzimmerTemperature => new(_haContext, "sensor.raumthermostat_schlafzimmer_temperature");
    ///<summary>Roborock S7 Pro Ultra Battery</summary>
    public NumericSensorEntity RoborockS7ProUltraBattery => new(_haContext, "sensor.roborock_s7_pro_ultra_battery");
    ///<summary>Roborock S7 Pro Ultra Cleaning area</summary>
    public NumericSensorEntity RoborockS7ProUltraCleaningArea => new(_haContext, "sensor.roborock_s7_pro_ultra_cleaning_area");
    ///<summary>Roborock S7 Pro Ultra Cleaning time</summary>
    public NumericSensorEntity RoborockS7ProUltraCleaningTime => new(_haContext, "sensor.roborock_s7_pro_ultra_cleaning_time");
    ///<summary>Roborock S7 Pro Ultra Filter time left</summary>
    public NumericSensorEntity RoborockS7ProUltraFilterTimeLeft => new(_haContext, "sensor.roborock_s7_pro_ultra_filter_time_left");
    ///<summary>Roborock S7 Pro Ultra Main brush time left</summary>
    public NumericSensorEntity RoborockS7ProUltraMainBrushTimeLeft => new(_haContext, "sensor.roborock_s7_pro_ultra_main_brush_time_left");
    ///<summary>Roborock S7 Pro Ultra Sensor time left</summary>
    public NumericSensorEntity RoborockS7ProUltraSensorTimeLeft => new(_haContext, "sensor.roborock_s7_pro_ultra_sensor_time_left");
    ///<summary>Roborock S7 Pro Ultra Side brush time left</summary>
    public NumericSensorEntity RoborockS7ProUltraSideBrushTimeLeft => new(_haContext, "sensor.roborock_s7_pro_ultra_side_brush_time_left");
    ///<summary>Roborock S7 Pro Ultra Total cleaning area</summary>
    public NumericSensorEntity RoborockS7ProUltraTotalCleaningArea => new(_haContext, "sensor.roborock_s7_pro_ultra_total_cleaning_area");
    ///<summary>Roborock S7 Pro Ultra Total cleaning time</summary>
    public NumericSensorEntity RoborockS7ProUltraTotalCleaningTime => new(_haContext, "sensor.roborock_s7_pro_ultra_total_cleaning_time");
    ///<summary>Seventeentrack Packages Delivered</summary>
    public NumericSensorEntity SeventeentrackPackagesDelivered => new(_haContext, "sensor.seventeentrack_packages_delivered");
    ///<summary>Seventeentrack Packages Expired</summary>
    public NumericSensorEntity SeventeentrackPackagesExpired => new(_haContext, "sensor.seventeentrack_packages_expired");
    ///<summary>Seventeentrack Packages In Transit</summary>
    public NumericSensorEntity SeventeentrackPackagesInTransit => new(_haContext, "sensor.seventeentrack_packages_in_transit");
    ///<summary>Seventeentrack Packages Not Found</summary>
    public NumericSensorEntity SeventeentrackPackagesNotFound => new(_haContext, "sensor.seventeentrack_packages_not_found");
    ///<summary>Seventeentrack Packages Ready to be Picked Up</summary>
    public NumericSensorEntity SeventeentrackPackagesReadyToBePickedUp => new(_haContext, "sensor.seventeentrack_packages_ready_to_be_picked_up");
    ///<summary>Seventeentrack Packages Returned</summary>
    public NumericSensorEntity SeventeentrackPackagesReturned => new(_haContext, "sensor.seventeentrack_packages_returned");
    ///<summary>Seventeentrack Packages Undelivered</summary>
    public NumericSensorEntity SeventeentrackPackagesUndelivered => new(_haContext, "sensor.seventeentrack_packages_undelivered");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>BlackBerry Ltd. Profit</summary>
    public NumericSensorEntity StockBlackberryLtdProfit => new(_haContext, "sensor.stock_blackberry_ltd_profit");
    ///<summary>BlackBerry Ltd. Price</summary>
    public NumericSensorEntity StockBlackberryLtdShareprice => new(_haContext, "sensor.stock_blackberry_ltd_shareprice");
    ///<summary>BlackBerry Ltd. Total</summary>
    public NumericSensorEntity StockBlackberryLtdTotalvalue => new(_haContext, "sensor.stock_blackberry_ltd_totalvalue");
    ///<summary>Core DAX Profit</summary>
    public NumericSensorEntity StockCoreDaxProfit => new(_haContext, "sensor.stock_core_dax_profit");
    ///<summary>Core DAX Price</summary>
    public NumericSensorEntity StockCoreDaxShareprice => new(_haContext, "sensor.stock_core_dax_shareprice");
    ///<summary>Core DAX Total</summary>
    public NumericSensorEntity StockCoreDaxTotalvalue => new(_haContext, "sensor.stock_core_dax_totalvalue");
    ///<summary>GameStop Profit</summary>
    public NumericSensorEntity StockGamestopProfit => new(_haContext, "sensor.stock_gamestop_profit");
    ///<summary>GameStop Price</summary>
    public NumericSensorEntity StockGamestopShareprice => new(_haContext, "sensor.stock_gamestop_shareprice");
    ///<summary>GameStop Total</summary>
    public NumericSensorEntity StockGamestopTotalvalue => new(_haContext, "sensor.stock_gamestop_totalvalue");
    ///<summary>Lufthansa Profit</summary>
    public NumericSensorEntity StockLufthansaProfit => new(_haContext, "sensor.stock_lufthansa_profit");
    ///<summary>Lufthansa Price</summary>
    public NumericSensorEntity StockLufthansaShareprice => new(_haContext, "sensor.stock_lufthansa_shareprice");
    ///<summary>Lufthansa Total</summary>
    public NumericSensorEntity StockLufthansaTotalvalue => new(_haContext, "sensor.stock_lufthansa_totalvalue");
    ///<summary>Metro AG Profit</summary>
    public NumericSensorEntity StockMetroAgProfit => new(_haContext, "sensor.stock_metro_ag_profit");
    ///<summary>Metro AG Price</summary>
    public NumericSensorEntity StockMetroAgShareprice => new(_haContext, "sensor.stock_metro_ag_shareprice");
    ///<summary>Metro AG Total</summary>
    public NumericSensorEntity StockMetroAgTotalvalue => new(_haContext, "sensor.stock_metro_ag_totalvalue");
    ///<summary>study/air_quality_sensor Carbon dioxide</summary>
    public NumericSensorEntity StudyAirQualitySensorCarbonDioxide => new(_haContext, "sensor.study_air_quality_sensor_carbon_dioxide");
    ///<summary>study/air_quality_sensor Formaldehyd</summary>
    public NumericSensorEntity StudyAirQualitySensorFormaldehyd => new(_haContext, "sensor.study_air_quality_sensor_formaldehyd");
    ///<summary>study/air_quality_sensor Humidity</summary>
    public NumericSensorEntity StudyAirQualitySensorHumidity => new(_haContext, "sensor.study_air_quality_sensor_humidity");
    ///<summary>study/air_quality_sensor Temperature</summary>
    public NumericSensorEntity StudyAirQualitySensorTemperature => new(_haContext, "sensor.study_air_quality_sensor_temperature");
    ///<summary>study/air_quality_sensor VOC</summary>
    public NumericSensorEntity StudyAirQualitySensorVoc => new(_haContext, "sensor.study_air_quality_sensor_voc");
    ///<summary>study/desk_lamp_switch Battery</summary>
    public NumericSensorEntity StudyDeskLampSwitchBattery => new(_haContext, "sensor.study_desk_lamp_switch_battery");
    ///<summary>study/desk_lamp_switch Temperature</summary>
    public NumericSensorEntity StudyDeskLampSwitchDeviceTemperature => new(_haContext, "sensor.study_desk_lamp_switch_device_temperature");
    ///<summary>living_room/picture_lights WiFi Status</summary>
    public NumericSensorEntity StudyunusedUsbRelay1WifiStatus => new(_haContext, "sensor.studyunused_usb_relay_1_wifi_status");
    ///<summary>Thermostat Arbeitszimmer Temperature</summary>
    public NumericSensorEntity ThermostatArbeitszimmerTemperature => new(_haContext, "sensor.thermostat_arbeitszimmer_temperature");
    ///<summary>Thermostat Arbeitszimmer Valvetappet</summary>
    public NumericSensorEntity ThermostatArbeitszimmerValvetappet => new(_haContext, "sensor.thermostat_arbeitszimmer_valvetappet");
    ///<summary>Thermostat Badezimmer Temperature</summary>
    public NumericSensorEntity ThermostatBadezimmerTemperature => new(_haContext, "sensor.thermostat_badezimmer_temperature");
    ///<summary>Thermostat Badezimmer Valvetappet</summary>
    public NumericSensorEntity ThermostatBadezimmerValvetappet => new(_haContext, "sensor.thermostat_badezimmer_valvetappet");
    ///<summary>Thermostat Küche Temperature</summary>
    public NumericSensorEntity ThermostatKucheTemperature => new(_haContext, "sensor.thermostat_kuche_temperature");
    ///<summary>Thermostat Küche Valvetappet</summary>
    public NumericSensorEntity ThermostatKucheValvetappet => new(_haContext, "sensor.thermostat_kuche_valvetappet");
    ///<summary>Thermostat Schlafzimmer Temperature</summary>
    public NumericSensorEntity ThermostatSchlafzimmerTemperature => new(_haContext, "sensor.thermostat_schlafzimmer_temperature");
    ///<summary>Thermostat Schlafzimmer Valvetappet</summary>
    public NumericSensorEntity ThermostatSchlafzimmerValvetappet => new(_haContext, "sensor.thermostat_schlafzimmer_valvetappet");
    ///<summary>Thermostat Wohnzimmer Temperature</summary>
    public NumericSensorEntity ThermostatWohnzimmerTemperature => new(_haContext, "sensor.thermostat_wohnzimmer_temperature");
    ///<summary>Thermostat Wohnzimmer Valvetappet</summary>
    public NumericSensorEntity ThermostatWohnzimmerValvetappet => new(_haContext, "sensor.thermostat_wohnzimmer_valvetappet");
    ///<summary>Wallpanel Hallway Battery Level</summary>
    public NumericSensorEntity WallpanelHallwayBatteryLevel => new(_haContext, "sensor.wallpanel_hallway_battery_level");
    ///<summary>Wallpanel Hallway Light</summary>
    public NumericSensorEntity WallpanelHallwayLight => new(_haContext, "sensor.wallpanel_hallway_light");
    ///<summary>Zigbee2MQTT Bridge Permit join timeout</summary>
    public NumericSensorEntity Zigbee2mqttBridgePermitJoinTimeout => new(_haContext, "sensor.zigbee2mqtt_bridge_permit_join_timeout");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adaptive DRC</summary>
    public SwitchEntity AdaptiveDrc => new(_haContext, "switch.adaptive_drc");
    ///<summary>bathroom/diffuser Bathroom diffuser</summary>
    public SwitchEntity BathroomdiffuserBathroomDiffuser => new(_haContext, "switch.bathroomdiffuser_bathroom_diffuser");
    ///<summary>bedroom/lava_lamp</summary>
    public SwitchEntity BedroomLavaLamp => new(_haContext, "switch.bedroom_lava_lamp");
    ///<summary>Home Assistant Cloud Alexa</summary>
    public SwitchEntity CloudAlexa => new(_haContext, "switch.cloud_alexa");
    ///<summary>Home Assistant Cloud Alexa state reporting</summary>
    public SwitchEntity CloudAlexaReportState => new(_haContext, "switch.cloud_alexa_report_state");
    ///<summary>Home Assistant Cloud Google Assistant</summary>
    public SwitchEntity CloudGoogle => new(_haContext, "switch.cloud_google");
    ///<summary>Home Assistant Cloud Google Assistant state reporting</summary>
    public SwitchEntity CloudGoogleReportState => new(_haContext, "switch.cloud_google_report_state");
    ///<summary>Home Assistant Cloud Remote</summary>
    public SwitchEntity CloudRemote => new(_haContext, "switch.cloud_remote");
    ///<summary>WOL switch for Desktop Philipp</summary>
    public SwitchEntity ComputerWolDesktopPhilipp => new(_haContext, "switch.computer_wol_desktop_philipp");
    ///<summary>WOL switch for Desktop Philipp</summary>
    public SwitchEntity ComputerWolDesktopPhilipp2 => new(_haContext, "switch.computer_wol_desktop_philipp_2");
    ///<summary>Enhancer</summary>
    public SwitchEntity Enhancer => new(_haContext, "switch.enhancer");
    ///<summary>Extra Bass</summary>
    public SwitchEntity ExtraBass => new(_haContext, "switch.extra_bass");
    ///<summary>Fenster Schlafzimmer</summary>
    public SwitchEntity FensterSchlafzimmer => new(_haContext, "switch.fenster_schlafzimmer");
    ///<summary>kitchen/neon_clock</summary>
    public SwitchEntity KitchenNeonClock => new(_haContext, "switch.kitchen_neon_clock");
    ///<summary>kitchen/pineapple_string_lights USB Relay</summary>
    public SwitchEntity KitchenPineappleStringLightsUsbRelay => new(_haContext, "switch.kitchen_pineapple_string_lights_usb_relay");
    ///<summary>living_room/buddha_fountain</summary>
    public SwitchEntity LivingRoomBuddhaFountain => new(_haContext, "switch.living_room_buddha_fountain");
    ///<summary>living_room/cat_fountain</summary>
    public SwitchEntity LivingRoomCatFountain => new(_haContext, "switch.living_room_cat_fountain");
    ///<summary>living_room/contract_light</summary>
    public SwitchEntity LivingRoomContractLight => new(_haContext, "switch.living_room_contract_light");
    ///<summary>living_room/lightbar</summary>
    public SwitchEntity LivingRoomLightbar => new(_haContext, "switch.living_room_lightbar");
    ///<summary>living_room/lightbulbs</summary>
    public SwitchEntity LivingRoomLightbulbs => new(_haContext, "switch.living_room_lightbulbs");
    ///<summary>living_room/pineapple_neon_light USB Relay</summary>
    public SwitchEntity LivingRoomPineappleNeonLightUsbRelay => new(_haContext, "switch.living_room_pineapple_neon_light_usb_relay");
    ///<summary>living_room/record_player</summary>
    public SwitchEntity LivingRoomRecordPlayer => new(_haContext, "switch.living_room_record_player");
    ///<summary>living_room/subwoofer</summary>
    public SwitchEntity LivingRoomSubwoofer => new(_haContext, "switch.living_room_subwoofer");
    ///<summary>living_room/twtyh_diorama</summary>
    public SwitchEntity LivingRoomTwtyhDiorama => new(_haContext, "switch.living_room_twtyh_diorama");
    ///<summary>living_room/picture_lights USB Relay</summary>
    public SwitchEntity LivingRoompictureLightsUsbRelay => new(_haContext, "switch.living_roompicture_lights_usb_relay");
    ///<summary>Enable movie time light control.</summary>
    public SwitchEntity MovieTimeEnableLightControl => new(_haContext, "switch.movie_time_enable_light_control");
    ///<summary>netdaemon_caloriecounter</summary>
    public SwitchEntity NetdaemonCaloriecounter => new(_haContext, "switch.netdaemon_caloriecounter");
    ///<summary>netdaemon_castdashboard</summary>
    public SwitchEntity NetdaemonCastdashboard => new(_haContext, "switch.netdaemon_castdashboard");
    ///<summary>netdaemon_kitchenlight</summary>
    public SwitchEntity NetdaemonKitchenlight => new(_haContext, "switch.netdaemon_kitchenlight");
    ///<summary>netdaemon_kitchenscale</summary>
    public SwitchEntity NetdaemonKitchenscale => new(_haContext, "switch.netdaemon_kitchenscale");
    ///<summary>netdaemon_moonlightgamelauncher</summary>
    public SwitchEntity NetdaemonMoonlightgamelauncher => new(_haContext, "switch.netdaemon_moonlightgamelauncher");
    ///<summary>netdaemon_moonlightinputselectupdater</summary>
    public SwitchEntity NetdaemonMoonlightinputselectupdater => new(_haContext, "switch.netdaemon_moonlightinputselectupdater");
    ///<summary>netdaemon_trashreminder</summary>
    public SwitchEntity NetdaemonTrashreminder => new(_haContext, "switch.netdaemon_trashreminder");
    ///<summary>netdaemon_vacuumreminder</summary>
    public SwitchEntity NetdaemonVacuumreminder => new(_haContext, "switch.netdaemon_vacuumreminder");
    ///<summary>netdaemon_webhookserver</summary>
    public SwitchEntity NetdaemonWebhookserver => new(_haContext, "switch.netdaemon_webhookserver");
    ///<summary>Nuki Button enabled</summary>
    public SwitchEntity NukiButtonEnabled => new(_haContext, "switch.nuki_button_enabled");
    ///<summary>Nuki Haustür Continuous Mode</summary>
    public SwitchEntity NukiHausturContinuousMode => new(_haContext, "switch.nuki_haustur_continuous_mode");
    ///<summary>Nuki LED enabled</summary>
    public SwitchEntity NukiLedEnabled => new(_haContext, "switch.nuki_led_enabled");
    ///<summary>Pure Direct</summary>
    public SwitchEntity PureDirect => new(_haContext, "switch.pure_direct");
    ///<summary>Raumthermostat Schlafzimmer ChildLock</summary>
    public SwitchEntity RaumthermostatSchlafzimmerChildlock => new(_haContext, "switch.raumthermostat_schlafzimmer_childlock");
    ///<summary>Roborock S7 Pro Ultra Child lock</summary>
    public SwitchEntity RoborockS7ProUltraChildLock => new(_haContext, "switch.roborock_s7_pro_ultra_child_lock");
    ///<summary>Roborock S7 Pro Ultra Do not disturb</summary>
    public SwitchEntity RoborockS7ProUltraDoNotDisturb => new(_haContext, "switch.roborock_s7_pro_ultra_do_not_disturb");
    ///<summary>study/speakers_philipp</summary>
    public SwitchEntity StudySpeakersPhilipp => new(_haContext, "switch.study_speakers_philipp");
    ///<summary>Thermostat Arbeitszimmer ChildLock</summary>
    public SwitchEntity ThermostatArbeitszimmerChildlock => new(_haContext, "switch.thermostat_arbeitszimmer_childlock");
    ///<summary>Thermostat Badezimmer ChildLock</summary>
    public SwitchEntity ThermostatBadezimmerChildlock => new(_haContext, "switch.thermostat_badezimmer_childlock");
    ///<summary>Thermostat Küche ChildLock</summary>
    public SwitchEntity ThermostatKucheChildlock => new(_haContext, "switch.thermostat_kuche_childlock");
    ///<summary>Thermostat Schlafzimmer ChildLock</summary>
    public SwitchEntity ThermostatSchlafzimmerChildlock => new(_haContext, "switch.thermostat_schlafzimmer_childlock");
    ///<summary>Thermostat Wohnzimmer ChildLock</summary>
    public SwitchEntity ThermostatWohnzimmerChildlock => new(_haContext, "switch.thermostat_wohnzimmer_childlock");
    ///<summary>windows</summary>
    public SwitchEntity Windows => new(_haContext, "switch.windows");
    ///<summary>windowswol</summary>
    public SwitchEntity Windowswol => new(_haContext, "switch.windowswol");
    ///<summary>Zigbee2MQTT Bridge Permit join</summary>
    public SwitchEntity Zigbee2mqttBridgePermitJoin => new(_haContext, "switch.zigbee2mqtt_bridge_permit_join");
}

public partial class TimeEntities
{
    private readonly IHaContext _haContext;
    public TimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Roborock S7 Pro Ultra Do not disturb begin</summary>
    public TimeEntity RoborockS7ProUltraDoNotDisturbBegin => new(_haContext, "time.roborock_s7_pro_ultra_do_not_disturb_begin");
    ///<summary>Roborock S7 Pro Ultra Do not disturb end</summary>
    public TimeEntity RoborockS7ProUltraDoNotDisturbEnd => new(_haContext, "time.roborock_s7_pro_ultra_do_not_disturb_end");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public TimerEntity Meditation => new(_haContext, "timer.meditation");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>living_room/lamp_switch</summary>
    public UpdateEntity _0x90ab96fffe180250 => new(_haContext, "update.0x90ab96fffe180250");
    ///<summary>bedroom/laundry_day_button</summary>
    public UpdateEntity BedroomLaundryDayButtonFirmware => new(_haContext, "update.bedroom_laundry_day_button_firmware");
    ///<summary>bedroom/lava_lamp</summary>
    public UpdateEntity BedroomLavaLamp => new(_haContext, "update.bedroom_lava_lamp");
    ///<summary>bedroom/roller_shutter_left</summary>
    public UpdateEntity BedroomRollerShutterLeft => new(_haContext, "update.bedroom_roller_shutter_left");
    ///<summary>bedroom/roller_shutter_right</summary>
    public UpdateEntity BedroomRollerShutterRight => new(_haContext, "update.bedroom_roller_shutter_right");
    ///<summary>kitchen/balcony/light _sensor</summary>
    public UpdateEntity KitchenBalconyLightSensor => new(_haContext, "update.kitchen_balcony_light_sensor");
    ///<summary>kitchen/cabinet_light</summary>
    public UpdateEntity KitchenCabinetLight => new(_haContext, "update.kitchen_cabinet_light");
    ///<summary>kitchen/ceiling_light</summary>
    public UpdateEntity KitchenCeilingLight => new(_haContext, "update.kitchen_ceiling_light");
    ///<summary>living_room/balcony/air_quality</summary>
    public UpdateEntity LivingRoomBalconyAirQualityFirmware => new(_haContext, "update.living_room_balcony_air_quality_firmware");
    ///<summary>living_room/balcony/light _sensor</summary>
    public UpdateEntity LivingRoomBalconyLightSensor => new(_haContext, "update.living_room_balcony_light_sensor");
    ///<summary>living_room/cat_fountain</summary>
    public UpdateEntity LivingRoomCatFountain => new(_haContext, "update.living_room_cat_fountain");
    ///<summary>living_room/lightbulbs</summary>
    public UpdateEntity LivingRoomLightbulbs => new(_haContext, "update.living_room_lightbulbs");
    ///<summary>living_room/record_player</summary>
    public UpdateEntity LivingRoomRecordPlayer => new(_haContext, "update.living_room_record_player");
    ///<summary>living_room/standard_lamp</summary>
    public UpdateEntity LivingRoomStandardLampMqttUpdate => new(_haContext, "update.living_room_standard_lamp_mqtt_update");
    ///<summary>living_room/subwoofer</summary>
    public UpdateEntity LivingRoomSubwoofer => new(_haContext, "update.living_room_subwoofer");
    ///<summary>PupsStation DSM update</summary>
    public UpdateEntity PupsstationDsmUpdate => new(_haContext, "update.pupsstation_dsm_update");
}

public partial class VacuumEntities
{
    private readonly IHaContext _haContext;
    public VacuumEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Roborock S7 Pro Ultra</summary>
    public VacuumEntity RoborockS7ProUltra => new(_haContext, "vacuum.roborock_s7_pro_ultra");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Forecast Zuhause</summary>
    public WeatherEntity Zuhause => new(_haContext, "weather.zuhause");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>EnBW</summary>
    public ZoneEntity Enbw => new(_haContext, "zone.enbw");
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>iphone_philipp_stationary</summary>
    public ZoneEntity IphonePhilippStationary => new(_haContext, "zone.iphone_philipp_stationary");
    ///<summary>Messe Karlsruhe (dm Arena)</summary>
    public ZoneEntity MesseKarlsruheDmArena => new(_haContext, "zone.messe_karlsruhe_dm_arena");
    ///<summary>Messe Karlsruhe (Festplatz)</summary>
    public ZoneEntity MesseKarlsruheFestplatz => new(_haContext, "zone.messe_karlsruhe_festplatz");
}

public partial class InputDatetimeEntities
{
    private readonly IHaContext _haContext;
    public InputDatetimeEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Alarm Philipp</summary>
    public InputDatetimeEntity AlarmPhilipp => new(_haContext, "input_datetime.alarm_philipp");
}

public partial class ConfiguratorEntities
{
    private readonly IHaContext _haContext;
    public ConfiguratorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sony Media Player</summary>
    public ConfiguratorEntity SonyMediaPlayer => new(_haContext, "configurator.sony_media_player");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Repairs</summary>
    public EventEntity Repair => new(_haContext, "event.repair");
    ///<summary>Wäsche Scenario</summary>
    public EventEntity ScenarioWasche => new(_haContext, "event.scenario_wasche");
    ///<summary>Wäsche aus Scenario</summary>
    public EventEntity ScenarioWascheAus => new(_haContext, "event.scenario_wasche_aus");
}

public partial class ImageEntities
{
    private readonly IHaContext _haContext;
    public ImageEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Roborock S7 Pro Ultra Feldstraße</summary>
    public ImageEntity RoborockS7ProUltraFeldstrasse => new(_haContext, "image.roborock_s7_pro_ultra_feldstrasse");
}

public partial class OpenplantbookEntities
{
    private readonly IHaContext _haContext;
    public OpenplantbookEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public OpenplantbookEntity SearchResult => new(_haContext, "openplantbook.search_result");
}

public partial class PlantEntities
{
    private readonly IHaContext _haContext;
    public PlantEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Farn</summary>
    public PlantEntity Farn => new(_haContext, "plant.farn");
    ///<summary>Fensterblatt</summary>
    public PlantEntity Fensterblatt => new(_haContext, "plant.fensterblatt");
}

public partial class TodoEntities
{
    private readonly IHaContext _haContext;
    public TodoEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Einkauf - Gemüse Philipp</summary>
    public TodoEntity EinkaufGemusePhilipp => new(_haContext, "todo.einkauf_gemuse_philipp");
    ///<summary>Einkaufen 🛒 Philipp</summary>
    public TodoEntity EinkaufenPhilipp => new(_haContext, "todo.einkaufen_philipp");
    ///<summary>Haushaltstag Philipp</summary>
    public TodoEntity HaushaltstagPhilipp => new(_haContext, "todo.haushaltstag_philipp");
    ///<summary>London 🏴󠁧󠁢󠁥󠁮󠁧󠁿 Philipp</summary>
    public TodoEntity LondonPhilipp => new(_haContext, "todo.london_philipp");
    ///<summary>🪷 Urlaub Bali 🪷 Philipp</summary>
    public TodoEntity UrlaubBaliPhilipp => new(_haContext, "todo.urlaub_bali_philipp");
    ///<summary>🇮🇹 Urlaub Rom &amp; Sardinien 🇮🇹 Philipp</summary>
    public TodoEntity UrlaubRomSardinienPhilipp => new(_haContext, "todo.urlaub_rom_sardinien_philipp");
}

public partial class ValveEntities
{
    private readonly IHaContext _haContext;
    public ValveEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Thermostat Arbeitszimmer Valve</summary>
    public ValveEntity ThermostatArbeitszimmerValve => new(_haContext, "valve.thermostat_arbeitszimmer_valve");
    ///<summary>Thermostat Badezimmer Valve</summary>
    public ValveEntity ThermostatBadezimmerValve => new(_haContext, "valve.thermostat_badezimmer_valve");
    ///<summary>Thermostat Küche Valve</summary>
    public ValveEntity ThermostatKucheValve => new(_haContext, "valve.thermostat_kuche_valve");
    ///<summary>Thermostat Schlafzimmer Valve</summary>
    public ValveEntity ThermostatSchlafzimmerValve => new(_haContext, "valve.thermostat_schlafzimmer_valve");
    ///<summary>Thermostat Wohnzimmer Valve</summary>
    public ValveEntity ThermostatWohnzimmerValve => new(_haContext, "valve.thermostat_wohnzimmer_valve");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }

    [JsonPropertyName("raw_state")]
    public bool? RawState { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("group_members")]
    public IReadOnlyList<string>? GroupMembers { get; init; }
}

public partial record AlarmControlPanelEntity : Entity<AlarmControlPanelEntity, EntityState<AlarmControlPanelAttributes>, AlarmControlPanelAttributes>
{
    public AlarmControlPanelEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AlarmControlPanelEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AlarmControlPanelAttributes
{
    [JsonPropertyName("code_format")]
    public object? CodeFormat { get; init; }

    [JsonPropertyName("changed_by")]
    public object? ChangedBy { get; init; }

    [JsonPropertyName("code_arm_required")]
    public bool? CodeArmRequired { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("timestamp")]
    public string? Timestamp { get; init; }

    [JsonPropertyName("wifiFirmwareVersion")]
    public string? WifiFirmwareVersion { get; init; }

    [JsonPropertyName("callback#0")]
    public string? Callback0 { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("illuminance")]
    public double? Illuminance { get; init; }

    [JsonPropertyName("illuminance_lux")]
    public double? IlluminanceLux { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("occupancy")]
    public bool? Occupancy { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public string? IndicatorMode { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("tamper")]
    public bool? Tamper { get; init; }

    [JsonPropertyName("water_leak")]
    public bool? WaterLeak { get; init; }

    [JsonPropertyName("contact")]
    public bool? Contact { get; init; }

    [JsonPropertyName("malware")]
    public string? Malware { get; init; }

    [JsonPropertyName("network")]
    public string? Network { get; init; }

    [JsonPropertyName("securitySetting")]
    public string? SecuritySetting { get; init; }

    [JsonPropertyName("systemCheck")]
    public string? SystemCheck { get; init; }

    [JsonPropertyName("userInfo")]
    public string? UserInfo { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("round_trip_time_avg")]
    public double? RoundTripTimeAvg { get; init; }

    [JsonPropertyName("round_trip_time_max")]
    public double? RoundTripTimeMax { get; init; }

    [JsonPropertyName("round_trip_time_mdev")]
    public string? RoundTripTimeMdev { get; init; }

    [JsonPropertyName("round_trip_time_min")]
    public double? RoundTripTimeMin { get; init; }

    [JsonPropertyName("air_quality")]
    public string? AirQuality { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("voc")]
    public double? Voc { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record CalendarEntity : Entity<CalendarEntity, EntityState<CalendarAttributes>, CalendarAttributes>, ICalendarEntityCore
{
    public CalendarEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CalendarEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CalendarAttributes
{
    [JsonPropertyName("data")]
    public IReadOnlyList<object>? Data { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color")]
    public string? Color { get; init; }

    [JsonPropertyName("hex_color")]
    public string? HexColor { get; init; }

    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("all_day")]
    public bool? AllDay { get; init; }

    [JsonPropertyName("start_time")]
    public string? StartTime { get; init; }

    [JsonPropertyName("end_time")]
    public string? EndTime { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("offset_reached")]
    public bool? OffsetReached { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("brand")]
    public string? Brand { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("local_temperature")]
    public double? LocalTemperature { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CounterEntity : Entity<CounterEntity, EntityState<CounterAttributes>, CounterAttributes>
{
    public CounterEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CounterEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CounterAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("initial")]
    public double? Initial { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>, ICoverEntityCore
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("device_temperature")]
    public object? DeviceTemperature { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("zone")]
    public string? Zone { get; init; }

    [JsonPropertyName("last_zone")]
    public string? LastZone { get; init; }

    [JsonPropertyName("zone_timestamp")]
    public string? ZoneTimestamp { get; init; }

    [JsonPropertyName("interval")]
    public string? Interval { get; init; }

    [JsonPropertyName("travel_time")]
    public double? TravelTime { get; init; }

    [JsonPropertyName("zone_distance")]
    public double? ZoneDistance { get; init; }

    [JsonPropertyName("calc_distance")]
    public double? CalcDistance { get; init; }

    [JsonPropertyName("waze_distance")]
    public double? WazeDistance { get; init; }

    [JsonPropertyName("last_located")]
    public string? LastLocated { get; init; }

    [JsonPropertyName("last_update")]
    public string? LastUpdate { get; init; }

    [JsonPropertyName("next_update")]
    public string? NextUpdate { get; init; }

    [JsonPropertyName("poll_count")]
    public string? PollCount { get; init; }

    [JsonPropertyName("dir_of_travel")]
    public string? DirOfTravel { get; init; }

    [JsonPropertyName("travel_distance")]
    public double? TravelDistance { get; init; }

    [JsonPropertyName("trigger")]
    public string? Trigger { get; init; }

    [JsonPropertyName("timestamp")]
    public string? Timestamp { get; init; }

    [JsonPropertyName("authenticated")]
    public string? Authenticated { get; init; }

    [JsonPropertyName("battery_status")]
    public string? BatteryStatus { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("device_status")]
    public string? DeviceStatus { get; init; }

    [JsonPropertyName("low_power_mode")]
    public string? LowPowerMode { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("tracking")]
    public string? Tracking { get; init; }

    [JsonPropertyName("icloud3_version")]
    public string? Icloud3Version { get; init; }

    [JsonPropertyName("travel_time_min")]
    public double? TravelTimeMin { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    [JsonPropertyName("is_guest")]
    public bool? IsGuest { get; init; }

    [JsonPropertyName("qos_policy_applied")]
    public bool? QosPolicyApplied { get; init; }

    [JsonPropertyName("oui")]
    public string? Oui { get; init; }

    [JsonPropertyName("_is_guest_by_uap")]
    public bool? IsGuestByUap { get; init; }

    [JsonPropertyName("ap_mac")]
    public string? ApMac { get; init; }

    [JsonPropertyName("essid")]
    public string? Essid { get; init; }

    [JsonPropertyName("is_11r")]
    public bool? Is11r { get; init; }

    [JsonPropertyName("radio")]
    public string? Radio { get; init; }

    [JsonPropertyName("radio_proto")]
    public string? RadioProto { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record GroupEntity : Entity<GroupEntity, EntityState<GroupAttributes>, GroupAttributes>, IGroupEntityCore
{
    public GroupEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public GroupEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record GroupAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("order")]
    public double? Order { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public double? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>, IInputSelectEntityCore
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>, ILockEntityCore
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public string? IndicatorMode { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public object? UpdateAvailable { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("detection_period")]
    public double? DetectionPeriod { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("illuminance")]
    public double? Illuminance { get; init; }

    [JsonPropertyName("illuminance_lux")]
    public double? IlluminanceLux { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public object? UpdateAvailable { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public string? IndicatorMode { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("log_level_debug")]
    public string? LogLevelDebug { get; init; }

    [JsonPropertyName("filtername")]
    public string? Filtername { get; init; }

    [JsonPropertyName("update_time")]
    public string? UpdateTime { get; init; }

    [JsonPropertyName("names")]
    public object? Names { get; init; }

    [JsonPropertyName("logs")]
    public string? Logs { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("number_of_loaded_apps")]
    public double? NumberOfLoadedApps { get; init; }

    [JsonPropertyName("number_of_running_apps")]
    public double? NumberOfRunningApps { get; init; }

    [JsonPropertyName("version")]
    public string? Version { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public string? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location_0 { get; init; }

    [JsonPropertyName("location")]
    public string? Location_1 { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("last_increment")]
    public double? LastIncrement { get; init; }

    [JsonPropertyName("workout0_title")]
    public string? Workout0Title { get; init; }

    [JsonPropertyName("workout0_url")]
    public string? Workout0Url { get; init; }

    [JsonPropertyName("workout1_title")]
    public string? Workout1Title { get; init; }

    [JsonPropertyName("workout1_url")]
    public string? Workout1Url { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("illuminance")]
    public double? Illuminance { get; init; }

    [JsonPropertyName("illuminance_lux")]
    public double? IlluminanceLux { get; init; }

    [JsonPropertyName("occupancy")]
    public bool? Occupancy { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("tamper")]
    public bool? Tamper { get; init; }

    [JsonPropertyName("water_leak")]
    public bool? WaterLeak { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("all_tasks")]
    public IReadOnlyList<object>? AllTasks { get; init; }

    [JsonPropertyName("overdue_tasks")]
    public IReadOnlyList<object>? OverdueTasks { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("start")]
    public string? Start { get; init; }

    [JsonPropertyName("end")]
    public string? End { get; init; }

    [JsonPropertyName("sources")]
    public IReadOnlyList<string>? Sources { get; init; }

    [JsonPropertyName("count_sources")]
    public double? CountSources { get; init; }

    [JsonPropertyName("available_sources")]
    public double? AvailableSources { get; init; }

    [JsonPropertyName("count")]
    public double? Count { get; init; }

    [JsonPropertyName("max_value")]
    public double? MaxValue { get; init; }

    [JsonPropertyName("min_value")]
    public double? MinValue { get; init; }

    [JsonPropertyName("air_quality")]
    public string? AirQuality { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("voc")]
    public double? Voc { get; init; }

    [JsonPropertyName("Cellular Technology")]
    public string? CellularTechnology { get; init; }

    [JsonPropertyName("destination_country")]
    public string? DestinationCountry { get; init; }

    [JsonPropertyName("info_text")]
    public string? InfoText { get; init; }

    [JsonPropertyName("timestamp")]
    public string? Timestamp { get; init; }

    [JsonPropertyName("origin_country")]
    public string? OriginCountry { get; init; }

    [JsonPropertyName("package_type")]
    public string? PackageType { get; init; }

    [JsonPropertyName("tracking_info_language")]
    public string? TrackingInfoLanguage { get; init; }

    [JsonPropertyName("tracking_number")]
    public string? TrackingNumber { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_options")]
    public object? ColorOptions { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("Bioabfall")]
    public string? Bioabfall { get; init; }

    [JsonPropertyName("Gelber Sack")]
    public string? GelberSack { get; init; }

    [JsonPropertyName("Glasbox")]
    public string? Glasbox { get; init; }

    [JsonPropertyName("Heckenschnitt")]
    public string? Heckenschnitt { get; init; }

    [JsonPropertyName("Papier")]
    public string? Papier { get; init; }

    [JsonPropertyName("Problemmüll 11.00-12.00 Uhr, Rathausplatz")]
    public string? Problemmll11_0012_00UhrRathausplatz { get; init; }

    [JsonPropertyName("Problemmüll-W 11.00-13.00 Uhr, Wörth: zum Messplatz (Parkplatz Festhalle)")]
    public string? ProblemmllW11_0013_00UhrWrthzumMessplatzParkplatzFesthalle { get; init; }

    [JsonPropertyName("Problemmüll-W 9.00-13.00 Uhr, Wörth: zum Messplatz (Parkplatz Festhalle)")]
    public string? ProblemmllW9_0013_00UhrWrthzumMessplatzParkplatzFesthalle { get; init; }

    [JsonPropertyName("Restmüll")]
    public string? Restmll { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }

    [JsonPropertyName("valve_tappet_state")]
    public string? ValveTappetState { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("change")]
    public double? Change { get; init; }

    [JsonPropertyName("changeOneWeek")]
    public double? ChangeOneWeek { get; init; }

    [JsonPropertyName("changeOneMonth")]
    public double? ChangeOneMonth { get; init; }

    [JsonPropertyName("changeThreeMonths")]
    public double? ChangeThreeMonths { get; init; }

    [JsonPropertyName("changeOneYear")]
    public double? ChangeOneYear { get; init; }

    [JsonPropertyName("changeThreeYears")]
    public double? ChangeThreeYears { get; init; }

    [JsonPropertyName("changeFiveYears")]
    public object? ChangeFiveYears { get; init; }

    [JsonPropertyName("changeTenYears")]
    public object? ChangeTenYears { get; init; }

    [JsonPropertyName("changeCurrentYear")]
    public double? ChangeCurrentYear { get; init; }

    [JsonPropertyName("totalChangeOneWeek")]
    public double? TotalChangeOneWeek { get; init; }

    [JsonPropertyName("totalChangeOneMonth")]
    public double? TotalChangeOneMonth { get; init; }

    [JsonPropertyName("totalChangeThreeMonths")]
    public double? TotalChangeThreeMonths { get; init; }

    [JsonPropertyName("totalChangeOneYear")]
    public double? TotalChangeOneYear { get; init; }

    [JsonPropertyName("totalChangeThreeYears")]
    public double? TotalChangeThreeYears { get; init; }

    [JsonPropertyName("totalChangeFiveYears")]
    public object? TotalChangeFiveYears { get; init; }

    [JsonPropertyName("totalChangeTenYears")]
    public object? TotalChangeTenYears { get; init; }

    [JsonPropertyName("totalChangeCurrentYear")]
    public double? TotalChangeCurrentYear { get; init; }

    [JsonPropertyName("changePercent")]
    public double? ChangePercent { get; init; }

    [JsonPropertyName("changePercentOneWeek")]
    public double? ChangePercentOneWeek { get; init; }

    [JsonPropertyName("changePercentOneMonth")]
    public double? ChangePercentOneMonth { get; init; }

    [JsonPropertyName("changePercentThreeMonths")]
    public double? ChangePercentThreeMonths { get; init; }

    [JsonPropertyName("changePercentOneYear")]
    public double? ChangePercentOneYear { get; init; }

    [JsonPropertyName("changePercentThreeYears")]
    public double? ChangePercentThreeYears { get; init; }

    [JsonPropertyName("changePercentFiveYears")]
    public object? ChangePercentFiveYears { get; init; }

    [JsonPropertyName("changePercentTenYears")]
    public object? ChangePercentTenYears { get; init; }

    [JsonPropertyName("changePercentCurrentYear")]
    public double? ChangePercentCurrentYear { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("shares")]
    public double? Shares { get; init; }

    [JsonPropertyName("totalValue")]
    public double? TotalValue { get; init; }

    [JsonPropertyName("totalChange")]
    public double? TotalChange { get; init; }

    [JsonPropertyName("purchasePrice")]
    public double? PurchasePrice { get; init; }

    [JsonPropertyName("profitLoss")]
    public double? ProfitLoss { get; init; }

    [JsonPropertyName("profitLossPercentage")]
    public double? ProfitLossPercentage { get; init; }

    [JsonPropertyName("totalProfitLoss")]
    public double? TotalProfitLoss { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("illuminance")]
    public double? Illuminance { get; init; }

    [JsonPropertyName("illuminance_lux")]
    public double? IlluminanceLux { get; init; }

    [JsonPropertyName("occupancy")]
    public bool? Occupancy { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public string? IndicatorMode { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("tamper")]
    public bool? Tamper { get; init; }

    [JsonPropertyName("water_leak")]
    public bool? WaterLeak { get; init; }

    [JsonPropertyName("contact")]
    public bool? Contact { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("air_quality")]
    public string? AirQuality { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("voc")]
    public double? Voc { get; init; }

    [JsonPropertyName("packages")]
    public IReadOnlyList<object>? Packages { get; init; }

    [JsonPropertyName("co2")]
    public double? Co2 { get; init; }

    [JsonPropertyName("formaldehyd")]
    public double? Formaldehyd { get; init; }

    [JsonPropertyName("external_sensor")]
    public string? ExternalSensor { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("last_valid_state")]
    public string? LastValidState { get; init; }

    [JsonPropertyName("meter_period")]
    public string? MeterPeriod { get; init; }

    [JsonPropertyName("cron pattern")]
    public string? Cronpattern { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("detection_period")]
    public double? DetectionPeriod { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("integration")]
    public string? Integration { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public string? IndicatorMode { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public object? UpdateAvailable { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("raw_state")]
    public bool? RawState { get; init; }
}

public partial record TimeEntity : Entity<TimeEntity, EntityState<TimeAttributes>, TimeAttributes>
{
    public TimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimeAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>, ITimerEntityCore
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public object? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public object? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public object? Title { get; init; }

    [JsonPropertyName("child_lock")]
    public string? ChildLock { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("device")]
    public object? Device { get; init; }

    [JsonPropertyName("energy")]
    public double? Energy { get; init; }

    [JsonPropertyName("indicator_mode")]
    public string? IndicatorMode { get; init; }

    [JsonPropertyName("last_seen")]
    public string? LastSeen { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power")]
    public double? Power { get; init; }

    [JsonPropertyName("power_outage_memory")]
    public string? PowerOutageMemory { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("charging_status")]
    public object? ChargingStatus { get; init; }

    [JsonPropertyName("device_temperature")]
    public object? DeviceTemperature { get; init; }

    [JsonPropertyName("motor_state")]
    public object? MotorState { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("running")]
    public object? Running { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public string? PowerOnBehavior { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("action")]
    public object? Action { get; init; }

    [JsonPropertyName("click")]
    public object? Click { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("air_quality")]
    public string? AirQuality { get; init; }

    [JsonPropertyName("battery_low")]
    public bool? BatteryLow { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("voc")]
    public double? Voc { get; init; }
}

public partial record VacuumEntity : Entity<VacuumEntity, EntityState<VacuumAttributes>, VacuumAttributes>, IVacuumEntityCore
{
    public VacuumEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public VacuumEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record VacuumAttributes
{
    [JsonPropertyName("fan_speed_list")]
    public IReadOnlyList<string>? FanSpeedList { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("battery_icon")]
    public string? BatteryIcon { get; init; }

    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }
}

public partial record InputDatetimeEntity : Entity<InputDatetimeEntity, EntityState<InputDatetimeAttributes>, InputDatetimeAttributes>, IInputDatetimeEntityCore
{
    public InputDatetimeEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputDatetimeEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputDatetimeAttributes
{
    [JsonPropertyName("has_date")]
    public bool? HasDate { get; init; }

    [JsonPropertyName("has_time")]
    public bool? HasTime { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("year")]
    public double? Year { get; init; }

    [JsonPropertyName("month")]
    public double? Month { get; init; }

    [JsonPropertyName("day")]
    public double? Day { get; init; }

    [JsonPropertyName("hour")]
    public double? Hour { get; init; }

    [JsonPropertyName("minute")]
    public double? Minute { get; init; }

    [JsonPropertyName("second")]
    public double? Second { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ConfiguratorEntity : Entity<ConfiguratorEntity, EntityState<ConfiguratorAttributes>, ConfiguratorAttributes>
{
    public ConfiguratorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConfiguratorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConfiguratorAttributes
{
    [JsonPropertyName("configure_id")]
    public string? ConfigureId { get; init; }

    [JsonPropertyName("fields")]
    public IReadOnlyList<object>? Fields { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("entity_picture")]
    public object? EntityPicture { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("submit_caption")]
    public string? SubmitCaption { get; init; }

    [JsonPropertyName("errors")]
    public string? Errors { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("name")]
    public string? Name { get; init; }

    [JsonPropertyName("lastTimeTriggered")]
    public string? LastTimeTriggered { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("domain")]
    public string? Domain { get; init; }

    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }
}

public partial record ImageEntity : Entity<ImageEntity, EntityState<ImageAttributes>, ImageAttributes>
{
    public ImageEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ImageEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ImageAttributes
{
    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record OpenplantbookEntity : Entity<OpenplantbookEntity, EntityState<OpenplantbookAttributes>, OpenplantbookAttributes>
{
    public OpenplantbookEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public OpenplantbookEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record OpenplantbookAttributes
{
}

public partial record PlantEntity : Entity<PlantEntity, EntityState<PlantAttributes>, PlantAttributes>
{
    public PlantEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PlantEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PlantAttributes
{
    [JsonPropertyName("species")]
    public string? Species { get; init; }

    [JsonPropertyName("moisture_status")]
    public object? MoistureStatus { get; init; }

    [JsonPropertyName("temperature_status")]
    public object? TemperatureStatus { get; init; }

    [JsonPropertyName("conductivity_status")]
    public object? ConductivityStatus { get; init; }

    [JsonPropertyName("illuminance_status")]
    public object? IlluminanceStatus { get; init; }

    [JsonPropertyName("humidity_status")]
    public object? HumidityStatus { get; init; }

    [JsonPropertyName("dli_status")]
    public string? DliStatus { get; init; }

    [JsonPropertyName("species_original")]
    public string? SpeciesOriginal { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TodoEntity : Entity<TodoEntity, EntityState<TodoAttributes>, TodoAttributes>
{
    public TodoEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TodoEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TodoAttributes
{
    [JsonPropertyName("all_todos")]
    public IReadOnlyList<object>? AllTodos { get; init; }

    [JsonPropertyName("overdue_todos")]
    public IReadOnlyList<object>? OverdueTodos { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ValveEntity : Entity<ValveEntity, EntityState<ValveAttributes>, ValveAttributes>
{
    public ValveEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ValveEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ValveAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    AverageServices Average { get; }

    BackupServices Backup { get; }

    BlueprintServices Blueprint { get; }

    BoschShcServices BoschShc { get; }

    BrowserModServices BrowserMod { get; }

    ButtonServices Button { get; }

    CalendarServices Calendar { get; }

    CameraServices Camera { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrontendServices Frontend { get; }

    GoogleServices Google { get; }

    GroupServices Group { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LawnMowerServices LawnMower { get; }

    LightServices Light { get; }

    LocaltuyaServices Localtuya { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    LovelaceServices Lovelace { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NukiNgServices NukiNg { get; }

    NumberServices Number { get; }

    O365Services O365 { get; }

    OpenplantbookServices Openplantbook { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PlantServices Plant { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RepairsServices Repairs { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SpookServices Spook { get; }

    SwitchServices Switch { get; }

    SynologyDsmServices SynologyDsm { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TodoServices Todo { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    ValveServices Valve { get; }

    WakeOnLanServices WakeOnLan { get; }

    WasteCollectionScheduleServices WasteCollectionSchedule { get; }

    WaterHeaterServices WaterHeater { get; }

    WebrtcServices Webrtc { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public AverageServices Average => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public BlueprintServices Blueprint => new(_haContext);
    public BoschShcServices BoschShc => new(_haContext);
    public BrowserModServices BrowserMod => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CalendarServices Calendar => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoogleServices Google => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LawnMowerServices LawnMower => new(_haContext);
    public LightServices Light => new(_haContext);
    public LocaltuyaServices Localtuya => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public LovelaceServices Lovelace => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NukiNgServices NukiNg => new(_haContext);
    public NumberServices Number => new(_haContext);
    public O365Services O365 => new(_haContext);
    public OpenplantbookServices Openplantbook => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PlantServices Plant => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RepairsServices Repairs => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SpookServices Spook => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SynologyDsmServices SynologyDsm => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TodoServices Todo => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public ValveServices Valve => new(_haContext);
    public WakeOnLanServices WakeOnLan => new(_haContext);
    public WasteCollectionScheduleServices WasteCollectionSchedule => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WebrtcServices Webrtc => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class AverageServices
{
    private readonly IHaContext _haContext;
    public AverageServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all average sensor entities</summary>
    public void Reload()
    {
        _haContext.CallService("average", "reload", null);
    }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup.</summary>
    public void Create()
    {
        _haContext.CallService("backup", "create", null);
    }
}

public partial class BlueprintServices
{
    private readonly IHaContext _haContext;
    public BlueprintServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Import a blueprint.</summary>
    public void Import(BlueprintImportParameters data)
    {
        _haContext.CallService("blueprint", "import", null, data);
    }

    ///<summary>Import a blueprint.</summary>
    ///<param name="url">The URL to import the blueprint from.</param>
    public void Import(string url)
    {
        _haContext.CallService("blueprint", "import", null, new BlueprintImportParameters { Url = url });
    }
}

public partial record BlueprintImportParameters
{
    ///<summary>The URL to import the blueprint from.</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class BoschShcServices
{
    private readonly IHaContext _haContext;
    public BoschShcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Name of the smoke detector entity to set</summary>
    public void SmokedetectorAlarmstate(BoschShcSmokedetectorAlarmstateParameters data)
    {
        _haContext.CallService("bosch_shc", "smokedetector_alarmstate", null, data);
    }

    ///<summary>Name of the smoke detector entity to set</summary>
    ///<param name="entityId">Name of the smoke detector entity. eg: binary_sensor.smokedetector_living_room</param>
    ///<param name="command">Command string to send to the smoke detector. eg: CUSTOM_COMMAND</param>
    public void SmokedetectorAlarmstate(string entityId, string command)
    {
        _haContext.CallService("bosch_shc", "smokedetector_alarmstate", null, new BoschShcSmokedetectorAlarmstateParameters { EntityId = entityId, Command = command });
    }

    ///<summary>Calls test routine of a smoke detector.</summary>
    public void SmokedetectorCheck(BoschShcSmokedetectorCheckParameters data)
    {
        _haContext.CallService("bosch_shc", "smokedetector_check", null, data);
    }

    ///<summary>Calls test routine of a smoke detector.</summary>
    ///<param name="entityId">Name of the smoke detector entity. eg: binary_sensor.smokedetector_living_room</param>
    public void SmokedetectorCheck(string entityId)
    {
        _haContext.CallService("bosch_shc", "smokedetector_check", null, new BoschShcSmokedetectorCheckParameters { EntityId = entityId });
    }

    ///<summary>Triggers a rawscan on Bosch SHC to discover devices. Result streamed to info logger.</summary>
    public void TriggerRawscan(BoschShcTriggerRawscanParameters data)
    {
        _haContext.CallService("bosch_shc", "trigger_rawscan", null, data);
    }

    ///<summary>Triggers a rawscan on Bosch SHC to discover devices. Result streamed to info logger.</summary>
    ///<param name="title">Title of the SHC eg: shc012345</param>
    ///<param name="command">Rawscan command to trigger. Possible commands are &apos;devices&apos;, &apos;device&apos;, &apos;services&apos;, &apos;device_services&apos;, &apos;device_service&apos;, &apos;rooms&apos;, &apos;scenarios&apos;, &apos;info&apos;, &apos;information&apos;, &apos;public_information&apos;, &apos;intrusion_detection&apos; eg: devices</param>
    ///<param name="deviceId">Device id in case the command is &apos;device&apos;, &apos;device_services&apos; or &apos;device_service&apos; eg: hdm:ZigBee:000d6</param>
    ///<param name="serviceId">Service id in case the command is &apos;device_service&apos; eg: BatteryLevel</param>
    public void TriggerRawscan(string command, string? title = null, string? deviceId = null, string? serviceId = null)
    {
        _haContext.CallService("bosch_shc", "trigger_rawscan", null, new BoschShcTriggerRawscanParameters { Title = title, Command = command, DeviceId = deviceId, ServiceId = serviceId });
    }

    ///<summary>Triggers a scenario on Bosch SHC.</summary>
    public void TriggerScenario(BoschShcTriggerScenarioParameters data)
    {
        _haContext.CallService("bosch_shc", "trigger_scenario", null, data);
    }

    ///<summary>Triggers a scenario on Bosch SHC.</summary>
    ///<param name="title">Title of the SHC eg: shc012345</param>
    ///<param name="name">Name of the scenario to trigger eg: Scenario Name</param>
    public void TriggerScenario(string name, string? title = null)
    {
        _haContext.CallService("bosch_shc", "trigger_scenario", null, new BoschShcTriggerScenarioParameters { Title = title, Name = name });
    }
}

public partial record BoschShcSmokedetectorAlarmstateParameters
{
    ///<summary>Name of the smoke detector entity. eg: binary_sensor.smokedetector_living_room</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Command string to send to the smoke detector. eg: CUSTOM_COMMAND</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }
}

public partial record BoschShcSmokedetectorCheckParameters
{
    ///<summary>Name of the smoke detector entity. eg: binary_sensor.smokedetector_living_room</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record BoschShcTriggerRawscanParameters
{
    ///<summary>Title of the SHC eg: shc012345</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Rawscan command to trigger. Possible commands are &apos;devices&apos;, &apos;device&apos;, &apos;services&apos;, &apos;device_services&apos;, &apos;device_service&apos;, &apos;rooms&apos;, &apos;scenarios&apos;, &apos;info&apos;, &apos;information&apos;, &apos;public_information&apos;, &apos;intrusion_detection&apos; eg: devices</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Device id in case the command is &apos;device&apos;, &apos;device_services&apos; or &apos;device_service&apos; eg: hdm:ZigBee:000d6</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    ///<summary>Service id in case the command is &apos;device_service&apos; eg: BatteryLevel</summary>
    [JsonPropertyName("service_id")]
    public string? ServiceId { get; init; }
}

public partial record BoschShcTriggerScenarioParameters
{
    ///<summary>Title of the SHC eg: shc012345</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Name of the scenario to trigger eg: Scenario Name</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial class BrowserModServices
{
    private readonly IHaContext _haContext;
    public BrowserModServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close a popup</summary>
    ///<param name="target">The target for this service call</param>
    public void ClosePopup(ServiceTarget target)
    {
        _haContext.CallService("browser_mod", "close_popup", target);
    }

    ///<summary>Print text to browser console</summary>
    ///<param name="target">The target for this service call</param>
    public void Console(ServiceTarget target, BrowserModConsoleParameters data)
    {
        _haContext.CallService("browser_mod", "console", target, data);
    }

    ///<summary>Print text to browser console</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Text to print</param>
    public void Console(ServiceTarget target, string? message = null)
    {
        _haContext.CallService("browser_mod", "console", target, new BrowserModConsoleParameters { Message = message });
    }

    ///<summary>Wait for a time</summary>
    ///<param name="target">The target for this service call</param>
    public void Delay(ServiceTarget target, BrowserModDelayParameters data)
    {
        _haContext.CallService("browser_mod", "delay", target, data);
    }

    ///<summary>Wait for a time</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="time">Time to wait (ms)</param>
    public void Delay(ServiceTarget target, long? time = null)
    {
        _haContext.CallService("browser_mod", "delay", target, new BrowserModDelayParameters { Time = time });
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    ///<param name="target">The target for this service call</param>
    public void Javascript(ServiceTarget target, BrowserModJavascriptParameters data)
    {
        _haContext.CallService("browser_mod", "javascript", target, data);
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">JavaScript code to run</param>
    public void Javascript(ServiceTarget target, object? code = null)
    {
        _haContext.CallService("browser_mod", "javascript", target, new BrowserModJavascriptParameters { Code = code });
    }

    ///<summary>Show more-info dialog</summary>
    ///<param name="target">The target for this service call</param>
    public void MoreInfo(ServiceTarget target, BrowserModMoreInfoParameters data)
    {
        _haContext.CallService("browser_mod", "more_info", target, data);
    }

    ///<summary>Show more-info dialog</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entity"></param>
    ///<param name="large"></param>
    ///<param name="ignorePopupCard"></param>
    public void MoreInfo(ServiceTarget target, string entity, bool? large = null, bool? ignorePopupCard = null)
    {
        _haContext.CallService("browser_mod", "more_info", target, new BrowserModMoreInfoParameters { Entity = entity, Large = large, IgnorePopupCard = ignorePopupCard });
    }

    ///<summary>Navigate browser to a different page</summary>
    ///<param name="target">The target for this service call</param>
    public void Navigate(ServiceTarget target, BrowserModNavigateParameters data)
    {
        _haContext.CallService("browser_mod", "navigate", target, data);
    }

    ///<summary>Navigate browser to a different page</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="path">Target path</param>
    public void Navigate(ServiceTarget target, string? path = null)
    {
        _haContext.CallService("browser_mod", "navigate", target, new BrowserModNavigateParameters { Path = path });
    }

    ///<summary>Display a short notification</summary>
    ///<param name="target">The target for this service call</param>
    public void Notification(ServiceTarget target, BrowserModNotificationParameters data)
    {
        _haContext.CallService("browser_mod", "notification", target, data);
    }

    ///<summary>Display a short notification</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="message">Message to display</param>
    ///<param name="duration">Time before closing (ms)</param>
    ///<param name="actionText">Text of optional action button</param>
    ///<param name="action">Action to perform when the action button is pressed</param>
    public void Notification(ServiceTarget target, string message, long? duration = null, string? actionText = null, object? action = null)
    {
        _haContext.CallService("browser_mod", "notification", target, new BrowserModNotificationParameters { Message = message, Duration = duration, ActionText = actionText, Action = action });
    }

    ///<summary>Display a popup</summary>
    ///<param name="target">The target for this service call</param>
    public void Popup(ServiceTarget target, BrowserModPopupParameters data)
    {
        _haContext.CallService("browser_mod", "popup", target, data);
    }

    ///<summary>Display a popup</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="title">Popup title</param>
    ///<param name="content">Popup content (Test or lovelace card configuration)</param>
    ///<param name="size"></param>
    ///<param name="rightButton">Text of the right button</param>
    ///<param name="rightButtonAction">Action to perform when the right button is pressed</param>
    ///<param name="leftButton">Text of the left button</param>
    ///<param name="leftButtonAction">Action to perform when left button is pressed</param>
    ///<param name="dismissable">Whether the popup can be closed by the user without action</param>
    ///<param name="dismissAction">Action to perform when popup is dismissed</param>
    ///<param name="autoclose">Close the popup automatically on mouse, pointer or keyboard activity</param>
    ///<param name="timeout">Time before closing (ms)</param>
    ///<param name="timeoutAction">Action to perform when popup is closed by timeout</param>
    ///<param name="style">CSS code to apply to the popup window</param>
    public void Popup(ServiceTarget target, object content, string? title = null, object? size = null, string? rightButton = null, object? rightButtonAction = null, string? leftButton = null, object? leftButtonAction = null, bool? dismissable = null, object? dismissAction = null, bool? autoclose = null, long? timeout = null, object? timeoutAction = null, string? style = null)
    {
        _haContext.CallService("browser_mod", "popup", target, new BrowserModPopupParameters { Title = title, Content = content, Size = size, RightButton = rightButton, RightButtonAction = rightButtonAction, LeftButton = leftButton, LeftButtonAction = leftButtonAction, Dismissable = dismissable, DismissAction = dismissAction, Autoclose = autoclose, Timeout = timeout, TimeoutAction = timeoutAction, Style = style });
    }

    ///<summary>Refresh page</summary>
    ///<param name="target">The target for this service call</param>
    public void Refresh(ServiceTarget target)
    {
        _haContext.CallService("browser_mod", "refresh", target);
    }

    ///<summary>Run a sequence of services</summary>
    ///<param name="target">The target for this service call</param>
    public void Sequence(ServiceTarget target, BrowserModSequenceParameters data)
    {
        _haContext.CallService("browser_mod", "sequence", target, data);
    }

    ///<summary>Run a sequence of services</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="sequence">List of services to run</param>
    public void Sequence(ServiceTarget target, object? sequence = null)
    {
        _haContext.CallService("browser_mod", "sequence", target, new BrowserModSequenceParameters { Sequence = sequence });
    }

    ///<summary>Change the current theme</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTheme(ServiceTarget target, BrowserModSetThemeParameters data)
    {
        _haContext.CallService("browser_mod", "set_theme", target, data);
    }

    ///<summary>Change the current theme</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="theme">Name of theme or &apos;auto&apos;</param>
    ///<param name="dark">Dark/light mode</param>
    ///<param name="primaryColor">Primary theme color</param>
    ///<param name="accentColor">Accent theme color</param>
    public void SetTheme(ServiceTarget target, string? theme = null, object? dark = null, object? primaryColor = null, object? accentColor = null)
    {
        _haContext.CallService("browser_mod", "set_theme", target, new BrowserModSetThemeParameters { Theme = theme, Dark = dark, PrimaryColor = primaryColor, AccentColor = accentColor });
    }
}

public partial record BrowserModConsoleParameters
{
    ///<summary>Text to print</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record BrowserModDelayParameters
{
    ///<summary>Time to wait (ms)</summary>
    [JsonPropertyName("time")]
    public long? Time { get; init; }
}

public partial record BrowserModJavascriptParameters
{
    ///<summary>JavaScript code to run</summary>
    [JsonPropertyName("code")]
    public object? Code { get; init; }
}

public partial record BrowserModMoreInfoParameters
{
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    [JsonPropertyName("large")]
    public bool? Large { get; init; }

    [JsonPropertyName("ignore_popup_card")]
    public bool? IgnorePopupCard { get; init; }
}

public partial record BrowserModNavigateParameters
{
    ///<summary>Target path</summary>
    [JsonPropertyName("path")]
    public string? Path { get; init; }
}

public partial record BrowserModNotificationParameters
{
    ///<summary>Message to display</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Text of optional action button</summary>
    [JsonPropertyName("action_text")]
    public string? ActionText { get; init; }

    ///<summary>Action to perform when the action button is pressed</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }
}

public partial record BrowserModPopupParameters
{
    ///<summary>Popup title</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Popup content (Test or lovelace card configuration)</summary>
    [JsonPropertyName("content")]
    public object? Content { get; init; }

    [JsonPropertyName("size")]
    public object? Size { get; init; }

    ///<summary>Text of the right button</summary>
    [JsonPropertyName("right_button")]
    public string? RightButton { get; init; }

    ///<summary>Action to perform when the right button is pressed</summary>
    [JsonPropertyName("right_button_action")]
    public object? RightButtonAction { get; init; }

    ///<summary>Text of the left button</summary>
    [JsonPropertyName("left_button")]
    public string? LeftButton { get; init; }

    ///<summary>Action to perform when left button is pressed</summary>
    [JsonPropertyName("left_button_action")]
    public object? LeftButtonAction { get; init; }

    ///<summary>Whether the popup can be closed by the user without action</summary>
    [JsonPropertyName("dismissable")]
    public bool? Dismissable { get; init; }

    ///<summary>Action to perform when popup is dismissed</summary>
    [JsonPropertyName("dismiss_action")]
    public object? DismissAction { get; init; }

    ///<summary>Close the popup automatically on mouse, pointer or keyboard activity</summary>
    [JsonPropertyName("autoclose")]
    public bool? Autoclose { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }

    ///<summary>Action to perform when popup is closed by timeout</summary>
    [JsonPropertyName("timeout_action")]
    public object? TimeoutAction { get; init; }

    ///<summary>CSS code to apply to the popup window</summary>
    [JsonPropertyName("style")]
    public string? Style { get; init; }
}

public partial record BrowserModSequenceParameters
{
    ///<summary>List of services to run</summary>
    [JsonPropertyName("sequence")]
    public object? Sequence { get; init; }
}

public partial record BrowserModSetThemeParameters
{
    ///<summary>Name of theme or &apos;auto&apos;</summary>
    [JsonPropertyName("theme")]
    public string? Theme { get; init; }

    ///<summary>Dark/light mode</summary>
    [JsonPropertyName("dark")]
    public object? Dark { get; init; }

    ///<summary>Primary theme color</summary>
    [JsonPropertyName("primaryColor")]
    public object? PrimaryColor { get; init; }

    ///<summary>Accent theme color</summary>
    [JsonPropertyName("accentColor")]
    public object? AccentColor { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CalendarServices
{
    private readonly IHaContext _haContext;
    public CalendarServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, CalendarCreateEventParameters data)
    {
        _haContext.CallService("calendar", "create_event", target, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("calendar", "create_event", target, new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetEvents(ServiceTarget target, CalendarGetEventsParameters data)
    {
        _haContext.CallService("calendar", "get_events", target, data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void GetEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "get_events", target, new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    public void ListEvents(ServiceTarget target, CalendarListEventsParameters data)
    {
        _haContext.CallService("calendar", "list_events", target, data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public void ListEvents(ServiceTarget target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        _haContext.CallService("calendar", "list_events", target, new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public partial record CalendarCreateEventParameters
{
    ///<summary>Defines the short summary or subject for the event. eg: Department Party</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>The date the all-day event should start. eg: 2022-03-22</summary>
    [JsonPropertyName("start_date")]
    public object? StartDate { get; init; }

    ///<summary>The date the all-day event should end (exclusive). eg: 2022-03-23</summary>
    [JsonPropertyName("end_date")]
    public object? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial record CalendarGetEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial record CalendarListEventsParameters
{
    ///<summary>Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public object? StartDateTime { get; init; }

    ///<summary>Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public object? EndDateTime { get; init; }

    ///<summary>Returns active events from start_date_time until the specified duration.</summary>
    [JsonPropertyName("duration")]
    public object? Duration { get; init; }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("climate", "toggle", target);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Icloud3FindIphoneAlert()
    {
        _haContext.CallService("device_tracker", "icloud3_find_iphone_alert", null);
    }

    public void Icloud3Restart()
    {
        _haContext.CallService("device_tracker", "icloud3_restart", null);
    }

    public void Icloud3SetInterval()
    {
        _haContext.CallService("device_tracker", "icloud3_set_interval", null);
    }

    public void Icloud3Update()
    {
        _haContext.CallService("device_tracker", "icloud3_update", null);
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoogleServices
{
    private readonly IHaContext _haContext;
    public GoogleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds a new calendar event.</summary>
    public void AddEvent(GoogleAddEventParameters data)
    {
        _haContext.CallService("google", "add_event", null, data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="calendarId">The id of the calendar you want. eg: Your email</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2019-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2019-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2019-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2019-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    public void AddEvent(string calendarId, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null)
    {
        _haContext.CallService("google", "add_event", null, new GoogleAddEventParameters { CalendarId = calendarId, Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateEvent(ServiceTarget target, GoogleCreateEventParameters data)
    {
        _haContext.CallService("google", "create_event", target, data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public void CreateEvent(ServiceTarget target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        _haContext.CallService("google", "create_event", target, new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public partial record GoogleAddEventParameters
{
    ///<summary>The id of the calendar you want. eg: Your email</summary>
    [JsonPropertyName("calendar_id")]
    public string? CalendarId { get; init; }

    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2019-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2019-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2019-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2019-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }
}

public partial record GoogleCreateEventParameters
{
    ///<summary>Acts as the title of the event. eg: Bowling</summary>
    [JsonPropertyName("summary")]
    public string? Summary { get; init; }

    ///<summary>The description of the event. Optional. eg: Birthday bowling</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The date and time the event should start. eg: 2022-03-22 20:00:00</summary>
    [JsonPropertyName("start_date_time")]
    public string? StartDateTime { get; init; }

    ///<summary>The date and time the event should end. eg: 2022-03-22 22:00:00</summary>
    [JsonPropertyName("end_date_time")]
    public string? EndDateTime { get; init; }

    ///<summary>The date the whole day event should start. eg: 2022-03-10</summary>
    [JsonPropertyName("start_date")]
    public string? StartDate { get; init; }

    ///<summary>The date the whole day event should end. eg: 2022-03-11</summary>
    [JsonPropertyName("end_date")]
    public string? EndDate { get; init; }

    ///<summary>Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</summary>
    [JsonPropertyName("in")]
    public object? In { get; init; }

    ///<summary>The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds an alias to an area.</summary>
    public void AddAliasToArea(HomeassistantAddAliasToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_alias_to_area", null, data);
    }

    ///<summary>Adds an alias to an area.</summary>
    ///<param name="areaId">The ID of the area to add the alias to.</param>
    ///<param name="alias">The alias (or list of aliasses) to add to the area.</param>
    public void AddAliasToArea(string areaId, object @alias)
    {
        _haContext.CallService("homeassistant", "add_alias_to_area", null, new HomeassistantAddAliasToAreaParameters { AreaId = areaId, Alias = @alias });
    }

    ///<summary>Adds an device to an area. Please note, if the device is already in an area, it will be removed from the previous area.</summary>
    public void AddDeviceToArea(HomeassistantAddDeviceToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_device_to_area", null, data);
    }

    ///<summary>Adds an device to an area. Please note, if the device is already in an area, it will be removed from the previous area.</summary>
    ///<param name="areaId">The ID of the area to add the device to.</param>
    ///<param name="deviceId">The ID of the device(s) to add to the area.</param>
    public void AddDeviceToArea(string areaId, IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "add_device_to_area", null, new HomeassistantAddDeviceToAreaParameters { AreaId = areaId, DeviceId = deviceId });
    }

    ///<summary>Adds an entity to an area. Please note, if the enity is already in an area, it will be removed from the previous area. This will override the area the device, that provides this entity, is in.</summary>
    public void AddEntityToArea(HomeassistantAddEntityToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_entity_to_area", null, data);
    }

    ///<summary>Adds an entity to an area. Please note, if the enity is already in an area, it will be removed from the previous area. This will override the area the device, that provides this entity, is in.</summary>
    ///<param name="areaId">The ID of the area to add the entity to.</param>
    ///<param name="entityId">The ID of the entity (or entities) to add to the area.</param>
    public void AddEntityToArea(string areaId, IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "add_entity_to_area", null, new HomeassistantAddEntityToAreaParameters { AreaId = areaId, EntityId = entityId });
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    ///<summary>Creates a new area on the fly.</summary>
    public void CreateArea(HomeassistantCreateAreaParameters data)
    {
        _haContext.CallService("homeassistant", "create_area", null, data);
    }

    ///<summary>Creates a new area on the fly.</summary>
    ///<param name="name">The name of the area to create.</param>
    ///<param name="aliases">A list of aliases for the area. This is useful if you want to use the area in a different language or different nickname.</param>
    public void CreateArea(string name, object? aliases = null)
    {
        _haContext.CallService("homeassistant", "create_area", null, new HomeassistantCreateAreaParameters { Name = name, Aliases = aliases });
    }

    ///<summary>Deletes all orphaned entities that no longer have an integration that claim/provide them. Please note, if the integration was just removed, it might need a restart for Home Assistant to realize they are orphaned. **WARNING** Entities might have been marked orphaned because an integration is offline or not working since Home Assistant started. Calling this service will delete those entities as well.</summary>
    public void DeleteAllOrphanedEntities()
    {
        _haContext.CallService("homeassistant", "delete_all_orphaned_entities", null);
    }

    ///<summary>Deletes a new area on the fly.</summary>
    public void DeleteArea(HomeassistantDeleteAreaParameters data)
    {
        _haContext.CallService("homeassistant", "delete_area", null, data);
    }

    ///<summary>Deletes a new area on the fly.</summary>
    ///<param name="areaId">The ID of the area to delete.</param>
    public void DeleteArea(string areaId)
    {
        _haContext.CallService("homeassistant", "delete_area", null, new HomeassistantDeleteAreaParameters { AreaId = areaId });
    }

    ///<summary>Disables an integration configuration entry.</summary>
    public void DisableConfigEntry(HomeassistantDisableConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "disable_config_entry", null, data);
    }

    ///<summary>Disables an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to disable.</param>
    public void DisableConfigEntry(object configEntryId)
    {
        _haContext.CallService("homeassistant", "disable_config_entry", null, new HomeassistantDisableConfigEntryParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Disables a device on the fly.</summary>
    public void DisableDevice(HomeassistantDisableDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "disable_device", null, data);
    }

    ///<summary>Disables a device on the fly.</summary>
    ///<param name="deviceId">The device to disable.</param>
    public void DisableDevice(IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "disable_device", null, new HomeassistantDisableDeviceParameters { DeviceId = deviceId });
    }

    ///<summary>Disables an entity (or entities) on the fly.</summary>
    public void DisableEntity(HomeassistantDisableEntityParameters data)
    {
        _haContext.CallService("homeassistant", "disable_entity", null, data);
    }

    ///<summary>Disables an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to disable.</param>
    public void DisableEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "disable_entity", null, new HomeassistantDisableEntityParameters { EntityId = entityId });
    }

    ///<summary>Disables polling for updates for an integration configuration entry.</summary>
    public void DisablePolling(HomeassistantDisablePollingParameters data)
    {
        _haContext.CallService("homeassistant", "disable_polling", null, data);
    }

    ///<summary>Disables polling for updates for an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to disable polling for.</param>
    public void DisablePolling(object configEntryId)
    {
        _haContext.CallService("homeassistant", "disable_polling", null, new HomeassistantDisablePollingParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Enables an integration configuration entry.</summary>
    public void EnableConfigEntry(HomeassistantEnableConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "enable_config_entry", null, data);
    }

    ///<summary>Enables an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to enable.</param>
    public void EnableConfigEntry(object configEntryId)
    {
        _haContext.CallService("homeassistant", "enable_config_entry", null, new HomeassistantEnableConfigEntryParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Enables a device on the fly.</summary>
    public void EnableDevice(HomeassistantEnableDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "enable_device", null, data);
    }

    ///<summary>Enables a device on the fly.</summary>
    ///<param name="deviceId">The device to disable.</param>
    public void EnableDevice(IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "enable_device", null, new HomeassistantEnableDeviceParameters { DeviceId = deviceId });
    }

    ///<summary>Enables an entity (or entities) on the fly.</summary>
    public void EnableEntity(HomeassistantEnableEntityParameters data)
    {
        _haContext.CallService("homeassistant", "enable_entity", null, data);
    }

    ///<summary>Enables an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to enable.</param>
    public void EnableEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "enable_entity", null, new HomeassistantEnableEntityParameters { EntityId = entityId });
    }

    ///<summary>Enables polling for updates for an integration configuration entry.</summary>
    public void EnablePolling(HomeassistantEnablePollingParameters data)
    {
        _haContext.CallService("homeassistant", "enable_polling", null, data);
    }

    ///<summary>Enables polling for updates for an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to enable polling for.</param>
    public void EnablePolling(object configEntryId)
    {
        _haContext.CallService("homeassistant", "enable_polling", null, new HomeassistantEnablePollingParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Hides an entity (or entities) on the fly.</summary>
    public void HideEntity(HomeassistantHideEntityParameters data)
    {
        _haContext.CallService("homeassistant", "hide_entity", null, data);
    }

    ///<summary>Hides an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to hide.</param>
    public void HideEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "hide_entity", null, new HomeassistantHideEntityParameters { EntityId = entityId });
    }

    ///<summary>Ignore all currently discovered devices that are shown on the integrations dashboard. This will not ignore devices that are discovered after this.</summary>
    public void IgnoreAllDiscovered(HomeassistantIgnoreAllDiscoveredParameters data)
    {
        _haContext.CallService("homeassistant", "ignore_all_discovered", null, data);
    }

    ///<summary>Ignore all currently discovered devices that are shown on the integrations dashboard. This will not ignore devices that are discovered after this.</summary>
    ///<param name="domain">The integration domain to ignore all discovered devices for. If not provided, all domains will be considered to be ignored.</param>
    public void IgnoreAllDiscovered(string? domain = null)
    {
        _haContext.CallService("homeassistant", "ignore_all_discovered", null, new HomeassistantIgnoreAllDiscoveredParameters { Domain = domain });
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates()
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null);
    }

    ///<summary>Removes an alias from an area.</summary>
    public void RemoveAliasFromArea(HomeassistantRemoveAliasFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_area", null, data);
    }

    ///<summary>Removes an alias from an area.</summary>
    ///<param name="areaId">The ID of the area to remove the alias from.</param>
    ///<param name="alias">The alias (or list of aliasses) to remove from the area.</param>
    public void RemoveAliasFromArea(string areaId, object @alias)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_area", null, new HomeassistantRemoveAliasFromAreaParameters { AreaId = areaId, Alias = @alias });
    }

    ///<summary>Removes a device from an area. As a device can only be in one area, this call doesn&apos;t need to specify the area.</summary>
    public void RemoveDeviceFromArea(HomeassistantRemoveDeviceFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_device_from_area", null, data);
    }

    ///<summary>Removes a device from an area. As a device can only be in one area, this call doesn&apos;t need to specify the area.</summary>
    ///<param name="deviceId">The ID of the device to remove the area from.</param>
    public void RemoveDeviceFromArea(IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "remove_device_from_area", null, new HomeassistantRemoveDeviceFromAreaParameters { DeviceId = deviceId });
    }

    ///<summary>Removes an entity from an area. As an entity can only be in one area, this call doesn&apos;t need to specify the area. Please note, the entity will still be in the area of the device that provides it after this call.</summary>
    public void RemoveEntityFromArea(HomeassistantRemoveEntityFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_entity_from_area", null, data);
    }

    ///<summary>Removes an entity from an area. As an entity can only be in one area, this call doesn&apos;t need to specify the area. Please note, the entity will still be in the area of the device that provides it after this call.</summary>
    ///<param name="entityId">The ID of the entity (or entities) to remove the area from.</param>
    public void RemoveEntityFromArea(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "remove_entity_from_area", null, new HomeassistantRemoveEntityFromAreaParameters { EntityId = entityId });
    }

    ///<summary>Restart the Home Assistant service.</summary>
    public void Restart(HomeassistantRestartParameters data)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Restart the Home Assistant service.</summary>
    ///<param name="safeMode">If the restart should be done in safe mode. This will disable all custom integrations and frontend modules.</param>
    ///<param name="force">Force the restart. WARNING! This will not gracefully shutdown Home Assistant, it will skip configuration checks and ignore running database migrations. Only use this if you know what you are doing.</param>
    public void Restart(bool? safeMode = null, bool? force = null)
    {
        _haContext.CallService("homeassistant", "restart", null, new HomeassistantRestartParameters { SafeMode = safeMode, Force = force });
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Sets aliases for an area. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    public void SetAreaAliases(HomeassistantSetAreaAliasesParameters data)
    {
        _haContext.CallService("homeassistant", "set_area_aliases", null, data);
    }

    ///<summary>Sets aliases for an area. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    ///<param name="areaId">The ID of the area to set the aliases for.</param>
    ///<param name="aliases">The aliases to set for the area.</param>
    public void SetAreaAliases(string areaId, object aliases)
    {
        _haContext.CallService("homeassistant", "set_area_aliases", null, new HomeassistantSetAreaAliasesParameters { AreaId = areaId, Aliases = aliases });
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location. eg: 120</param>
    public void SetLocation(long latitude, long longitude, long? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic service to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Unhides an entity (or entities) on the fly.</summary>
    public void UnhideEntity(HomeassistantUnhideEntityParameters data)
    {
        _haContext.CallService("homeassistant", "unhide_entity", null, data);
    }

    ///<summary>Unhides an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to unhide.</param>
    public void UnhideEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "unhide_entity", null, new HomeassistantUnhideEntityParameters { EntityId = entityId });
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "update_entity", target);
    }

    ///<summary>Updates an entity&apos;s ID on the fly.</summary>
    public void UpdateEntityId(HomeassistantUpdateEntityIdParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity_id", null, data);
    }

    ///<summary>Updates an entity&apos;s ID on the fly.</summary>
    ///<param name="entityId">The entity/entities to update.</param>
    ///<param name="newEntityId">The new ID for the entity</param>
    public void UpdateEntityId(string entityId, string newEntityId)
    {
        _haContext.CallService("homeassistant", "update_entity_id", null, new HomeassistantUpdateEntityIdParameters { EntityId = entityId, NewEntityId = newEntityId });
    }
}

public partial record HomeassistantAddAliasToAreaParameters
{
    ///<summary>The ID of the area to add the alias to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The alias (or list of aliasses) to add to the area.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantAddDeviceToAreaParameters
{
    ///<summary>The ID of the area to add the device to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The ID of the device(s) to add to the area.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantAddEntityToAreaParameters
{
    ///<summary>The ID of the area to add the entity to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The ID of the entity (or entities) to add to the area.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantCreateAreaParameters
{
    ///<summary>The name of the area to create.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>A list of aliases for the area. This is useful if you want to use the area in a different language or different nickname.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantDeleteAreaParameters
{
    ///<summary>The ID of the area to delete.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }
}

public partial record HomeassistantDisableConfigEntryParameters
{
    ///<summary>The integration configuration entry to disable.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantDisableDeviceParameters
{
    ///<summary>The device to disable.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantDisableEntityParameters
{
    ///<summary>The entity/entities to disable.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantDisablePollingParameters
{
    ///<summary>The integration configuration entry to disable polling for.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantEnableConfigEntryParameters
{
    ///<summary>The integration configuration entry to enable.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantEnableDeviceParameters
{
    ///<summary>The device to disable.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantEnableEntityParameters
{
    ///<summary>The entity/entities to enable.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantEnablePollingParameters
{
    ///<summary>The integration configuration entry to enable polling for.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantHideEntityParameters
{
    ///<summary>The entity/entities to hide.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantIgnoreAllDiscoveredParameters
{
    ///<summary>The integration domain to ignore all discovered devices for. If not provided, all domains will be considered to be ignored.</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantRemoveAliasFromAreaParameters
{
    ///<summary>The ID of the area to remove the alias from.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The alias (or list of aliasses) to remove from the area.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantRemoveDeviceFromAreaParameters
{
    ///<summary>The ID of the device to remove the area from.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantRemoveEntityFromAreaParameters
{
    ///<summary>The ID of the entity (or entities) to remove the area from.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantRestartParameters
{
    ///<summary>If the restart should be done in safe mode. This will disable all custom integrations and frontend modules.</summary>
    [JsonPropertyName("safe_mode")]
    public bool? SafeMode { get; init; }

    ///<summary>Force the restart. WARNING! This will not gracefully shutdown Home Assistant, it will skip configuration checks and ignore running database migrations. Only use this if you know what you are doing.</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record HomeassistantSetAreaAliasesParameters
{
    ///<summary>The ID of the area to set the aliases for.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The aliases to set for the area.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Elevation of your location. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public long? Elevation { get; init; }
}

public partial record HomeassistantUnhideEntityParameters
{
    ///<summary>The entity/entities to unhide.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantUpdateEntityIdParameters
{
    ///<summary>The entity/entities to update.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The new ID for the entity</summary>
    [JsonPropertyName("new_entity_id")]
    public string? NewEntityId { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, InputNumberDecrementParameters data)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public void Decrement(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("input_number", "decrement", target, new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, InputNumberIncrementParameters data)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public void Increment(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("input_number", "increment", target, new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Max(ServiceTarget target)
    {
        _haContext.CallService("input_number", "max", target);
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Min(ServiceTarget target)
    {
        _haContext.CallService("input_number", "min", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberDecrementParameters
{
    ///<summary>The amount to decrease the input number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record InputNumberIncrementParameters
{
    ///<summary>The amount to increase the input number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Random(ServiceTarget target, InputSelectRandomParameters data)
    {
        _haContext.CallService("input_select", "random", target, data);
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public void Random(ServiceTarget target, object? options = null)
    {
        _haContext.CallService("input_select", "random", target, new InputSelectRandomParameters { Options = options });
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Shuffles the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void Shuffle(ServiceTarget target)
    {
        _haContext.CallService("input_select", "shuffle", target);
    }

    ///<summary>Sorts the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void Sort(ServiceTarget target)
    {
        _haContext.CallService("input_select", "sort", target);
    }
}

public partial record InputSelectRandomParameters
{
    ///<summary>Limits the options to select from. If not provided, all options will be considered.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LawnMowerServices
{
    private readonly IHaContext _haContext;
    public LawnMowerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Dock(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "dock", target);
    }

    ///<summary>Pauses the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "pause", target);
    }

    ///<summary>Starts the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartMowing(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "start_mowing", target);
    }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public object? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LocaltuyaServices
{
    private readonly IHaContext _haContext;
    public LocaltuyaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload localtuya and reconnect to all devices.</summary>
    public void Reload()
    {
        _haContext.CallService("localtuya", "reload", null);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    public void SetDp(LocaltuyaSetDpParameters data)
    {
        _haContext.CallService("localtuya", "set_dp", null, data);
    }

    ///<summary>Change the value of a datapoint (DP)</summary>
    ///<param name="deviceId">Device ID of device to change datapoint value for eg: 11100118278aab4de001</param>
    ///<param name="dp">Datapoint index eg: 1</param>
    ///<param name="value">New value to set eg: False</param>
    public void SetDp(object? deviceId = null, object? dp = null, object? value = null)
    {
        _haContext.CallService("localtuya", "set_dp", null, new LocaltuyaSetDpParameters { DeviceId = deviceId, Dp = dp, Value = value });
    }
}

public partial record LocaltuyaSetDpParameters
{
    ///<summary>Device ID of device to change datapoint value for eg: 11100118278aab4de001</summary>
    [JsonPropertyName("device_id")]
    public object? DeviceId { get; init; }

    ///<summary>Datapoint index eg: 1</summary>
    [JsonPropertyName("dp")]
    public object? Dp { get; init; }

    ///<summary>New value to set eg: False</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class LovelaceServices
{
    private readonly IHaContext _haContext;
    public LovelaceServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads dashboard resources from the YAML-configuration.</summary>
    public void ReloadResources()
    {
        _haContext.CallService("lovelace", "reload_resources", null);
    }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    public void MovieTime()
    {
        _haContext.CallService("netdaemon", "movie_time", null);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }

    public void SortShoppingList()
    {
        _haContext.CallService("netdaemon", "sort_shopping_list", null);
    }

    public void TrainingStart()
    {
        _haContext.CallService("netdaemon", "training_start", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_fantenphone integration.</summary>
    public void MobileAppFantenphone(NotifyMobileAppFantenphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_fantenphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_fantenphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppFantenphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_fantenphone", null, new NotifyMobileAppFantenphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_iphone_philipp integration.</summary>
    public void MobileAppIphonePhilipp(NotifyMobileAppIphonePhilippParameters data)
    {
        _haContext.CallService("notify", "mobile_app_iphone_philipp", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_iphone_philipp integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIphonePhilipp(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_iphone_philipp", null, new NotifyMobileAppIphonePhilippParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the o365_email_philipp integration.</summary>
    public void O365EmailPhilipp(NotifyO365EmailPhilippParameters data)
    {
        _haContext.CallService("notify", "o365_email_philipp", null, data);
    }

    ///<summary>Sends a notification message using the o365_email_philipp integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void O365EmailPhilipp(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "o365_email_philipp", null, new NotifyO365EmailPhilippParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the ourphones service.</summary>
    public void Ourphones(NotifyOurphonesParameters data)
    {
        _haContext.CallService("notify", "ourphones", null, data);
    }

    ///<summary>Sends a notification message using the ourphones service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Ourphones(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "ourphones", null, new NotifyOurphonesParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }
}

public partial record NotifyMobileAppFantenphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIphonePhilippParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyO365EmailPhilippParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyOurphonesParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NukiNgServices
{
    private readonly IHaContext _haContext;
    public NukiNgServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>The callbacks currently set are exposed as attributes of the &apos;Bridge Callback Set&apos; entity</summary>
    ///<param name="target">The target for this service call</param>
    public void BridgeDeleteCallback(ServiceTarget target, NukiNgBridgeDeleteCallbackParameters data)
    {
        _haContext.CallService("nuki_ng", "bridge_delete_callback", target, data);
    }

    ///<summary>The callbacks currently set are exposed as attributes of the &apos;Bridge Callback Set&apos; entity</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">URL to delete eg: http://192.168.0.0/callback</param>
    public void BridgeDeleteCallback(ServiceTarget target, string command)
    {
        _haContext.CallService("nuki_ng", "bridge_delete_callback", target, new NukiNgBridgeDeleteCallbackParameters { Command = command });
    }

    ///<param name="target">The target for this service call</param>
    public void BridgeFwupdate(ServiceTarget target)
    {
        _haContext.CallService("nuki_ng", "bridge_fwupdate", target);
    }

    ///<param name="target">The target for this service call</param>
    public void BridgeReboot(ServiceTarget target)
    {
        _haContext.CallService("nuki_ng", "bridge_reboot", target);
    }

    ///<param name="target">The target for this service call</param>
    public void ExecuteAction(ServiceTarget target, NukiNgExecuteActionParameters data)
    {
        _haContext.CallService("nuki_ng", "execute_action", target, data);
    }

    ///<param name="target">The target for this service call</param>
    ///<param name="action">Lock action to execute eg: unlock</param>
    public void ExecuteAction(ServiceTarget target, object action)
    {
        _haContext.CallService("nuki_ng", "execute_action", target, new NukiNgExecuteActionParameters { Action = action });
    }
}

public partial record NukiNgBridgeDeleteCallbackParameters
{
    ///<summary>URL to delete eg: http://192.168.0.0/callback</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }
}

public partial record NukiNgExecuteActionParameters
{
    ///<summary>Lock action to execute eg: unlock</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, NumberDecrementParameters data)
    {
        _haContext.CallService("number", "decrement", target, data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public void Decrement(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("number", "decrement", target, new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, NumberIncrementParameters data)
    {
        _haContext.CallService("number", "increment", target, data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public void Increment(ServiceTarget target, long? amount = null)
    {
        _haContext.CallService("number", "increment", target, new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Max(ServiceTarget target)
    {
        _haContext.CallService("number", "max", target);
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Min(ServiceTarget target)
    {
        _haContext.CallService("number", "min", target);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberDecrementParameters
{
    ///<summary>The amount to decrease the number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record NumberIncrementParameters
{
    ///<summary>The amount to increase the number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public long? Amount { get; init; }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class O365Services
{
    private readonly IHaContext _haContext;
    public O365Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Complete a ToDo</summary>
    ///<param name="target">The target for this service call</param>
    public void CompleteTodo(ServiceTarget target, O365CompleteTodoParameters data)
    {
        _haContext.CallService("o365", "complete_todo", target, data);
    }

    ///<summary>Complete a ToDo</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="completed">Set whether todo is completed or not eg: True</param>
    public void CompleteTodo(ServiceTarget target, string todoId, bool completed)
    {
        _haContext.CallService("o365", "complete_todo", target, new O365CompleteTodoParameters { TodoId = todoId, Completed = completed });
    }

    ///<summary>Create new calendar event</summary>
    ///<param name="target">The target for this service call</param>
    public void CreateCalendarEvent(ServiceTarget target, O365CreateCalendarEventParameters data)
    {
        _haContext.CallService("o365", "create_calendar_event", target, data);
    }

    ///<summary>Create new calendar event</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="subject">The subject of the created event eg: Clean up the garage</param>
    ///<param name="start">The start time of the event eg: 2025-01-01T12:00:00+0000</param>
    ///<param name="end">The end time of the event eg: 2025-01-01T12:30:00+0000</param>
    ///<param name="body">The body text for the event (optional) eg: Remember to also clean out the gutters</param>
    ///<param name="location">The location for the event (optional) eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</param>
    ///<param name="categories">list of categories for the event (optional)</param>
    ///<param name="sensitivity">The sensitivity for the event (optional) [Normal, Personal, Private, Confidential] eg: normal</param>
    ///<param name="showAs">Show event as (optional) [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</param>
    ///<param name="isAllDay">Set whether event is all day (optional) eg: False</param>
    ///<param name="attendees">list of attendees formatted as email: example@example.com type: Required, Optional, or Resource (optional)</param>
    public void CreateCalendarEvent(ServiceTarget target, string subject, string start, string end, string? body = null, string? location = null, string? categories = null, object? sensitivity = null, object? showAs = null, bool? isAllDay = null, object? attendees = null)
    {
        _haContext.CallService("o365", "create_calendar_event", target, new O365CreateCalendarEventParameters { Subject = subject, Start = start, End = end, Body = body, Location = location, Categories = categories, Sensitivity = sensitivity, ShowAs = showAs, IsAllDay = isAllDay, Attendees = attendees });
    }

    ///<summary>Delete a ToDo</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteTodo(ServiceTarget target, O365DeleteTodoParameters data)
    {
        _haContext.CallService("o365", "delete_todo", target, data);
    }

    ///<summary>Delete a ToDo</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    public void DeleteTodo(ServiceTarget target, string todoId)
    {
        _haContext.CallService("o365", "delete_todo", target, new O365DeleteTodoParameters { TodoId = todoId });
    }

    ///<summary>Modify existing calendar event, all properties except event_id are optional.</summary>
    ///<param name="target">The target for this service call</param>
    public void ModifyCalendarEvent(ServiceTarget target, O365ModifyCalendarEventParameters data)
    {
        _haContext.CallService("o365", "modify_calendar_event", target, data);
    }

    ///<summary>Modify existing calendar event, all properties except event_id are optional.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="eventId">ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="subject">The subject of the created event eg: Clean up the garage</param>
    ///<param name="start">The start time of the event eg: 2025-01-01T12:00:00+0000</param>
    ///<param name="end">The end time of the event eg: 2025-01-01T12:30:00+0000</param>
    ///<param name="body">The body text for the event eg: Remember to also clean out the gutters</param>
    ///<param name="location">The location for the event eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</param>
    ///<param name="categories">list of categories for the event</param>
    ///<param name="sensitivity">The sensitivity for the event[Normal, Personal, Private, Confidential] eg: normal</param>
    ///<param name="showAs">Show event as [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</param>
    ///<param name="isAllDay">Set whether event is all day eg: False</param>
    ///<param name="attendees">list of attendees formatted as email: example@example.com type: Required, Optional, or Resource</param>
    public void ModifyCalendarEvent(ServiceTarget target, string eventId, string? subject = null, string? start = null, string? end = null, string? body = null, string? location = null, string? categories = null, object? sensitivity = null, object? showAs = null, bool? isAllDay = null, object? attendees = null)
    {
        _haContext.CallService("o365", "modify_calendar_event", target, new O365ModifyCalendarEventParameters { EventId = eventId, Subject = subject, Start = start, End = end, Body = body, Location = location, Categories = categories, Sensitivity = sensitivity, ShowAs = showAs, IsAllDay = isAllDay, Attendees = attendees });
    }

    ///<summary>Create a new ToDo</summary>
    ///<param name="target">The target for this service call</param>
    public void NewTodo(ServiceTarget target, O365NewTodoParameters data)
    {
        _haContext.CallService("o365", "new_todo", target, data);
    }

    ///<summary>Create a new ToDo</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="subject">The subject of the todo eg: Pick up the mail</param>
    ///<param name="description">Description of the todo eg: Walk to the post box and collect the mail</param>
    ///<param name="due">When the todo is due by eg: YYYY-MM-DD</param>
    ///<param name="reminder">When a reminder is needed eg: 2025-01-01T12:00:00+0000</param>
    public void NewTodo(ServiceTarget target, string subject, string? description = null, object? due = null, object? reminder = null)
    {
        _haContext.CallService("o365", "new_todo", target, new O365NewTodoParameters { Subject = subject, Description = description, Due = due, Reminder = reminder });
    }

    ///<summary>Delete calendar event</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveCalendarEvent(ServiceTarget target, O365RemoveCalendarEventParameters data)
    {
        _haContext.CallService("o365", "remove_calendar_event", target, data);
    }

    ///<summary>Delete calendar event</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="eventId">ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    public void RemoveCalendarEvent(ServiceTarget target, string eventId)
    {
        _haContext.CallService("o365", "remove_calendar_event", target, new O365RemoveCalendarEventParameters { EventId = eventId });
    }

    ///<summary>Respond to calendar event/invite</summary>
    ///<param name="target">The target for this service call</param>
    public void RespondCalendarEvent(ServiceTarget target, O365RespondCalendarEventParameters data)
    {
        _haContext.CallService("o365", "respond_calendar_event", target, data);
    }

    ///<summary>Respond to calendar event/invite</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="eventId">ID for event, can be found as an attribute on your calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="response">The response to the invite [Accept, Tentative, Decline] eg: Decline</param>
    ///<param name="message">The response message to the invite (Optional) eg: I cannot attend this meeting</param>
    ///<param name="sendResponse">Send the response to the organizer (Optional) eg: True</param>
    public void RespondCalendarEvent(ServiceTarget target, string eventId, string response, string? message = null, bool? sendResponse = null)
    {
        _haContext.CallService("o365", "respond_calendar_event", target, new O365RespondCalendarEventParameters { EventId = eventId, Response = response, Message = message, SendResponse = sendResponse });
    }

    ///<summary>Scan for newly available calendars</summary>
    public void ScanForCalendars()
    {
        _haContext.CallService("o365", "scan_for_calendars", null);
    }

    ///<summary>Scan for newly available todo lists</summary>
    public void ScanForTodoLists()
    {
        _haContext.CallService("o365", "scan_for_todo_lists", null);
    }

    ///<summary>Update a ToDo</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateTodo(ServiceTarget target, O365UpdateTodoParameters data)
    {
        _haContext.CallService("o365", "update_todo", target, data);
    }

    ///<summary>Update a ToDo</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="subject">The subject of the todo eg: Pick up the mail</param>
    ///<param name="description">Description of the todo eg: Walk to the post box and collect the mail</param>
    ///<param name="due">When the todo is due by eg: 2025-01-01</param>
    ///<param name="reminder">When a reminder is needed eg: 2025-01-01T12:00:00+0000</param>
    public void UpdateTodo(ServiceTarget target, string todoId, string? subject = null, string? description = null, object? due = null, object? reminder = null)
    {
        _haContext.CallService("o365", "update_todo", target, new O365UpdateTodoParameters { TodoId = todoId, Subject = subject, Description = description, Due = due, Reminder = reminder });
    }
}

public partial record O365CompleteTodoParameters
{
    ///<summary>ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</summary>
    [JsonPropertyName("todo_id")]
    public string? TodoId { get; init; }

    ///<summary>Set whether todo is completed or not eg: True</summary>
    [JsonPropertyName("completed")]
    public bool? Completed { get; init; }
}

public partial record O365CreateCalendarEventParameters
{
    ///<summary>The subject of the created event eg: Clean up the garage</summary>
    [JsonPropertyName("subject")]
    public string? Subject { get; init; }

    ///<summary>The start time of the event eg: 2025-01-01T12:00:00+0000</summary>
    [JsonPropertyName("start")]
    public string? Start { get; init; }

    ///<summary>The end time of the event eg: 2025-01-01T12:30:00+0000</summary>
    [JsonPropertyName("end")]
    public string? End { get; init; }

    ///<summary>The body text for the event (optional) eg: Remember to also clean out the gutters</summary>
    [JsonPropertyName("body")]
    public string? Body { get; init; }

    ///<summary>The location for the event (optional) eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }

    ///<summary>list of categories for the event (optional)</summary>
    [JsonPropertyName("categories")]
    public string? Categories { get; init; }

    ///<summary>The sensitivity for the event (optional) [Normal, Personal, Private, Confidential] eg: normal</summary>
    [JsonPropertyName("sensitivity")]
    public object? Sensitivity { get; init; }

    ///<summary>Show event as (optional) [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</summary>
    [JsonPropertyName("show_as")]
    public object? ShowAs { get; init; }

    ///<summary>Set whether event is all day (optional) eg: False</summary>
    [JsonPropertyName("is_all_day")]
    public bool? IsAllDay { get; init; }

    ///<summary>list of attendees formatted as email: example@example.com type: Required, Optional, or Resource (optional)</summary>
    [JsonPropertyName("attendees")]
    public object? Attendees { get; init; }
}

public partial record O365DeleteTodoParameters
{
    ///<summary>ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</summary>
    [JsonPropertyName("todo_id")]
    public string? TodoId { get; init; }
}

public partial record O365ModifyCalendarEventParameters
{
    ///<summary>ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</summary>
    [JsonPropertyName("event_id")]
    public string? EventId { get; init; }

    ///<summary>The subject of the created event eg: Clean up the garage</summary>
    [JsonPropertyName("subject")]
    public string? Subject { get; init; }

    ///<summary>The start time of the event eg: 2025-01-01T12:00:00+0000</summary>
    [JsonPropertyName("start")]
    public string? Start { get; init; }

    ///<summary>The end time of the event eg: 2025-01-01T12:30:00+0000</summary>
    [JsonPropertyName("end")]
    public string? End { get; init; }

    ///<summary>The body text for the event eg: Remember to also clean out the gutters</summary>
    [JsonPropertyName("body")]
    public string? Body { get; init; }

    ///<summary>The location for the event eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</summary>
    [JsonPropertyName("location")]
    public string? Location { get; init; }

    ///<summary>list of categories for the event</summary>
    [JsonPropertyName("categories")]
    public string? Categories { get; init; }

    ///<summary>The sensitivity for the event[Normal, Personal, Private, Confidential] eg: normal</summary>
    [JsonPropertyName("sensitivity")]
    public object? Sensitivity { get; init; }

    ///<summary>Show event as [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</summary>
    [JsonPropertyName("show_as")]
    public object? ShowAs { get; init; }

    ///<summary>Set whether event is all day eg: False</summary>
    [JsonPropertyName("is_all_day")]
    public bool? IsAllDay { get; init; }

    ///<summary>list of attendees formatted as email: example@example.com type: Required, Optional, or Resource</summary>
    [JsonPropertyName("attendees")]
    public object? Attendees { get; init; }
}

public partial record O365NewTodoParameters
{
    ///<summary>The subject of the todo eg: Pick up the mail</summary>
    [JsonPropertyName("subject")]
    public string? Subject { get; init; }

    ///<summary>Description of the todo eg: Walk to the post box and collect the mail</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>When the todo is due by eg: YYYY-MM-DD</summary>
    [JsonPropertyName("due")]
    public object? Due { get; init; }

    ///<summary>When a reminder is needed eg: 2025-01-01T12:00:00+0000</summary>
    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }
}

public partial record O365RemoveCalendarEventParameters
{
    ///<summary>ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</summary>
    [JsonPropertyName("event_id")]
    public string? EventId { get; init; }
}

public partial record O365RespondCalendarEventParameters
{
    ///<summary>ID for event, can be found as an attribute on your calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</summary>
    [JsonPropertyName("event_id")]
    public string? EventId { get; init; }

    ///<summary>The response to the invite [Accept, Tentative, Decline] eg: Decline</summary>
    [JsonPropertyName("response")]
    public string? Response { get; init; }

    ///<summary>The response message to the invite (Optional) eg: I cannot attend this meeting</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Send the response to the organizer (Optional) eg: True</summary>
    [JsonPropertyName("send_response")]
    public bool? SendResponse { get; init; }
}

public partial record O365UpdateTodoParameters
{
    ///<summary>ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</summary>
    [JsonPropertyName("todo_id")]
    public string? TodoId { get; init; }

    ///<summary>The subject of the todo eg: Pick up the mail</summary>
    [JsonPropertyName("subject")]
    public string? Subject { get; init; }

    ///<summary>Description of the todo eg: Walk to the post box and collect the mail</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>When the todo is due by eg: 2025-01-01</summary>
    [JsonPropertyName("due")]
    public object? Due { get; init; }

    ///<summary>When a reminder is needed eg: 2025-01-01T12:00:00+0000</summary>
    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }
}

public partial class OpenplantbookServices
{
    private readonly IHaContext _haContext;
    public OpenplantbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clean up the cached entries from Openplantbook</summary>
    public void CleanCache(OpenplantbookCleanCacheParameters data)
    {
        _haContext.CallService("openplantbook", "clean_cache", null, data);
    }

    ///<summary>Clean up the cached entries from Openplantbook</summary>
    ///<param name="hours">Minimum age of entries to clean from the cache. Default to 24 hours if not set eg: 6</param>
    public void CleanCache(long? hours = null)
    {
        _haContext.CallService("openplantbook", "clean_cache", null, new OpenplantbookCleanCacheParameters { Hours = hours });
    }

    ///<summary>Fetches data for a single species</summary>
    public void Get(OpenplantbookGetParameters data)
    {
        _haContext.CallService("openplantbook", "get", null, data);
    }

    ///<summary>Fetches data for a single species</summary>
    ///<param name="species">The name of the species exactly as written in &quot;pid&quot; or &quot;scientific species&quot; in Openplantbook eg: coleus &apos;marble&apos;</param>
    public void Get(string species)
    {
        _haContext.CallService("openplantbook", "get", null, new OpenplantbookGetParameters { Species = species });
    }

    ///<summary>Searches Openplantbook for a plant</summary>
    public void Search(OpenplantbookSearchParameters data)
    {
        _haContext.CallService("openplantbook", "search", null, data);
    }

    ///<summary>Searches Openplantbook for a plant</summary>
    ///<param name="alias">The string to search for eg: Capsicum</param>
    public void Search(string @alias)
    {
        _haContext.CallService("openplantbook", "search", null, new OpenplantbookSearchParameters { Alias = @alias });
    }
}

public partial record OpenplantbookCleanCacheParameters
{
    ///<summary>Minimum age of entries to clean from the cache. Default to 24 hours if not set eg: 6</summary>
    [JsonPropertyName("hours")]
    public long? Hours { get; init; }
}

public partial record OpenplantbookGetParameters
{
    ///<summary>The name of the species exactly as written in &quot;pid&quot; or &quot;scientific species&quot; in Openplantbook eg: coleus &apos;marble&apos;</summary>
    [JsonPropertyName("species")]
    public string? Species { get; init; }
}

public partial record OpenplantbookSearchParameters
{
    ///<summary>The string to search for eg: Capsicum</summary>
    [JsonPropertyName("alias")]
    public string? Alias { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a device tracker to a person.</summary>
    public void AddDeviceTracker(PersonAddDeviceTrackerParameters data)
    {
        _haContext.CallService("person", "add_device_tracker", null, data);
    }

    ///<summary>Add a device tracker to a person.</summary>
    ///<param name="entityId">The person entity ID to add the device tracker to.</param>
    ///<param name="deviceTracker">The device tracker entity ID to add to the person.</param>
    public void AddDeviceTracker(string entityId, IEnumerable<string> deviceTracker)
    {
        _haContext.CallService("person", "add_device_tracker", null, new PersonAddDeviceTrackerParameters { EntityId = entityId, DeviceTracker = deviceTracker });
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }

    ///<summary>Remove a device tracker from a person.</summary>
    public void RemoveDeviceTracker(PersonRemoveDeviceTrackerParameters data)
    {
        _haContext.CallService("person", "remove_device_tracker", null, data);
    }

    ///<summary>Remove a device tracker from a person.</summary>
    ///<param name="entityId">The person entity ID to remove the device tracker from.</param>
    ///<param name="deviceTracker">The device tracker entity ID to remove from the person.</param>
    public void RemoveDeviceTracker(string entityId, IEnumerable<string> deviceTracker)
    {
        _haContext.CallService("person", "remove_device_tracker", null, new PersonRemoveDeviceTrackerParameters { EntityId = entityId, DeviceTracker = deviceTracker });
    }
}

public partial record PersonAddDeviceTrackerParameters
{
    ///<summary>The person entity ID to add the device tracker to.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The device tracker entity ID to add to the person.</summary>
    [JsonPropertyName("device_tracker")]
    public IEnumerable<string>? DeviceTracker { get; init; }
}

public partial record PersonRemoveDeviceTrackerParameters
{
    ///<summary>The person entity ID to remove the device tracker from.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The device tracker entity ID to remove from the person.</summary>
    [JsonPropertyName("device_tracker")]
    public IEnumerable<string>? DeviceTracker { get; init; }
}

public partial class PlantServices
{
    private readonly IHaContext _haContext;
    public PlantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Replaces the source for a plant sensor.</summary>
    public void ReplaceSensor(PlantReplaceSensorParameters data)
    {
        _haContext.CallService("plant", "replace_sensor", null, data);
    }

    ///<summary>Replaces the source for a plant sensor.</summary>
    ///<param name="meterEntity">The meter entity to replace the sensor for. eg: plant.my_plant_current_temperature</param>
    ///<param name="newSensor">Entity id of the new sensor. Leave blank to remove sensor. eg: sensor.new_temperature_outdoor</param>
    public void ReplaceSensor(string meterEntity, string? newSensor = null)
    {
        _haContext.CallService("plant", "replace_sensor", null, new PlantReplaceSensorParameters { MeterEntity = meterEntity, NewSensor = newSensor });
    }
}

public partial record PlantReplaceSensorParameters
{
    ///<summary>The meter entity to replace the sensor for. eg: plant.my_plant_current_temperature</summary>
    [JsonPropertyName("meter_entity")]
    public string? MeterEntity { get; init; }

    ///<summary>Entity id of the new sensor. Leave blank to remove sensor. eg: sensor.new_temperature_outdoor</summary>
    [JsonPropertyName("new_sensor")]
    public string? NewSensor { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Import long-term statistics.</summary>
    public void ImportStatistics(RecorderImportStatisticsParameters data)
    {
        _haContext.CallService("recorder", "import_statistics", null, data);
    }

    ///<summary>Import long-term statistics.</summary>
    ///<param name="statisticId">The statistics ID (entity ID) to import for.</param>
    ///<param name="name">The name of the statistics.</param>
    ///<param name="source">The source of the statistics data.</param>
    ///<param name="unitOfMeasurement">The unit of measurement of the statistics.</param>
    ///<param name="hasMean">If the statistics has a mean value.</param>
    ///<param name="hasSum">If the statistics has a sum value.</param>
    ///<param name="stats">A list of mappings/dictionaries with statistics to import. The dictionaries must contain a &quot;start&quot; key with a datetime string other valid options are &quot;mean&quot;, &quot;sum&quot;, &quot;min&quot;, &quot;max&quot;, &quot;last_reset&quot;, and &quot;state&quot;. All of those are optional and either an integer or a float, except for &quot;last_reset&quot; which is a datetime string.</param>
    public void ImportStatistics(string statisticId, string source, bool hasMean, bool hasSum, object stats, string? name = null, string? unitOfMeasurement = null)
    {
        _haContext.CallService("recorder", "import_statistics", null, new RecorderImportStatisticsParameters { StatisticId = statisticId, Name = name, Source = source, UnitOfMeasurement = unitOfMeasurement, HasMean = hasMean, HasSum = hasSum, Stats = stats });
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderImportStatisticsParameters
{
    ///<summary>The statistics ID (entity ID) to import for.</summary>
    [JsonPropertyName("statistic_id")]
    public string? StatisticId { get; init; }

    ///<summary>The name of the statistics.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The source of the statistics data.</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }

    ///<summary>The unit of measurement of the statistics.</summary>
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    ///<summary>If the statistics has a mean value.</summary>
    [JsonPropertyName("has_mean")]
    public bool? HasMean { get; init; }

    ///<summary>If the statistics has a sum value.</summary>
    [JsonPropertyName("has_sum")]
    public bool? HasSum { get; init; }

    ///<summary>A list of mappings/dictionaries with statistics to import. The dictionaries must contain a &quot;start&quot; key with a datetime string other valid options are &quot;mean&quot;, &quot;sum&quot;, &quot;min&quot;, &quot;max&quot;, &quot;last_reset&quot;, and &quot;state&quot;. All of those are optional and either an integer or a float, except for &quot;last_reset&quot; which is a datetime string.</summary>
    [JsonPropertyName("stats")]
    public object? Stats { get; init; }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RepairsServices
{
    private readonly IHaContext _haContext;
    public RepairsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually create and raise a issue in Home Assistant repairs.</summary>
    public void Create(RepairsCreateParameters data)
    {
        _haContext.CallService("repairs", "create", null, data);
    }

    ///<summary>Manually create and raise a issue in Home Assistant repairs.</summary>
    ///<param name="title">The title of the issue.</param>
    ///<param name="description">The description of the issue. Supports Markdown.</param>
    ///<param name="issueId">The issue can have an identifier, which allows you to cancel it later with that ID if needed. It also prevent duplicate issues to be created. If not provided, a random ID will be generated.</param>
    ///<param name="domain">This field can be used to set the domain of the issue. For example, by default (if not set), it will use &quot;spook&quot;. This causes Spook to be shown in the logo/image of the issue. If you set it to &quot;homeassistant&quot;, the Home Assistant logo will be used, or use &quot;hue&quot;, &quot;zwave_js&quot;, &quot;mqtt&quot;, etc. to use the logo of that integration.</param>
    ///<param name="severity">The severity of the issue. This will be used to determine the priority of the issue. If not set, &quot;warning&quot; will be used</param>
    ///<param name="persistent">If the issue should be persistent, which means it will survive restarts of Home Assistant. By default, issues are not persistent.</param>
    public void Create(string title, string description, string? issueId = null, string? domain = null, object? severity = null, bool? persistent = null)
    {
        _haContext.CallService("repairs", "create", null, new RepairsCreateParameters { Title = title, Description = description, IssueId = issueId, Domain = domain, Severity = severity, Persistent = persistent });
    }

    ///<summary>Ignore all issues currently raised in Home Assistant Repairs.</summary>
    public void IgnoreAll()
    {
        _haContext.CallService("repairs", "ignore_all", null);
    }

    ///<summary>Removes a manually created Home Assistant repairs issue. This service can only remove issues created with the `repairs_create` service.</summary>
    public void Remove(RepairsRemoveParameters data)
    {
        _haContext.CallService("repairs", "remove", null, data);
    }

    ///<summary>Removes a manually created Home Assistant repairs issue. This service can only remove issues created with the `repairs_create` service.</summary>
    ///<param name="issueId">The issue ID to remove.</param>
    public void Remove(string issueId)
    {
        _haContext.CallService("repairs", "remove", null, new RepairsRemoveParameters { IssueId = issueId });
    }

    ///<summary>Unignore all issues currently raised in Home Assistant Repairs.</summary>
    public void UnignoreAll()
    {
        _haContext.CallService("repairs", "unignore_all", null);
    }
}

public partial record RepairsCreateParameters
{
    ///<summary>The title of the issue.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>The description of the issue. Supports Markdown.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The issue can have an identifier, which allows you to cancel it later with that ID if needed. It also prevent duplicate issues to be created. If not provided, a random ID will be generated.</summary>
    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }

    ///<summary>This field can be used to set the domain of the issue. For example, by default (if not set), it will use &quot;spook&quot;. This causes Spook to be shown in the logo/image of the issue. If you set it to &quot;homeassistant&quot;, the Home Assistant logo will be used, or use &quot;hue&quot;, &quot;zwave_js&quot;, &quot;mqtt&quot;, etc. to use the logo of that integration.</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }

    ///<summary>The severity of the issue. This will be used to determine the priority of the issue. If not set, &quot;warning&quot; will be used</summary>
    [JsonPropertyName("severity")]
    public object? Severity { get; init; }

    ///<summary>If the issue should be persistent, which means it will survive restarts of Home Assistant. By default, issues are not persistent.</summary>
    [JsonPropertyName("persistent")]
    public bool? Persistent { get; init; }
}

public partial record RepairsRemoveParameters
{
    ///<summary>The issue ID to remove.</summary>
    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target)
    {
        _haContext.CallService("scene", "delete", target);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Random(ServiceTarget target, SelectRandomParameters data)
    {
        _haContext.CallService("select", "random", target, data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public void Random(ServiceTarget target, object? options = null)
    {
        _haContext.CallService("select", "random", target, new SelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectRandomParameters
{
    ///<summary>Limits the options to select from. If not provided, all options will be considered.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SpookServices
{
    private readonly IHaContext _haContext;
    public SpookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calling this service spooks Home Assistant. The service call will always fail.</summary>
    public void Boo()
    {
        _haContext.CallService("spook", "boo", null);
    }

    ///<summary>A call to this service will randomly fail.</summary>
    public void RandomFail()
    {
        _haContext.CallService("spook", "random_fail", null);
    }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SynologyDsmServices
{
    private readonly IHaContext _haContext;
    public SynologyDsmServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reboots the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    public void Reboot(SynologyDsmRebootParameters data)
    {
        _haContext.CallService("synology_dsm", "reboot", null, data);
    }

    ///<summary>Reboots the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    ///<param name="serial">Serial of the NAS to reboot; required when multiple NAS are configured. eg: 1NDVC86409</param>
    public void Reboot(string? serial = null)
    {
        _haContext.CallService("synology_dsm", "reboot", null, new SynologyDsmRebootParameters { Serial = serial });
    }

    ///<summary>Shutdowns the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    public void Shutdown(SynologyDsmShutdownParameters data)
    {
        _haContext.CallService("synology_dsm", "shutdown", null, data);
    }

    ///<summary>Shutdowns the NAS. This service is deprecated and will be removed in future release. Please use the corresponding button entity.</summary>
    ///<param name="serial">Serial of the NAS to shutdown; required when multiple NAS are configured. eg: 1NDVC86409</param>
    public void Shutdown(string? serial = null)
    {
        _haContext.CallService("synology_dsm", "shutdown", null, new SynologyDsmShutdownParameters { Serial = serial });
    }
}

public partial record SynologyDsmRebootParameters
{
    ///<summary>Serial of the NAS to reboot; required when multiple NAS are configured. eg: 1NDVC86409</summary>
    [JsonPropertyName("serial")]
    public string? Serial { get; init; }
}

public partial record SynologyDsmShutdownParameters
{
    ///<summary>Serial of the NAS to shutdown; required when multiple NAS are configured. eg: 1NDVC86409</summary>
    [JsonPropertyName("serial")]
    public string? Serial { get; init; }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, DateTime time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDuration(ServiceTarget target, TimerSetDurationParameters data)
    {
        _haContext.CallService("timer", "set_duration", target, data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">New duration for the timer, as a timedelta string. eg: 00:01:00, 60</param>
    public void SetDuration(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "set_duration", target, new TimerSetDurationParameters { Duration = duration });
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerSetDurationParameters
{
    ///<summary>New duration for the timer, as a timedelta string. eg: 00:01:00, 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TodoServices
{
    private readonly IHaContext _haContext;
    public TodoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    public void AddItem(ServiceTarget target, TodoAddItemParameters data)
    {
        _haContext.CallService("todo", "add_item", target, data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void AddItem(ServiceTarget target, string item, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "add_item", target, new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetItems(ServiceTarget target, TodoGetItemsParameters data)
    {
        _haContext.CallService("todo", "get_items", target, data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public void GetItems(ServiceTarget target, object? status = null)
    {
        _haContext.CallService("todo", "get_items", target, new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveCompletedItems(ServiceTarget target)
    {
        _haContext.CallService("todo", "remove_completed_items", target);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveItem(ServiceTarget target, TodoRemoveItemParameters data)
    {
        _haContext.CallService("todo", "remove_item", target, data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list items.</param>
    public void RemoveItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "remove_item", target, new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateItem(ServiceTarget target, TodoUpdateItemParameters data)
    {
        _haContext.CallService("todo", "update_item", target, data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public void UpdateItem(ServiceTarget target, string item, string? rename = null, object? status = null, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        _haContext.CallService("todo", "update_item", target, new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public partial record TodoAddItemParameters
{
    ///<summary>The name that represents the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public object? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public object? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial record TodoGetItemsParameters
{
    ///<summary>Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }
}

public partial record TodoRemoveItemParameters
{
    ///<summary>The name for the to-do list items.</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoUpdateItemParameters
{
    ///<summary>The name for the to-do list item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The new name of the to-do item eg: Something else</summary>
    [JsonPropertyName("rename")]
    public string? Rename { get; init; }

    ///<summary>A status or confirmation of the to-do item. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }

    ///<summary>The date the to-do item is expected to be completed. eg: 2023-11-17</summary>
    [JsonPropertyName("due_date")]
    public object? DueDate { get; init; }

    ///<summary>The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</summary>
    [JsonPropertyName("due_datetime")]
    public object? DueDatetime { get; init; }

    ///<summary>A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class ValveServices
{
    private readonly IHaContext _haContext;
    public ValveServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseValve(ServiceTarget target)
    {
        _haContext.CallService("valve", "close_valve", target);
    }

    ///<summary>Opens a valve.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenValve(ServiceTarget target)
    {
        _haContext.CallService("valve", "open_valve", target);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValvePosition(ServiceTarget target, ValveSetValvePositionParameters data)
    {
        _haContext.CallService("valve", "set_valve_position", target, data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetValvePosition(ServiceTarget target, long position)
    {
        _haContext.CallService("valve", "set_valve_position", target, new ValveSetValvePositionParameters { Position = position });
    }

    ///<summary>Stops the valve movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopValve(ServiceTarget target)
    {
        _haContext.CallService("valve", "stop_valve", target);
    }

    ///<summary>Toggles a valve open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("valve", "toggle", target);
    }
}

public partial record ValveSetValvePositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial class WakeOnLanServices
{
    private readonly IHaContext _haContext;
    public WakeOnLanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    public void SendMagicPacket(WakeOnLanSendMagicPacketParameters data)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, data);
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    ///<param name="mac">MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</param>
    ///<param name="broadcastAddress">Broadcast IP where to send the magic packet. eg: 192.168.255.255</param>
    ///<param name="broadcastPort">Port where to send the magic packet.</param>
    public void SendMagicPacket(string mac, string? broadcastAddress = null, long? broadcastPort = null)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, new WakeOnLanSendMagicPacketParameters { Mac = mac, BroadcastAddress = broadcastAddress, BroadcastPort = broadcastPort });
    }
}

public partial record WakeOnLanSendMagicPacketParameters
{
    ///<summary>MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>Broadcast IP where to send the magic packet. eg: 192.168.255.255</summary>
    [JsonPropertyName("broadcast_address")]
    public string? BroadcastAddress { get; init; }

    ///<summary>Port where to send the magic packet.</summary>
    [JsonPropertyName("broadcast_port")]
    public long? BroadcastPort { get; init; }
}

public partial class WasteCollectionScheduleServices
{
    private readonly IHaContext _haContext;
    public WasteCollectionScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Fetch data from all sources.</summary>
    public void FetchData()
    {
        _haContext.CallService("waste_collection_schedule", "fetch_data", null);
    }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WebrtcServices
{
    private readonly IHaContext _haContext;
    public WebrtcServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a temporary or permanent link to a stream (enter &quot;url&quot; or &quot;entity&quot;)</summary>
    public void CreateLink(WebrtcCreateLinkParameters data)
    {
        _haContext.CallService("webrtc", "create_link", null, data);
    }

    ///<summary>Create a temporary or permanent link to a stream (enter &quot;url&quot; or &quot;entity&quot;)</summary>
    ///<param name="linkId">Create a random or permanent ID for your link eg: fd0a53ca-e9ab-4e7a-86a2-441642b16ae1</param>
    ///<param name="url">Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</param>
    ///<param name="entity">Camera entity eg: camera.generic_stream</param>
    ///<param name="openLimit">How many times a link can be opened (0 - unlimit) eg: 1</param>
    ///<param name="timeToLive">How many seconds will the link live (0 - unlimit) eg: 60</param>
    public void CreateLink(string linkId, string? url = null, string? entity = null, long? openLimit = null, long? timeToLive = null)
    {
        _haContext.CallService("webrtc", "create_link", null, new WebrtcCreateLinkParameters { LinkId = linkId, Url = url, Entity = entity, OpenLimit = openLimit, TimeToLive = timeToLive });
    }

    ///<summary>Cast stream to Chromecast device via DashCast application</summary>
    public void DashCast(WebrtcDashCastParameters data)
    {
        _haContext.CallService("webrtc", "dash_cast", null, data);
    }

    ///<summary>Cast stream to Chromecast device via DashCast application</summary>
    ///<param name="entityId">Media player entity eg: media_player.mibox4</param>
    ///<param name="url">Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</param>
    ///<param name="force">Force restart DashCast application</param>
    ///<param name="entity">Camera entity eg: camera.generic_stream</param>
    public void DashCast(string entityId, string? url = null, bool? force = null, string? entity = null)
    {
        _haContext.CallService("webrtc", "dash_cast", null, new WebrtcDashCastParameters { EntityId = entityId, Url = url, Force = force, Entity = entity });
    }
}

public partial record WebrtcCreateLinkParameters
{
    ///<summary>Create a random or permanent ID for your link eg: fd0a53ca-e9ab-4e7a-86a2-441642b16ae1</summary>
    [JsonPropertyName("link_id")]
    public string? LinkId { get; init; }

    ///<summary>Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Camera entity eg: camera.generic_stream</summary>
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    ///<summary>How many times a link can be opened (0 - unlimit) eg: 1</summary>
    [JsonPropertyName("open_limit")]
    public long? OpenLimit { get; init; }

    ///<summary>How many seconds will the link live (0 - unlimit) eg: 60</summary>
    [JsonPropertyName("time_to_live")]
    public long? TimeToLive { get; init; }
}

public partial record WebrtcDashCastParameters
{
    ///<summary>Media player entity eg: media_player.mibox4</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Link to RTSP-stream eg: rtsp://rtsp:12345678@192.168.1.123:554/av_stream/ch0</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }

    ///<summary>Force restart DashCast application</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }

    ///<summary>Camera entity eg: camera.generic_stream</summary>
    [JsonPropertyName("entity")]
    public string? Entity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a new zone in Home Assistant on the fly.</summary>
    public void Create(ZoneCreateParameters data)
    {
        _haContext.CallService("zone", "create", null, data);
    }

    ///<summary>Create a new zone in Home Assistant on the fly.</summary>
    ///<param name="name">Name of the zone</param>
    ///<param name="icon">Icon to use for the zone</param>
    ///<param name="latitude">Latitude of the zone</param>
    ///<param name="longitude">Longitude of the zone</param>
    ///<param name="radius">Radius of the zone</param>
    public void Create(string name, long latitude, long longitude, object? icon = null, long? radius = null)
    {
        _haContext.CallService("zone", "create", null, new ZoneCreateParameters { Name = name, Icon = icon, Latitude = latitude, Longitude = longitude, Radius = radius });
    }

    ///<summary>Delete a zone. This works only with zones created and managed via the UI. Zones created and managed in YAML cannot be managed by Spook.</summary>
    public void Delete(ZoneDeleteParameters data)
    {
        _haContext.CallService("zone", "delete", null, data);
    }

    ///<summary>Delete a zone. This works only with zones created and managed via the UI. Zones created and managed in YAML cannot be managed by Spook.</summary>
    ///<param name="entityId">The ID of the entity (or entities) to remove.</param>
    public void Delete(IEnumerable<string> entityId)
    {
        _haContext.CallService("zone", "delete", null, new ZoneDeleteParameters { EntityId = entityId });
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }

    ///<summary>Update properties of a zone on the fly.</summary>
    public void Update(ZoneUpdateParameters data)
    {
        _haContext.CallService("zone", "update", null, data);
    }

    ///<summary>Update properties of a zone on the fly.</summary>
    ///<param name="entityId">The ID of the entity (or entities) to update.</param>
    ///<param name="name">Name of the zone</param>
    ///<param name="icon">Icon to use for the zone</param>
    ///<param name="latitude">Latitude of the zone</param>
    ///<param name="longitude">Longitude of the zone</param>
    ///<param name="radius">Radius of the zone</param>
    public void Update(string entityId, string? name = null, object? icon = null, long? latitude = null, long? longitude = null, long? radius = null)
    {
        _haContext.CallService("zone", "update", null, new ZoneUpdateParameters { EntityId = entityId, Name = name, Icon = icon, Latitude = latitude, Longitude = longitude, Radius = radius });
    }
}

public partial record ZoneCreateParameters
{
    ///<summary>Name of the zone</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Icon to use for the zone</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>Latitude of the zone</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of the zone</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Radius of the zone</summary>
    [JsonPropertyName("radius")]
    public long? Radius { get; init; }
}

public partial record ZoneDeleteParameters
{
    ///<summary>The ID of the entity (or entities) to remove.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record ZoneUpdateParameters
{
    ///<summary>The ID of the entity (or entities) to update.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the zone</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Icon to use for the zone</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>Latitude of the zone</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of the zone</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Radius of the zone</summary>
    [JsonPropertyName("radius")]
    public long? Radius { get; init; }
}

public static class AlarmControlPanelEntityExtensionMethods
{
    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        target.CallService("alarm_arm_away", data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmAway(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_away", new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        target.CallService("alarm_arm_custom_bypass", data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmCustomBypass(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_custom_bypass", new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        target.CallService("alarm_arm_home", data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmHome(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_home", new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmNightParameters data)
    {
        target.CallService("alarm_arm_night", data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmNight(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_night", new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        target.CallService("alarm_arm_vacation", data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmArmVacation(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_arm_vacation", new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmDisarmParameters data)
    {
        target.CallService("alarm_disarm", data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public static void AlarmDisarm(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_disarm", new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, AlarmControlPanelAlarmTriggerParameters data)
    {
        target.CallService("alarm_trigger", data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The AlarmControlPanelEntity to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this AlarmControlPanelEntity target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The IEnumerable&lt;AlarmControlPanelEntity&gt; to call this service for</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public static void AlarmTrigger(this IEnumerable<AlarmControlPanelEntity> target, string? code = null)
    {
        target.CallService("alarm_trigger", new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class CalendarEntityExtensionMethods
{
    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, CalendarCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Adds a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Defines the short summary or subject for the event. eg: Department Party</param>
    ///<param name="description">A more complete description of the event than the one provided by the summary. eg: Meeting to provide technical review for &apos;Phoenix&apos; design.</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the all-day event should start. eg: 2022-03-22</param>
    ///<param name="endDate">The date the all-day event should end (exclusive). eg: 2022-03-23</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: {&quot;days&quot;: 2} or {&quot;weeks&quot;: 2}</param>
    ///<param name="location">The location of the event. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, object? startDateTime = null, object? endDateTime = null, object? startDate = null, object? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new CalendarCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this ICalendarEntityCore target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, CalendarGetEventsParameters data)
    {
        target.CallService("get_events", data);
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void GetEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Get events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void GetEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("get_events", new CalendarGetEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this ICalendarEntityCore target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, CalendarListEventsParameters data)
    {
        target.CallService("list_events", data);
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this ICalendarEntityCore target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }

    ///<summary>Lists events on a calendar within a time range.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="startDateTime">Returns active events after this time (exclusive). When not set, defaults to now. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">Returns active events before this time (exclusive). Cannot be used with &apos;duration&apos;. eg: 2022-03-22 22:00:00</param>
    ///<param name="duration">Returns active events from start_date_time until the specified duration.</param>
    public static void ListEvents(this IEnumerable<ICalendarEntityCore> target, object? startDateTime = null, object? endDateTime = null, object? duration = null)
    {
        target.CallService("list_events", new CalendarListEventsParameters { StartDateTime = startDateTime, EndDateTime = endDateTime, Duration = duration });
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IClimateEntityCore target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IClimateEntityCore target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<IClimateEntityCore> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class CounterEntityExtensionMethods
{
    ///<summary>Decrements a counter.</summary>
    public static void Decrement(this CounterEntity target)
    {
        target.CallService("decrement");
    }

    ///<summary>Decrements a counter.</summary>
    public static void Decrement(this IEnumerable<CounterEntity> target)
    {
        target.CallService("decrement");
    }

    ///<summary>Increments a counter.</summary>
    public static void Increment(this CounterEntity target)
    {
        target.CallService("increment");
    }

    ///<summary>Increments a counter.</summary>
    public static void Increment(this IEnumerable<CounterEntity> target)
    {
        target.CallService("increment");
    }

    ///<summary>Resets a counter.</summary>
    public static void Reset(this CounterEntity target)
    {
        target.CallService("reset");
    }

    ///<summary>Resets a counter.</summary>
    public static void Reset(this IEnumerable<CounterEntity> target)
    {
        target.CallService("reset");
    }

    ///<summary>Sets the counter value.</summary>
    public static void SetValue(this CounterEntity target, CounterSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the counter value.</summary>
    public static void SetValue(this IEnumerable<CounterEntity> target, CounterSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The CounterEntity to call this service for</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public static void SetValue(this CounterEntity target, long value)
    {
        target.CallService("set_value", new CounterSetValueParameters { Value = value });
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The IEnumerable&lt;CounterEntity&gt; to call this service for</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public static void SetValue(this IEnumerable<CounterEntity> target, long value)
    {
        target.CallService("set_value", new CounterSetValueParameters { Value = value });
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this ICoverEntityCore target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Closes a cover.</summary>
    public static void CloseCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Tilts a cover to close.</summary>
    public static void CloseCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this ICoverEntityCore target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Opens a cover.</summary>
    public static void OpenCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Tilts a cover open.</summary>
    public static void OpenCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this ICoverEntityCore target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this ICoverEntityCore target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetCoverPosition(this IEnumerable<ICoverEntityCore> target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The ICoverEntityCore to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this ICoverEntityCore target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ICoverEntityCore&gt; to call this service for</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public static void SetCoverTiltPosition(this IEnumerable<ICoverEntityCore> target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this ICoverEntityCore target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops the cover movement.</summary>
    public static void StopCover(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Stops a tilting cover movement.</summary>
    public static void StopCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this ICoverEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this ICoverEntityCore target)
    {
        target.CallService("toggle_cover_tilt");
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<ICoverEntityCore> target)
    {
        target.CallService("toggle_cover_tilt");
    }
}

public static class GoogleEntityExtensionMethods
{
    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this ICalendarEntityCore target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, GoogleCreateEventParameters data)
    {
        target.CallService("create_event", data);
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this ICalendarEntityCore target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }

    ///<summary>Add a new calendar event.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="summary">Acts as the title of the event. eg: Bowling</param>
    ///<param name="description">The description of the event. Optional. eg: Birthday bowling</param>
    ///<param name="startDateTime">The date and time the event should start. eg: 2022-03-22 20:00:00</param>
    ///<param name="endDateTime">The date and time the event should end. eg: 2022-03-22 22:00:00</param>
    ///<param name="startDate">The date the whole day event should start. eg: 2022-03-10</param>
    ///<param name="endDate">The date the whole day event should end. eg: 2022-03-11</param>
    ///<param name="in">Days or weeks that you want to create the event in. eg: &quot;days&quot;: 2 or &quot;weeks&quot;: 2</param>
    ///<param name="location">The location of the event. Optional. eg: Conference Room - F123, Bldg. 002</param>
    public static void CreateEvent(this IEnumerable<ICalendarEntityCore> target, string summary, string? description = null, string? startDateTime = null, string? endDateTime = null, string? startDate = null, string? endDate = null, object? @in = null, string? location = null)
    {
        target.CallService("create_event", new GoogleCreateEventParameters { Summary = summary, Description = description, StartDateTime = startDateTime, EndDateTime = endDateTime, StartDate = startDate, EndDate = endDate, In = @in, Location = location });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputDatetimeEntityExtensionMethods
{
    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IInputDatetimeEntityCore target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, InputDatetimeSetDatetimeParameters data)
    {
        target.CallService("set_datetime", data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IInputDatetimeEntityCore to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IInputDatetimeEntityCore target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The IEnumerable&lt;IInputDatetimeEntityCore&gt; to call this service for</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public static void SetDatetime(this IEnumerable<IInputDatetimeEntityCore> target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        target.CallService("set_datetime", new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    public static void Decrement(this IInputNumberEntityCore target, InputNumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, InputNumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IInputNumberEntityCore target, long? amount = null)
    {
        target.CallService("decrement", new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, long? amount = null)
    {
        target.CallService("decrement", new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    public static void Increment(this IInputNumberEntityCore target, InputNumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, InputNumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IInputNumberEntityCore target, long? amount = null)
    {
        target.CallService("increment", new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, long? amount = null)
    {
        target.CallService("increment", new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    public static void Max(this IInputNumberEntityCore target)
    {
        target.CallService("max");
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    public static void Max(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("max");
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    public static void Min(this IInputNumberEntityCore target)
    {
        target.CallService("min");
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    public static void Min(this IEnumerable<IInputNumberEntityCore> target)
    {
        target.CallService("min");
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Select an random option for an input_select entity.</summary>
    public static void Random(this IInputSelectEntityCore target, InputSelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    public static void Random(this IEnumerable<IInputSelectEntityCore> target, InputSelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this IInputSelectEntityCore target, object? options = null)
    {
        target.CallService("random", new InputSelectRandomParameters { Options = options });
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this IEnumerable<IInputSelectEntityCore> target, object? options = null)
    {
        target.CallService("random", new InputSelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IInputSelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IInputSelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IInputSelectEntityCore target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IInputSelectEntityCore target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IInputSelectEntityCore target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IInputSelectEntityCore target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IInputSelectEntityCore target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IInputSelectEntityCore target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Shuffles the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Shuffle(this IInputSelectEntityCore target)
    {
        target.CallService("shuffle");
    }

    ///<summary>Shuffles the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Shuffle(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("shuffle");
    }

    ///<summary>Sorts the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Sort(this IInputSelectEntityCore target)
    {
        target.CallService("sort");
    }

    ///<summary>Sorts the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    public static void Sort(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("sort");
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, object? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Locks a lock.</summary>
    public static void Lock(this ILockEntityCore target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    public static void Lock(this IEnumerable<ILockEntityCore> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this ILockEntityCore target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this IEnumerable<ILockEntityCore> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this ILockEntityCore target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this ILockEntityCore target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_up");
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Decrease a number entity value by a certain amount.</summary>
    public static void Decrement(this INumberEntityCore target, NumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    public static void Decrement(this IEnumerable<INumberEntityCore> target, NumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this INumberEntityCore target, long? amount = null)
    {
        target.CallService("decrement", new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IEnumerable<INumberEntityCore> target, long? amount = null)
    {
        target.CallService("decrement", new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    public static void Increment(this INumberEntityCore target, NumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    public static void Increment(this IEnumerable<INumberEntityCore> target, NumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this INumberEntityCore target, long? amount = null)
    {
        target.CallService("increment", new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IEnumerable<INumberEntityCore> target, long? amount = null)
    {
        target.CallService("increment", new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    public static void Max(this INumberEntityCore target)
    {
        target.CallService("max");
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    public static void Max(this IEnumerable<INumberEntityCore> target)
    {
        target.CallService("max");
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    public static void Min(this INumberEntityCore target)
    {
        target.CallService("min");
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    public static void Min(this IEnumerable<INumberEntityCore> target)
    {
        target.CallService("min");
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class O365EntityExtensionMethods
{
    ///<summary>Complete a ToDo</summary>
    public static void CompleteTodo(this TodoEntity target, O365CompleteTodoParameters data)
    {
        target.CallService("complete_todo", data);
    }

    ///<summary>Complete a ToDo</summary>
    public static void CompleteTodo(this IEnumerable<TodoEntity> target, O365CompleteTodoParameters data)
    {
        target.CallService("complete_todo", data);
    }

    ///<summary>Complete a ToDo</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="completed">Set whether todo is completed or not eg: True</param>
    public static void CompleteTodo(this TodoEntity target, string todoId, bool completed)
    {
        target.CallService("complete_todo", new O365CompleteTodoParameters { TodoId = todoId, Completed = completed });
    }

    ///<summary>Complete a ToDo</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="completed">Set whether todo is completed or not eg: True</param>
    public static void CompleteTodo(this IEnumerable<TodoEntity> target, string todoId, bool completed)
    {
        target.CallService("complete_todo", new O365CompleteTodoParameters { TodoId = todoId, Completed = completed });
    }

    ///<summary>Create new calendar event</summary>
    public static void CreateCalendarEvent(this ICalendarEntityCore target, O365CreateCalendarEventParameters data)
    {
        target.CallService("create_calendar_event", data);
    }

    ///<summary>Create new calendar event</summary>
    public static void CreateCalendarEvent(this IEnumerable<ICalendarEntityCore> target, O365CreateCalendarEventParameters data)
    {
        target.CallService("create_calendar_event", data);
    }

    ///<summary>Create new calendar event</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="subject">The subject of the created event eg: Clean up the garage</param>
    ///<param name="start">The start time of the event eg: 2025-01-01T12:00:00+0000</param>
    ///<param name="end">The end time of the event eg: 2025-01-01T12:30:00+0000</param>
    ///<param name="body">The body text for the event (optional) eg: Remember to also clean out the gutters</param>
    ///<param name="location">The location for the event (optional) eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</param>
    ///<param name="categories">list of categories for the event (optional)</param>
    ///<param name="sensitivity">The sensitivity for the event (optional) [Normal, Personal, Private, Confidential] eg: normal</param>
    ///<param name="showAs">Show event as (optional) [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</param>
    ///<param name="isAllDay">Set whether event is all day (optional) eg: False</param>
    ///<param name="attendees">list of attendees formatted as email: example@example.com type: Required, Optional, or Resource (optional)</param>
    public static void CreateCalendarEvent(this ICalendarEntityCore target, string subject, string start, string end, string? body = null, string? location = null, string? categories = null, object? sensitivity = null, object? showAs = null, bool? isAllDay = null, object? attendees = null)
    {
        target.CallService("create_calendar_event", new O365CreateCalendarEventParameters { Subject = subject, Start = start, End = end, Body = body, Location = location, Categories = categories, Sensitivity = sensitivity, ShowAs = showAs, IsAllDay = isAllDay, Attendees = attendees });
    }

    ///<summary>Create new calendar event</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="subject">The subject of the created event eg: Clean up the garage</param>
    ///<param name="start">The start time of the event eg: 2025-01-01T12:00:00+0000</param>
    ///<param name="end">The end time of the event eg: 2025-01-01T12:30:00+0000</param>
    ///<param name="body">The body text for the event (optional) eg: Remember to also clean out the gutters</param>
    ///<param name="location">The location for the event (optional) eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</param>
    ///<param name="categories">list of categories for the event (optional)</param>
    ///<param name="sensitivity">The sensitivity for the event (optional) [Normal, Personal, Private, Confidential] eg: normal</param>
    ///<param name="showAs">Show event as (optional) [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</param>
    ///<param name="isAllDay">Set whether event is all day (optional) eg: False</param>
    ///<param name="attendees">list of attendees formatted as email: example@example.com type: Required, Optional, or Resource (optional)</param>
    public static void CreateCalendarEvent(this IEnumerable<ICalendarEntityCore> target, string subject, string start, string end, string? body = null, string? location = null, string? categories = null, object? sensitivity = null, object? showAs = null, bool? isAllDay = null, object? attendees = null)
    {
        target.CallService("create_calendar_event", new O365CreateCalendarEventParameters { Subject = subject, Start = start, End = end, Body = body, Location = location, Categories = categories, Sensitivity = sensitivity, ShowAs = showAs, IsAllDay = isAllDay, Attendees = attendees });
    }

    ///<summary>Delete a ToDo</summary>
    public static void DeleteTodo(this TodoEntity target, O365DeleteTodoParameters data)
    {
        target.CallService("delete_todo", data);
    }

    ///<summary>Delete a ToDo</summary>
    public static void DeleteTodo(this IEnumerable<TodoEntity> target, O365DeleteTodoParameters data)
    {
        target.CallService("delete_todo", data);
    }

    ///<summary>Delete a ToDo</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    public static void DeleteTodo(this TodoEntity target, string todoId)
    {
        target.CallService("delete_todo", new O365DeleteTodoParameters { TodoId = todoId });
    }

    ///<summary>Delete a ToDo</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    public static void DeleteTodo(this IEnumerable<TodoEntity> target, string todoId)
    {
        target.CallService("delete_todo", new O365DeleteTodoParameters { TodoId = todoId });
    }

    ///<summary>Modify existing calendar event, all properties except event_id are optional.</summary>
    public static void ModifyCalendarEvent(this ICalendarEntityCore target, O365ModifyCalendarEventParameters data)
    {
        target.CallService("modify_calendar_event", data);
    }

    ///<summary>Modify existing calendar event, all properties except event_id are optional.</summary>
    public static void ModifyCalendarEvent(this IEnumerable<ICalendarEntityCore> target, O365ModifyCalendarEventParameters data)
    {
        target.CallService("modify_calendar_event", data);
    }

    ///<summary>Modify existing calendar event, all properties except event_id are optional.</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="eventId">ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="subject">The subject of the created event eg: Clean up the garage</param>
    ///<param name="start">The start time of the event eg: 2025-01-01T12:00:00+0000</param>
    ///<param name="end">The end time of the event eg: 2025-01-01T12:30:00+0000</param>
    ///<param name="body">The body text for the event eg: Remember to also clean out the gutters</param>
    ///<param name="location">The location for the event eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</param>
    ///<param name="categories">list of categories for the event</param>
    ///<param name="sensitivity">The sensitivity for the event[Normal, Personal, Private, Confidential] eg: normal</param>
    ///<param name="showAs">Show event as [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</param>
    ///<param name="isAllDay">Set whether event is all day eg: False</param>
    ///<param name="attendees">list of attendees formatted as email: example@example.com type: Required, Optional, or Resource</param>
    public static void ModifyCalendarEvent(this ICalendarEntityCore target, string eventId, string? subject = null, string? start = null, string? end = null, string? body = null, string? location = null, string? categories = null, object? sensitivity = null, object? showAs = null, bool? isAllDay = null, object? attendees = null)
    {
        target.CallService("modify_calendar_event", new O365ModifyCalendarEventParameters { EventId = eventId, Subject = subject, Start = start, End = end, Body = body, Location = location, Categories = categories, Sensitivity = sensitivity, ShowAs = showAs, IsAllDay = isAllDay, Attendees = attendees });
    }

    ///<summary>Modify existing calendar event, all properties except event_id are optional.</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="eventId">ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="subject">The subject of the created event eg: Clean up the garage</param>
    ///<param name="start">The start time of the event eg: 2025-01-01T12:00:00+0000</param>
    ///<param name="end">The end time of the event eg: 2025-01-01T12:30:00+0000</param>
    ///<param name="body">The body text for the event eg: Remember to also clean out the gutters</param>
    ///<param name="location">The location for the event eg: 1600 Pennsylvania Ave Nw, Washington, DC 20500</param>
    ///<param name="categories">list of categories for the event</param>
    ///<param name="sensitivity">The sensitivity for the event[Normal, Personal, Private, Confidential] eg: normal</param>
    ///<param name="showAs">Show event as [Free, Tentative, Busy, Oof, WorkingElsewhere, Unknown] eg: busy</param>
    ///<param name="isAllDay">Set whether event is all day eg: False</param>
    ///<param name="attendees">list of attendees formatted as email: example@example.com type: Required, Optional, or Resource</param>
    public static void ModifyCalendarEvent(this IEnumerable<ICalendarEntityCore> target, string eventId, string? subject = null, string? start = null, string? end = null, string? body = null, string? location = null, string? categories = null, object? sensitivity = null, object? showAs = null, bool? isAllDay = null, object? attendees = null)
    {
        target.CallService("modify_calendar_event", new O365ModifyCalendarEventParameters { EventId = eventId, Subject = subject, Start = start, End = end, Body = body, Location = location, Categories = categories, Sensitivity = sensitivity, ShowAs = showAs, IsAllDay = isAllDay, Attendees = attendees });
    }

    ///<summary>Create a new ToDo</summary>
    public static void NewTodo(this TodoEntity target, O365NewTodoParameters data)
    {
        target.CallService("new_todo", data);
    }

    ///<summary>Create a new ToDo</summary>
    public static void NewTodo(this IEnumerable<TodoEntity> target, O365NewTodoParameters data)
    {
        target.CallService("new_todo", data);
    }

    ///<summary>Create a new ToDo</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="subject">The subject of the todo eg: Pick up the mail</param>
    ///<param name="description">Description of the todo eg: Walk to the post box and collect the mail</param>
    ///<param name="due">When the todo is due by eg: YYYY-MM-DD</param>
    ///<param name="reminder">When a reminder is needed eg: 2025-01-01T12:00:00+0000</param>
    public static void NewTodo(this TodoEntity target, string subject, string? description = null, object? due = null, object? reminder = null)
    {
        target.CallService("new_todo", new O365NewTodoParameters { Subject = subject, Description = description, Due = due, Reminder = reminder });
    }

    ///<summary>Create a new ToDo</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="subject">The subject of the todo eg: Pick up the mail</param>
    ///<param name="description">Description of the todo eg: Walk to the post box and collect the mail</param>
    ///<param name="due">When the todo is due by eg: YYYY-MM-DD</param>
    ///<param name="reminder">When a reminder is needed eg: 2025-01-01T12:00:00+0000</param>
    public static void NewTodo(this IEnumerable<TodoEntity> target, string subject, string? description = null, object? due = null, object? reminder = null)
    {
        target.CallService("new_todo", new O365NewTodoParameters { Subject = subject, Description = description, Due = due, Reminder = reminder });
    }

    ///<summary>Delete calendar event</summary>
    public static void RemoveCalendarEvent(this ICalendarEntityCore target, O365RemoveCalendarEventParameters data)
    {
        target.CallService("remove_calendar_event", data);
    }

    ///<summary>Delete calendar event</summary>
    public static void RemoveCalendarEvent(this IEnumerable<ICalendarEntityCore> target, O365RemoveCalendarEventParameters data)
    {
        target.CallService("remove_calendar_event", data);
    }

    ///<summary>Delete calendar event</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="eventId">ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    public static void RemoveCalendarEvent(this ICalendarEntityCore target, string eventId)
    {
        target.CallService("remove_calendar_event", new O365RemoveCalendarEventParameters { EventId = eventId });
    }

    ///<summary>Delete calendar event</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="eventId">ID for the event, can be found as an attribute on you calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    public static void RemoveCalendarEvent(this IEnumerable<ICalendarEntityCore> target, string eventId)
    {
        target.CallService("remove_calendar_event", new O365RemoveCalendarEventParameters { EventId = eventId });
    }

    ///<summary>Respond to calendar event/invite</summary>
    public static void RespondCalendarEvent(this ICalendarEntityCore target, O365RespondCalendarEventParameters data)
    {
        target.CallService("respond_calendar_event", data);
    }

    ///<summary>Respond to calendar event/invite</summary>
    public static void RespondCalendarEvent(this IEnumerable<ICalendarEntityCore> target, O365RespondCalendarEventParameters data)
    {
        target.CallService("respond_calendar_event", data);
    }

    ///<summary>Respond to calendar event/invite</summary>
    ///<param name="target">The ICalendarEntityCore to call this service for</param>
    ///<param name="eventId">ID for event, can be found as an attribute on your calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="response">The response to the invite [Accept, Tentative, Decline] eg: Decline</param>
    ///<param name="message">The response message to the invite (Optional) eg: I cannot attend this meeting</param>
    ///<param name="sendResponse">Send the response to the organizer (Optional) eg: True</param>
    public static void RespondCalendarEvent(this ICalendarEntityCore target, string eventId, string response, string? message = null, bool? sendResponse = null)
    {
        target.CallService("respond_calendar_event", new O365RespondCalendarEventParameters { EventId = eventId, Response = response, Message = message, SendResponse = sendResponse });
    }

    ///<summary>Respond to calendar event/invite</summary>
    ///<param name="target">The IEnumerable&lt;ICalendarEntityCore&gt; to call this service for</param>
    ///<param name="eventId">ID for event, can be found as an attribute on your calendar entity&apos;s events eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="response">The response to the invite [Accept, Tentative, Decline] eg: Decline</param>
    ///<param name="message">The response message to the invite (Optional) eg: I cannot attend this meeting</param>
    ///<param name="sendResponse">Send the response to the organizer (Optional) eg: True</param>
    public static void RespondCalendarEvent(this IEnumerable<ICalendarEntityCore> target, string eventId, string response, string? message = null, bool? sendResponse = null)
    {
        target.CallService("respond_calendar_event", new O365RespondCalendarEventParameters { EventId = eventId, Response = response, Message = message, SendResponse = sendResponse });
    }

    ///<summary>Update a ToDo</summary>
    public static void UpdateTodo(this TodoEntity target, O365UpdateTodoParameters data)
    {
        target.CallService("update_todo", data);
    }

    ///<summary>Update a ToDo</summary>
    public static void UpdateTodo(this IEnumerable<TodoEntity> target, O365UpdateTodoParameters data)
    {
        target.CallService("update_todo", data);
    }

    ///<summary>Update a ToDo</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="subject">The subject of the todo eg: Pick up the mail</param>
    ///<param name="description">Description of the todo eg: Walk to the post box and collect the mail</param>
    ///<param name="due">When the todo is due by eg: 2025-01-01</param>
    ///<param name="reminder">When a reminder is needed eg: 2025-01-01T12:00:00+0000</param>
    public static void UpdateTodo(this TodoEntity target, string todoId, string? subject = null, string? description = null, object? due = null, object? reminder = null)
    {
        target.CallService("update_todo", new O365UpdateTodoParameters { TodoId = todoId, Subject = subject, Description = description, Due = due, Reminder = reminder });
    }

    ///<summary>Update a ToDo</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="todoId">ID for the todo, can be found as an attribute on your todo eg: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</param>
    ///<param name="subject">The subject of the todo eg: Pick up the mail</param>
    ///<param name="description">Description of the todo eg: Walk to the post box and collect the mail</param>
    ///<param name="due">When the todo is due by eg: 2025-01-01</param>
    ///<param name="reminder">When a reminder is needed eg: 2025-01-01T12:00:00+0000</param>
    public static void UpdateTodo(this IEnumerable<TodoEntity> target, string todoId, string? subject = null, string? description = null, object? due = null, object? reminder = null)
    {
        target.CallService("update_todo", new O365UpdateTodoParameters { TodoId = todoId, Subject = subject, Description = description, Due = due, Reminder = reminder });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IRemoteEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IRemoteEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Select an random option for a select entity.</summary>
    public static void Random(this ISelectEntityCore target, SelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    public static void Random(this IEnumerable<ISelectEntityCore> target, SelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this ISelectEntityCore target, object? options = null)
    {
        target.CallService("random", new SelectRandomParameters { Options = options });
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this IEnumerable<ISelectEntityCore> target, object? options = null)
    {
        target.CallService("random", new SelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class TimeEntityExtensionMethods
{
    ///<summary>Sets the time.</summary>
    public static void SetValue(this TimeEntity target, TimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the time.</summary>
    public static void SetValue(this IEnumerable<TimeEntity> target, TimeSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The TimeEntity to call this service for</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public static void SetValue(this TimeEntity target, DateTime time)
    {
        target.CallService("set_value", new TimeSetValueParameters { Time = time });
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The IEnumerable&lt;TimeEntity&gt; to call this service for</param>
    ///<param name="time">The time to set. eg: 22:15</param>
    public static void SetValue(this IEnumerable<TimeEntity> target, DateTime time)
    {
        target.CallService("set_value", new TimeSetValueParameters { Time = time });
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Cancels a timer.</summary>
    public static void Cancel(this ITimerEntityCore target)
    {
        target.CallService("cancel");
    }

    ///<summary>Cancels a timer.</summary>
    public static void Cancel(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("cancel");
    }

    ///<summary>Changes a timer.</summary>
    public static void Change(this ITimerEntityCore target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer.</summary>
    public static void Change(this IEnumerable<ITimerEntityCore> target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this ITimerEntityCore target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    public static void Finish(this ITimerEntityCore target)
    {
        target.CallService("finish");
    }

    ///<summary>Finishes a timer.</summary>
    public static void Finish(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("finish");
    }

    ///<summary>Pauses a timer.</summary>
    public static void Pause(this ITimerEntityCore target)
    {
        target.CallService("pause");
    }

    ///<summary>Pauses a timer.</summary>
    public static void Pause(this IEnumerable<ITimerEntityCore> target)
    {
        target.CallService("pause");
    }

    ///<summary>Set duration for an existing timer.</summary>
    public static void SetDuration(this ITimerEntityCore target, TimerSetDurationParameters data)
    {
        target.CallService("set_duration", data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    public static void SetDuration(this IEnumerable<ITimerEntityCore> target, TimerSetDurationParameters data)
    {
        target.CallService("set_duration", data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">New duration for the timer, as a timedelta string. eg: 00:01:00, 60</param>
    public static void SetDuration(this ITimerEntityCore target, string duration)
    {
        target.CallService("set_duration", new TimerSetDurationParameters { Duration = duration });
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">New duration for the timer, as a timedelta string. eg: 00:01:00, 60</param>
    public static void SetDuration(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("set_duration", new TimerSetDurationParameters { Duration = duration });
    }

    ///<summary>Starts a timer.</summary>
    public static void Start(this ITimerEntityCore target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer.</summary>
    public static void Start(this IEnumerable<ITimerEntityCore> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public static void Start(this ITimerEntityCore target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<ITimerEntityCore> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class TodoEntityExtensionMethods
{
    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this TodoEntity target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this IEnumerable<TodoEntity> target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this TodoEntity target, string item, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void AddItem(this IEnumerable<TodoEntity> target, string item, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Get items on a to-do list.</summary>
    public static void GetItems(this TodoEntity target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Get items on a to-do list.</summary>
    public static void GetItems(this IEnumerable<TodoEntity> target, TodoGetItemsParameters data)
    {
        target.CallService("get_items", data);
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this TodoEntity target, object? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Get items on a to-do list.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="status">Only return to-do items with the specified statuses. Returns not completed actions by default. eg: needs_action</param>
    public static void GetItems(this IEnumerable<TodoEntity> target, object? status = null)
    {
        target.CallService("get_items", new TodoGetItemsParameters { Status = status });
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this TodoEntity target)
    {
        target.CallService("remove_completed_items");
    }

    ///<summary>Remove all to-do list items that have been completed.</summary>
    public static void RemoveCompletedItems(this IEnumerable<TodoEntity> target)
    {
        target.CallService("remove_completed_items");
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this TodoEntity target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this TodoEntity target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this TodoEntity target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this TodoEntity target, string item, string? rename = null, object? status = null, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    ///<param name="dueDate">The date the to-do item is expected to be completed. eg: 2023-11-17</param>
    ///<param name="dueDatetime">The date and time the to-do item is expected to be completed. eg: 2023-11-17 13:30:00</param>
    ///<param name="description">A more complete description of the to-do item than provided by the item name. eg: A more complete description of the to-do item than that provided by the summary.</param>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, string item, string? rename = null, object? status = null, object? dueDate = null, object? dueDatetime = null, string? description = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status, DueDate = dueDate, DueDatetime = dueDatetime, Description = description });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("skip");
    }
}

public static class VacuumEntityExtensionMethods
{
    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IVacuumEntityCore target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    public static void CleanSpot(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("clean_spot");
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IVacuumEntityCore target)
    {
        target.CallService("locate");
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    public static void Locate(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("locate");
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IVacuumEntityCore target)
    {
        target.CallService("pause");
    }

    ///<summary>Pauses the cleaning task.</summary>
    public static void Pause(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("pause");
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IVacuumEntityCore target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    public static void ReturnToBase(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("return_to_base");
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IVacuumEntityCore target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, VacuumSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IVacuumEntityCore target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public static void SendCommand(this IEnumerable<IVacuumEntityCore> target, string command, object? @params = null)
    {
        target.CallService("send_command", new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IVacuumEntityCore target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, VacuumSetFanSpeedParameters data)
    {
        target.CallService("set_fan_speed", data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IVacuumEntityCore to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IVacuumEntityCore target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The IEnumerable&lt;IVacuumEntityCore&gt; to call this service for</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public static void SetFanSpeed(this IEnumerable<IVacuumEntityCore> target, string fanSpeed)
    {
        target.CallService("set_fan_speed", new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IVacuumEntityCore target)
    {
        target.CallService("start");
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    public static void Start(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("start");
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IVacuumEntityCore target)
    {
        target.CallService("stop");
    }

    ///<summary>Stops the current cleaning task.</summary>
    public static void Stop(this IEnumerable<IVacuumEntityCore> target)
    {
        target.CallService("stop");
    }
}

public static class ValveEntityExtensionMethods
{
    ///<summary>Closes a valve.</summary>
    public static void CloseValve(this ValveEntity target)
    {
        target.CallService("close_valve");
    }

    ///<summary>Closes a valve.</summary>
    public static void CloseValve(this IEnumerable<ValveEntity> target)
    {
        target.CallService("close_valve");
    }

    ///<summary>Opens a valve.</summary>
    public static void OpenValve(this ValveEntity target)
    {
        target.CallService("open_valve");
    }

    ///<summary>Opens a valve.</summary>
    public static void OpenValve(this IEnumerable<ValveEntity> target)
    {
        target.CallService("open_valve");
    }

    ///<summary>Moves a valve to a specific position.</summary>
    public static void SetValvePosition(this ValveEntity target, ValveSetValvePositionParameters data)
    {
        target.CallService("set_valve_position", data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    public static void SetValvePosition(this IEnumerable<ValveEntity> target, ValveSetValvePositionParameters data)
    {
        target.CallService("set_valve_position", data);
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The ValveEntity to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetValvePosition(this ValveEntity target, long position)
    {
        target.CallService("set_valve_position", new ValveSetValvePositionParameters { Position = position });
    }

    ///<summary>Moves a valve to a specific position.</summary>
    ///<param name="target">The IEnumerable&lt;ValveEntity&gt; to call this service for</param>
    ///<param name="position">Target position.</param>
    public static void SetValvePosition(this IEnumerable<ValveEntity> target, long position)
    {
        target.CallService("set_valve_position", new ValveSetValvePositionParameters { Position = position });
    }

    ///<summary>Stops the valve movement.</summary>
    public static void StopValve(this ValveEntity target)
    {
        target.CallService("stop_valve");
    }

    ///<summary>Stops the valve movement.</summary>
    public static void StopValve(this IEnumerable<ValveEntity> target)
    {
        target.CallService("stop_valve");
    }

    ///<summary>Toggles a valve open/closed.</summary>
    public static void Toggle(this ValveEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a valve open/closed.</summary>
    public static void Toggle(this IEnumerable<ValveEntity> target)
    {
        target.CallService("toggle");
    }
}
